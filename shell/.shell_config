# ==============================================================================
#                      Syst√®me de Configuration Personnalis√©e
# ==============================================================================

# Fichier de configuration par d√©faut
DOTFILES_CONFIG_FILE="$HOME/.dotfiles_config"
DOTFILES_HOOKS_DIR="$HOME/.dotfiles_hooks"

# Configuration par d√©faut
declare -A DOTFILES_CONFIG=(
    [EMOJI_ENABLED]="true"
    [AUTO_PUSH]="false"
    [DEFAULT_BRANCH_TYPE]="feat"
    [JIRA_PREFIX]="PROJ"
    [VERBOSE_MODE]="true"
    [ANALYTICS_ENABLED]="true"
    [BACKUP_ENABLED]="true"
    [VALIDATION_ENABLED]="true"
    [LAZY_LOADING]="true"
    [COMPLETIONS_ENABLED]="true"
    [THEME]="default"
    [LANGUAGE]="fr"
    [NOTIFICATION_ENABLED]="false"
    [AUTO_STASH]="true"
    [SECURITY_LEVEL]="medium"
)

# Charger la configuration utilisateur
load_dotfiles_config() {
    # Cr√©er le fichier de config s'il n'existe pas
    if [[ ! -f "$DOTFILES_CONFIG_FILE" ]]; then
        create_default_config
    fi
    
    # Charger les valeurs du fichier
    while IFS='=' read -r key value; do
        # Ignorer les commentaires et lignes vides
        [[ "$key" =~ ^#.*$ ]] || [[ -z "$key" ]] && continue
        
        # Supprimer les espaces et guillemets
        key=$(echo "$key" | tr -d ' ')
        value=$(echo "$value" | tr -d ' "'"'"'')
        
        # Mettre √† jour la configuration
        DOTFILES_CONFIG["$key"]="$value"
    done < "$DOTFILES_CONFIG_FILE"
}

# Cr√©er le fichier de configuration par d√©faut
create_default_config() {
    cat > "$DOTFILES_CONFIG_FILE" << 'EOF'
# ==============================================================================
#                      Configuration Dotfiles Personnalis√©e
# ==============================================================================

# Interface et Apparence
EMOJI_ENABLED=true          # Utiliser les √©mojis dans les messages
VERBOSE_MODE=true           # Messages d√©taill√©s
THEME=default               # Th√®me de couleurs (default, minimal, colorful)
LANGUAGE=fr                 # Langue des messages (fr, en)

# Comportement Git
DEFAULT_BRANCH_TYPE=feat    # Type par d√©faut pour nouvelles branches
JIRA_PREFIX=PROJ           # Pr√©fixe JIRA par d√©faut
AUTO_PUSH=false            # Push automatique apr√®s commit
AUTO_STASH=true            # Stash automatique avant changement branche

# Fonctionnalit√©s
ANALYTICS_ENABLED=true      # Collecte de statistiques d'usage
BACKUP_ENABLED=true        # Backups automatiques avant op√©rations
VALIDATION_ENABLED=true    # Validation des noms de branches/commits
LAZY_LOADING=true          # Chargement √† la demande des fonctions
COMPLETIONS_ENABLED=true   # Auto-compl√©tion intelligente

# S√©curit√©
SECURITY_LEVEL=medium      # Niveau de s√©curit√© (low, medium, high)
NOTIFICATION_ENABLED=false # Notifications desktop (n√©cessite notify-send)

# ==============================================================================
# Pour modifier ces valeurs, √©ditez ce fichier ou utilisez 'dotfiles-config'
# ==============================================================================
EOF

    echo "‚úÖ Configuration par d√©faut cr√©√©e: $DOTFILES_CONFIG_FILE"
}

# Obtenir une valeur de configuration
get_config() {
    local key="$1"
    local default_value="$2"
    
    # Charger la config si pas encore fait
    [[ ${#DOTFILES_CONFIG[@]} -eq 0 ]] && load_dotfiles_config
    
    echo "${DOTFILES_CONFIG[$key]:-$default_value}"
}

# D√©finir une valeur de configuration
set_config() {
    local key="$1"
    local value="$2"
    
    if [[ -z "$key" ]] || [[ -z "$value" ]]; then
        echo "‚ùå Usage: set_config <cl√©> <valeur>"
        return 1
    fi
    
    # Mettre √† jour en m√©moire
    DOTFILES_CONFIG["$key"]="$value"
    
    # Mettre √† jour le fichier
    if [[ -f "$DOTFILES_CONFIG_FILE" ]]; then
        if grep -q "^$key=" "$DOTFILES_CONFIG_FILE"; then
            # Remplacer la valeur existante
            sed -i.bak "s/^$key=.*/$key=$value/" "$DOTFILES_CONFIG_FILE"
        else
            # Ajouter la nouvelle valeur
            echo "$key=$value" >> "$DOTFILES_CONFIG_FILE"
        fi
        echo "‚úÖ Configuration mise √† jour: $key=$value"
    else
        echo "‚ùå Fichier de configuration non trouv√©"
        return 1
    fi
}

# Interface de configuration interactive
dotfiles_config() {
    local action="$1"
    
    case "$action" in
        "show"|"list"|"")
            echo "‚öôÔ∏è  Configuration actuelle des dotfiles"
            echo "======================================="
            
            load_dotfiles_config
            
            echo ""
            echo "üé® Interface et Apparence:"
            echo "   EMOJI_ENABLED      = $(get_config EMOJI_ENABLED)"
            echo "   VERBOSE_MODE       = $(get_config VERBOSE_MODE)"
            echo "   THEME              = $(get_config THEME)"
            echo "   LANGUAGE           = $(get_config LANGUAGE)"
            
            echo ""
            echo "üîß Comportement Git:"
            echo "   DEFAULT_BRANCH_TYPE = $(get_config DEFAULT_BRANCH_TYPE)"
            echo "   JIRA_PREFIX        = $(get_config JIRA_PREFIX)"
            echo "   AUTO_PUSH          = $(get_config AUTO_PUSH)"
            echo "   AUTO_STASH         = $(get_config AUTO_STASH)"
            
            echo ""
            echo "‚ö° Fonctionnalit√©s:"
            echo "   ANALYTICS_ENABLED   = $(get_config ANALYTICS_ENABLED)"
            echo "   BACKUP_ENABLED     = $(get_config BACKUP_ENABLED)"
            echo "   VALIDATION_ENABLED = $(get_config VALIDATION_ENABLED)"
            echo "   LAZY_LOADING       = $(get_config LAZY_LOADING)"
            echo "   COMPLETIONS_ENABLED = $(get_config COMPLETIONS_ENABLED)"
            
            echo ""
            echo "üõ°Ô∏è  S√©curit√©:"
            echo "   SECURITY_LEVEL      = $(get_config SECURITY_LEVEL)"
            echo "   NOTIFICATION_ENABLED = $(get_config NOTIFICATION_ENABLED)"
            
            echo ""
            echo "üìÅ Fichier de config: $DOTFILES_CONFIG_FILE"
            echo "üí° Usage: dotfiles-config set <cl√©> <valeur>"
            ;;
            
        "set")
            local key="$2"
            local value="$3"
            set_config "$key" "$value"
            ;;
            
        "get")
            local key="$2"
            echo "$(get_config "$key")"
            ;;
            
        "edit")
            if command -v code >/dev/null 2>&1; then
                code "$DOTFILES_CONFIG_FILE"
            elif command -v codium >/dev/null 2>&1; then
                codium "$DOTFILES_CONFIG_FILE"
            elif command -v nano >/dev/null 2>&1; then
                nano "$DOTFILES_CONFIG_FILE"
            else
                echo "üìù √âditez manuellement: $DOTFILES_CONFIG_FILE"
            fi
            ;;
            
        "reset")
            echo "‚ö†Ô∏è  ATTENTION: Ceci va r√©initialiser toute la configuration"
            read -p "Confirmer la r√©initialisation? [y/N]: " confirm
            if [[ "$confirm" =~ ^[Yy]$ ]]; then
                mv "$DOTFILES_CONFIG_FILE" "${DOTFILES_CONFIG_FILE}.backup.$(date +%Y%m%d-%H%M%S)"
                create_default_config
                echo "‚úÖ Configuration r√©initialis√©e (backup sauvegard√©)"
            else
                echo "‚ùå R√©initialisation annul√©e"
            fi
            ;;
            
        "wizard")
            config_wizard
            ;;
            
        *)
            echo "Usage: dotfiles-config [show|set|get|edit|reset|wizard]"
            echo ""
            echo "Commandes:"
            echo "  show         Afficher la configuration actuelle"
            echo "  set <k> <v>  D√©finir une valeur"
            echo "  get <key>    Obtenir une valeur"
            echo "  edit         Ouvrir l'√©diteur"
            echo "  reset        R√©initialiser la configuration"
            echo "  wizard       Assistant de configuration"
            ;;
    esac
}

# Assistant de configuration
config_wizard() {
    echo "üßô‚Äç‚ôÇÔ∏è Assistant de configuration des dotfiles"
    echo "==========================================="
    
    load_dotfiles_config
    
    echo ""
    echo "1. Interface et Apparence"
    echo "========================"
    
    local current_emoji=$(get_config EMOJI_ENABLED)
    read -p "Utiliser les √©mojis dans les messages? [Y/n] (actuel: $current_emoji): " emoji_choice
    [[ "$emoji_choice" =~ ^[Nn]$ ]] && set_config EMOJI_ENABLED false || set_config EMOJI_ENABLED true
    
    local current_verbose=$(get_config VERBOSE_MODE)
    read -p "Mode verbeux (messages d√©taill√©s)? [Y/n] (actuel: $current_verbose): " verbose_choice
    [[ "$verbose_choice" =~ ^[Nn]$ ]] && set_config VERBOSE_MODE false || set_config VERBOSE_MODE true
    
    echo ""
    echo "2. Configuration Git"
    echo "==================="
    
    local current_type=$(get_config DEFAULT_BRANCH_TYPE)
    echo "Type de branche par d√©faut (feat, fix, docs, etc.)"
    read -p "Type [$current_type]: " branch_type
    [[ -n "$branch_type" ]] && set_config DEFAULT_BRANCH_TYPE "$branch_type"
    
    local current_jira=$(get_config JIRA_PREFIX)
    echo "Pr√©fixe JIRA par d√©faut"
    read -p "Pr√©fixe [$current_jira]: " jira_prefix
    [[ -n "$jira_prefix" ]] && set_config JIRA_PREFIX "$jira_prefix"
    
    local current_push=$(get_config AUTO_PUSH)
    read -p "Push automatique apr√®s commit? [y/N] (actuel: $current_push): " push_choice
    [[ "$push_choice" =~ ^[Yy]$ ]] && set_config AUTO_PUSH true || set_config AUTO_PUSH false
    
    echo ""
    echo "3. Fonctionnalit√©s"
    echo "=================="
    
    local current_analytics=$(get_config ANALYTICS_ENABLED)
    read -p "Activer les statistiques d'usage? [Y/n] (actuel: $current_analytics): " analytics_choice
    [[ "$analytics_choice" =~ ^[Nn]$ ]] && set_config ANALYTICS_ENABLED false || set_config ANALYTICS_ENABLED true
    
    local current_backup=$(get_config BACKUP_ENABLED)
    read -p "Activer les backups automatiques? [Y/n] (actuel: $current_backup): " backup_choice
    [[ "$backup_choice" =~ ^[Nn]$ ]] && set_config BACKUP_ENABLED false || set_config BACKUP_ENABLED true
    
    echo ""
    echo "‚úÖ Configuration termin√©e!"
    echo "üìÅ Fichier: $DOTFILES_CONFIG_FILE"
    echo "üîß Pour modifier: dotfiles-config edit"
}

# Syst√®me de hooks personnalisables
run_hook() {
    local hook_name="$1"
    shift
    
    # V√©rifier si les hooks sont activ√©s
    if [[ "$(get_config HOOKS_ENABLED)" == "false" ]]; then
        return 0
    fi
    
    local hook_file="$DOTFILES_HOOKS_DIR/$hook_name"
    
    if [[ -x "$hook_file" ]]; then
        if [[ "$(get_config VERBOSE_MODE)" == "true" ]]; then
            echo "üîó Ex√©cution du hook: $hook_name"
        fi
        "$hook_file" "$@"
    fi
}

# Cr√©er le r√©pertoire des hooks
setup_hooks_directory() {
    if [[ ! -d "$DOTFILES_HOOKS_DIR" ]]; then
        mkdir -p "$DOTFILES_HOOKS_DIR"
        echo "üìÅ R√©pertoire des hooks cr√©√©: $DOTFILES_HOOKS_DIR"
        
        # Cr√©er des exemples de hooks
        cat > "$DOTFILES_HOOKS_DIR/pre_commit.example" << 'EOF'
#!/bin/bash
# Hook ex√©cut√© avant chaque commit
# Renommez ce fichier en 'pre_commit' et rendez-le ex√©cutable

echo "üîç V√©rifications avant commit..."

# Exemple: v√©rifier la syntaxe des fichiers shell
find . -name "*.sh" -exec shellcheck {} \; 2>/dev/null

# Exemple: formater le code automatiquement
# prettier --write . 2>/dev/null || true

echo "‚úÖ V√©rifications termin√©es"
EOF

        cat > "$DOTFILES_HOOKS_DIR/post_commit.example" << 'EOF'
#!/bin/bash
# Hook ex√©cut√© apr√®s chaque commit
# Renommez ce fichier en 'post_commit' et rendez-le ex√©cutable

echo "üéâ Commit termin√©!"

# Exemple: notification desktop
# notify-send "Git" "Commit r√©alis√© avec succ√®s" 2>/dev/null || true

# Exemple: synchronisation automatique
# git push origin HEAD 2>/dev/null || true
EOF

        echo "üìù Exemples de hooks cr√©√©s dans $DOTFILES_HOOKS_DIR"
        echo "üí° Renommez les fichiers .example et rendez-les ex√©cutables pour les activer"
    fi
}

# Gestion des hooks
dotfiles_hooks() {
    local action="$1"
    
    case "$action" in
        "list")
            echo "üîó Hooks disponibles:"
            if [[ -d "$DOTFILES_HOOKS_DIR" ]]; then
                ls -la "$DOTFILES_HOOKS_DIR" | grep -v "^total" | while read -r line; do
                    local file=$(echo "$line" | awk '{print $9}')
                    [[ "$file" =~ ^\.*$ ]] && continue
                    
                    if [[ -x "$DOTFILES_HOOKS_DIR/$file" ]]; then
                        echo "   ‚úÖ $file (actif)"
                    else
                        echo "   ‚ö™ $file (inactif)"
                    fi
                done
            else
                echo "   Aucun hook configur√©"
            fi
            ;;
            
        "setup")
            setup_hooks_directory
            ;;
            
        "enable")
            local hook_name="$2"
            if [[ -f "$DOTFILES_HOOKS_DIR/$hook_name" ]]; then
                chmod +x "$DOTFILES_HOOKS_DIR/$hook_name"
                echo "‚úÖ Hook activ√©: $hook_name"
            else
                echo "‚ùå Hook non trouv√©: $hook_name"
            fi
            ;;
            
        "disable")
            local hook_name="$2"
            if [[ -f "$DOTFILES_HOOKS_DIR/$hook_name" ]]; then
                chmod -x "$DOTFILES_HOOKS_DIR/$hook_name"
                echo "‚ö™ Hook d√©sactiv√©: $hook_name"
            else
                echo "‚ùå Hook non trouv√©: $hook_name"
            fi
            ;;
            
        *)
            echo "Usage: dotfiles-hooks [list|setup|enable|disable]"
            echo ""
            echo "Commandes:"
            echo "  list              Lister les hooks"
            echo "  setup             Cr√©er le r√©pertoire et exemples"
            echo "  enable <hook>     Activer un hook"
            echo "  disable <hook>    D√©sactiver un hook"
            ;;
    esac
}

# Initialisation automatique
init_dotfiles_config() {
    load_dotfiles_config
    [[ "$(get_config HOOKS_ENABLED)" == "true" ]] && setup_hooks_directory
}

# Aliases pour la configuration
alias dotfiles-config='dotfiles_config'
alias dotfiles-hooks='dotfiles_hooks'

# Initialiser au chargement
init_dotfiles_config 