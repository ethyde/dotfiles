#!/usr/bin/env bash

# ==============================================================================
#                 Fonctions Shell pour les alias Git
#
# Pour utiliser ce fichier, ajoutez la ligne suivante à votre ~/.bashrc ou ~/.zshrc :
#
#   source ~/.git_functions
#
# ==============================================================================

# ==============================================================================
#                      Logs & Historique
# ==============================================================================

# Affiche les changements réalisés depuis le dernier pull
# Usage: git lc
git_log_since_last_pull() {
  # Utilise ORIG_HEAD, qui est une référence créée par git pull
  git log --pretty=oneline --abbrev-commit --graph ORIG_HEAD.. --stat --no-merges
}

# Affiche les commits qui n'ont pas encore été push vers le remote
# Usage: git ups
git_log_unpushed() {
  git log --branches --not --remotes --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)%Creset' --abbrev-commit
}

# Affiche une liste de tags formatée et triée par date
# Usage: git tags-l
git_list_tags_formatted() {
  # 1. 'git for-each-ref' récupère les tags avec un format personnalisé
  #    Le séparateur "_,,,_" est utilisé pour être parsé par awk de manière fiable.
  # 2. 'awk' formate ensuite la sortie en colonnes propres.
  git for-each-ref \
    --sort=taggerdate \
    --format '%(tag)_,,,_%(taggerdate:raw)_,,,_%(taggername)_,,,_%(subject)' refs/tags \
    | awk '
      BEGIN { 
        FS = "_,,,_"  
      }
      { 
        # Convertit le timestamp unix en date lisible
        t = strftime("%Y-%m-%d  %H:%M", $2); 
        # Imprime les colonnes formatées
        printf "%-20s %-18s %-25s %s\n", t, $1, $4, $3
      }'
}

# ==============================================================================
#                      Workflow & Sauvegardes
# ==============================================================================

# Ajoute tous les fichiers et crée un commit.
# FONCTION SUPPRIMÉE : git_add_all_and_commit
# Remplacée par git_add_all_and_commit_super_enhanced dans .shell_functions_enhanced
# Accessible via 'gac' ou 'git gac'

# Crée un commit "SAVEPOINT" sans vérification des hooks
# Usage: git save
git_savepoint() {
  git add --all && git commit --no-verify -m 'SAVEPOINT'
}

# Crée un commit WIP (Work In Progress) avec un message
# Usage: git wip "mon message"
git_work_in_progress() {
  git add --all && git commit --no-verify -m "$@"
}

# Crée un point de sauvegarde temporaire, puis le supprime immédiatement
# Utile pour réinitialiser l'état de la branche de manière "sûre" via le reflog
# Usage: git wipe "message optionnel"
git_wipe_savepoint() {
  local message=${1:-"WIPE-SAVEPOINT"}
  git add --all && git commit --no-verify -q -m "$message" && git reset HEAD~1 --hard
}

# ==============================================================================
#                      Gestion des Branches & Synchronisation
# ==============================================================================

# Définit la branche amont (upstream) pour la branche actuelle sur 'origin'
# Usage: git su
git_set_upstream() {
  local current_branch
  current_branch=$(git rev-parse --abbrev-ref HEAD)
  if [[ -n "$current_branch" ]]; then
    git branch --set-upstream-to="origin/$current_branch"
  else
    echo "Erreur : Impossible de déterminer la branche actuelle." >&2
    return 1
  fi
}

# Synchronise la branche actuelle avec le remote (pull --rebase) et met à jour les submodules
# Usage: git sync
git_branch_sync() {
    git pull --rebase=preserve --prune "$@" && git submodule update --init --recursive
}

# FONCTIONS SUPPRIMÉES : git_branch_start, git_branch_delete, git_branch_delete_force
# Remplacées par les versions super_enhanced dans .shell_functions_enhanced
# Accessibles via 'gbs', 'gbd' ou 'git gbs', 'git gbd'

# Lance un rebase interactif depuis le point de divergence avec la branche cible
# Usage: git b-squash [branche_cible]
git_branch_squash() {
    local target_branch=${1:-master}
    local fork_point
    fork_point=$(git merge-base --fork-point "$target_branch")

    if [[ -z "$fork_point" ]]; then
        echo "Erreur : Impossible de trouver un point de divergence avec la branche '$target_branch'." >&2
        echo "La branche est peut-être déjà à jour ou n'a pas d'historique commun." >&2
        return 1
    fi

    echo "Lancement du rebase interactif depuis le commit $fork_point..."
    git rebase -i "$fork_point"
}

# ==============================================================================
#                      Nettoyage & Finalisation
# ==============================================================================

# Nettoie les branches locales qui ont déjà été fusionnées dans la branche cible (master par défaut)
# Usage: git b-clean [branche_cible]
git_branch_clean() {
  local target_branch=${1:-master}
  git branch --merged "$target_branch" | grep -v -E "(^\*|${target_branch}$)" | xargs git branch --delete
}

# Routine complète de fin de tâche : se place sur master, met à jour, nettoie les branches et les dépendances
# Usage: git b-done [branche_cible]
git_branch_done() {
    local target_branch=${1:-master}
    git checkout "$target_branch" && git_branch_sync && git_branch_clean "$target_branch" && git_npm_clean
}

# Nettoie les dépendances NPM pour un environnement de production
# Usage: git n-clean
git_npm_clean() {
  if [[ -f "package.json" ]]; then
    npm install --no-package-lock --production && npm prune
  else
    echo "Pas de fichier package.json trouvé, nettoyage npm ignoré."
  fi
}

# ==============================================================================
#                      Pull Requests & Aide
# ==============================================================================

# Récupère une Pull Request depuis GitHub, Bitbucket ou GitLab
# Usage: git pr <gh|bb|gl> <numéro_pr> [préfixe_branche]
git_pull_request() {
  local provider=$1
  local pr_number=$2
  local branch_prefix=${3:-pr}
  local remote_name
  local ref_path=""

  remote_name=$(git remote | grep ^upstream || echo origin)

  if [[ -z "$pr_number" ]]; then
    echo "Erreur : Numéro de Pull Request manquant." >&2
    return 1
  fi

  case "$provider" in
    gh) ref_path="refs/pull/$pr_number/head" ;;
    bb) ref_path="refs/pull-requests/$pr_number/head" ;;
    gl) ref_path="refs/merge-requests/$pr_number/head" ;;
    *) echo "Fournisseur non supporté : $provider. Utilisez 'gh', 'bb', ou 'gl'." >&2; return 1 ;;
  esac

  git fetch -fu "$remote_name" "$ref_path:$branch_prefix/$pr_number" && git checkout "$branch_prefix/$pr_number"
}

# Affiche une aide-mémoire formatée et lisible de tous les alias Git
# Usage: git aliases
git_display_help() {
  local C_CAT=$(printf '\033[1;34m')     # Bleu pour les catégories
  local C_ALIAS=$(printf '\033[1;33m')   # Jaune pour les alias
  local C_DESC=$(printf '\033[0;32m')    # Vert pour les descriptions
  local C_EXAMPLE=$(printf '\033[0;36m') # Cyan pour les exemples
  local C_RST=$(printf '\033[0m')        # Reset

  printf "\n%s🔧 Git Aliases - Guide Interactif%s\n" "$C_CAT" "$C_RST"
  printf "%s══════════════════════════════════════════════════════════════%s\n\n" "$C_CAT" "$C_RST"

  # === AIDE & INTROSPECTION ===
  printf "%s📋 Aide & Introspection%s\n" "$C_CAT" "$C_RST"
  printf "%s────────────────────────────────────────────────────────────────%s\n" "$C_CAT" "$C_RST"
  printf "  %saliases     %s %sAffiche cette aide-mémoire formatée%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "              %sExemple: %sgit aliases%s\n\n" "$C_EXAMPLE" "$C_EXAMPLE" "$C_RST"

  # === LOGS & HISTORIQUE ===
  printf "%s📊 Logs & Historique%s\n" "$C_CAT" "$C_RST"
  printf "%s────────────────────────────────────────────────────────────────%s\n" "$C_CAT" "$C_RST"
  printf "  %slg          %s %sLog graphique et concis avec couleurs%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "  %sll          %s %sLog graphique avec liste des fichiers modifiés%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "  %soneline     %s %sLog sur une seule ligne%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "  %slc          %s %sAffiche les changements depuis le dernier pull%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "  %sups         %s %sAffiche les commits non pushés%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "  %stags-l      %s %sListe les tags formatés et triés%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "              %sExemples: %sgit lg | git ll | git lc%s\n\n" "$C_EXAMPLE" "$C_EXAMPLE" "$C_RST"

  # === WORKFLOW & SAUVEGARDES ===
  printf "%s💾 Workflow & Sauvegardes Rapides%s\n" "$C_CAT" "$C_RST"
  printf "%s────────────────────────────────────────────────────────────────%s\n" "$C_CAT" "$C_RST"
  printf "  %sgac         %s %sCommit intelligent avec messages automatiques%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "  %ssave        %s %sCommit rapide 'SAVEPOINT' sans hooks%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "  %swip         %s %sCommit rapide 'Work In Progress'%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "  %sundo        %s %sAnnule le dernier commit (garde les changements)%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "  %swipe        %s %sEfface les changements (garde dans reflog)%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "              %sExemples: %sgit save | git wip \"en cours\" | git undo%s\n\n" "$C_EXAMPLE" "$C_EXAMPLE" "$C_RST"

  # === GESTION DES BRANCHES ===
  printf "%s🌿 Gestion des Branches%s\n" "$C_CAT" "$C_RST"
  printf "%s────────────────────────────────────────────────────────────────%s\n" "$C_CAT" "$C_RST"
  printf "  %ssu          %s %sDéfinit la branche upstream pour la branche actuelle%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "  %sb-name      %s %sAffiche le nom de la branche actuelle%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "  %sgbs         %s %sCréation de branche avec validation format%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "  %sgbd         %s %sSuppression branche locale + distante%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "  %sgri         %s %sRebase interactif intelligent%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "  %sb-squash    %s %sRebase interactif depuis le point de divergence%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "              %sExemples: %sgbs feat/PROJ-123/feature | gbd old-branch%s\n\n" "$C_EXAMPLE" "$C_EXAMPLE" "$C_RST"

  # === SYNCHRONISATION ===
  printf "%s🔄 Synchronisation & Nettoyage%s\n" "$C_CAT" "$C_RST"
  printf "%s────────────────────────────────────────────────────────────────%s\n" "$C_CAT" "$C_RST"
  printf "  %ssync        %s %sMet à jour la branche locale (pull --rebase)%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "  %sb-clean     %s %sSupprime les branches locales déjà mergées%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "  %sb-done      %s %sWorkflow complet de fin de tâche%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "  %sn-clean     %s %sNettoyage des dépendances NPM%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "              %sExemples: %sgit sync | git b-clean | git b-done%s\n\n" "$C_EXAMPLE" "$C_EXAMPLE" "$C_RST"

  # === PULL REQUESTS ===
  printf "%s🔀 Gestion des Pull Requests%s\n" "$C_CAT" "$C_RST"
  printf "%s────────────────────────────────────────────────────────────────%s\n" "$C_CAT" "$C_RST"
  printf "  %spr          %s %sRécupère une PR depuis GitHub/Bitbucket/GitLab%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
  printf "              %sExemple: %sgit pr gh 123 | git pr bb 456 local-branch%s\n\n" "$C_EXAMPLE" "$C_EXAMPLE" "$C_RST"

  # === RACCOURCIS SIMPLES ===
  printf "%s⚡ Raccourcis Simples (1-2 lettres)%s\n" "$C_CAT" "$C_RST"
  printf "%s────────────────────────────────────────────────────────────────%s\n" "$C_CAT" "$C_RST"
  printf "  %sAdd:%s      %sa%s (add) %saa%s (add --all) %sai%s (add --interactive)\n" "$C_DESC" "$C_RST" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST"
  printf "  %sBranch:%s   %sb%s (branch) %sba%s (branch --all) %sbd%s (branch --delete)\n" "$C_DESC" "$C_RST" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST"
  printf "  %sCommit:%s   %sc%s (commit) %sca%s (commit --amend) %scaa%s (commit --all --amend)\n" "$C_DESC" "$C_RST" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST"
  printf "  %sCheckout:%s %sco%s (checkout) %scob%s (checkout -b)\n" "$C_DESC" "$C_RST" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST"
  printf "  %sFetch:%s    %sf%s (fetch) %sfo%s (fetch origin) %sfu%s (fetch upstream)\n" "$C_DESC" "$C_RST" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST"
  printf "  %sMerge:%s    %sm%s (merge) %sma%s (merge --abort) %smc%s (merge --continue)\n" "$C_DESC" "$C_RST" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST"
  printf "  %sPull:%s     %spl%s (pull) %splo%s (pull origin) %splr%s (pull --rebase)\n" "$C_DESC" "$C_RST" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST"
  printf "  %sPush:%s     %sps%s (push) %spso%s (push origin)\n" "$C_DESC" "$C_RST" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST"
  printf "  %sRebase:%s   %srb%s (rebase) %srbi%s (rebase -i) %srbc%s (rebase --continue)\n" "$C_DESC" "$C_RST" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST"
  printf "  %sStatus:%s   %ss%s (status)\n\n" "$C_DESC" "$C_RST" "$C_ALIAS" "$C_RST"

  # === COMMANDES SHELL AVANCÉES ===
  printf "%s🚀 Commandes Shell Avancées (avec couleurs et émojis)%s\n" "$C_CAT" "$C_RST"
  printf "%s────────────────────────────────────────────────────────────────%s\n" "$C_CAT" "$C_RST"
  
  # Vérifier si les fonctions enhanced sont disponibles
  local enhanced_available=false
  if [[ -f "$HOME/.shell_functions_enhanced" ]] || [[ -f "$HOME/.shell_functions_lazy" ]]; then
    enhanced_available=true
  fi
  
  if [[ "$enhanced_available" == "true" ]]; then
    printf "  %sgac         %s %sCommit avec messages automatiques et émojis%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
    printf "  %sgbs         %s %sCréation de branche avec validation format%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
    printf "  %sgbd         %s %sSuppression branche locale + distante%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
    printf "  %sgri         %s %sRebase interactif intelligent%s\n" "$C_ALIAS" "$C_RST" "$C_DESC" "$C_RST"
    printf "              %sExemples: %sgac \"fix login\" | gbs feat/PROJ-123/auth | gbd old-branch%s\n\n" "$C_EXAMPLE" "$C_EXAMPLE" "$C_RST"
  else
    printf "  %s⚠️  Commandes avancées non disponibles%s\n" "$C_DESC" "$C_RST"
    printf "  %sInstallez les dotfiles avec: %s./install%s\n\n" "$C_DESC" "$C_EXAMPLE" "$C_RST"
  fi

  # === USAGE & CONSEILS ===
  printf "%s💡 Usage & Conseils%s\n" "$C_CAT" "$C_RST"
  printf "%s────────────────────────────────────────────────────────────────%s\n" "$C_CAT" "$C_RST"
  printf "  • Utilisez %sgit <alias>%s ou directement %s<alias>%s (pour les commandes shell)\n" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST"
  printf "  • Les commandes %sgac%s, %sgbs%s, %sgbd%s, %sgri%s sont plus avancées que leurs équivalents Git\n" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST"
  printf "  • Format de branche recommandé: %stype/JIRA-123/description%s\n" "$C_EXAMPLE" "$C_RST"
  printf "  • Workflow suggéré: %sgbs%s → %sgac%s → %sgri%s → %sgbd%s\n\n" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST" "$C_ALIAS" "$C_RST"
}

# ==============================================================================
#                      Gestion /etc/hosts
# ==============================================================================

removehost() {
    if [[ "$1" ]]; then
        local HOSTNAME=$1
        if [ -n "$(grep "$HOSTNAME" /etc/hosts)" ]; then
            echo "$HOSTNAME Trouvé dans /etc/hosts, suppression..."
            sudo sed -i".bak" "/$HOSTNAME/d" /etc/hosts
        else
            echo "$HOSTNAME non trouvé dans /etc/hosts"
        fi
    else
        echo "Erreur: paramètre manquant. Usage: removehost <domaine>"
    fi
}

addhost() {
    if [[ "$1" && "$2" ]]; then
        local IP=$1
        local HOSTNAME=$2
        if [ -n "$(grep "$HOSTNAME" /etc/hosts)" ]; then
            echo "$HOSTNAME existe déjà:"
            grep "$HOSTNAME" /etc/hosts
        else
            echo "Ajout de $HOSTNAME dans /etc/hosts"
            printf "%s\t%s\n" "$IP" "$HOSTNAME" | sudo tee -a /etc/hosts > /dev/null
        fi
    else
        echo "Erreur: paramètres manquants. Usage: addhost <ip> <domaine>"
    fi
}

# ==============================================================================
#                      Gestion de l'agent SSH
# ==============================================================================

# Vérifie si l'agent est en cours d'exécution
agent_is_running() {
  if [ "$SSH_AUTH_SOCK" ]; then
    # ssh-add retourne 0 ou 1 si l'agent tourne (avec ou sans clés), 2 sinon
    ssh-add -l >/dev/null 2>&1 || [ $? -eq 1 ]
  else
    false
  fi
}

# Vérifie si l'agent a des clés chargées
agent_has_keys() {
  ssh-add -l >/dev/null 2>&1
}

# Charge l'environnement de l'agent depuis le fichier
agent_load_env() {
  local env_file=~/.ssh/agent.env
  [ -f "$env_file" ] && . "$env_file" >/dev/null
}

# Démarre un nouvel agent et sauvegarde son environnement
agent_start() {
  local env_file=~/.ssh/agent.env
  (umask 077; ssh-agent >"$env_file")
  . "$env_file" >/dev/null
}

# Ajoute toutes les clés SSH du type id_rsa_*
add_all_keys() {
  ls ~/.ssh | grep id_rsa_ | sed "s:^:`echo ~`/.ssh/:" | xargs -n 1 ssh-add
}

# ==============================================================================
#                      NVM & Navigation
# ==============================================================================

# FONCTION SUPPRIMÉE : cd()
# Remplacée par cd_enhanced() dans .shell_functions_enhanced
# Accessible directement via 'cd' (alias défini dans enhanced)

# ==============================================================================
#                      Rechargement du Shell
# ==============================================================================

# FONCTION SUPPRIMÉE : reload()
# Remplacée par reload_enhanced() dans .shell_functions_enhanced
# Accessible directement via 'reload' (alias défini dans enhanced)