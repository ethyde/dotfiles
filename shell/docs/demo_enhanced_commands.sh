#!/usr/bin/env bash

# Script de d√©monstration des commandes am√©lior√©es
# SSH, NVM/Node et Git avec de beaux affichages

# Charger les fonctions d'affichage et les fonctions am√©lior√©es
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/.shell_display"
source "$SCRIPT_DIR/.shell_functions_enhanced"

print_header "üéØ D√©monstration des commandes am√©lior√©es"

echo ""
print_info "Ce script va d√©montrer les nouvelles commandes avec affichage am√©lior√© :"
print_step "‚Ä¢ Commandes SSH (agent, cl√©s, statut)"
print_step "‚Ä¢ Commandes NVM/Node.js (versions, installation)"
print_step "‚Ä¢ Commandes Git (commit, branches, rebase)"
print_step "‚Ä¢ Commande reload du shell"

echo ""
read -p "Appuyez sur Entr√©e pour commencer la d√©monstration..."

# ==============================================================================
#                      D√©monstration SSH
# ==============================================================================

print_header "üîê D√âMONSTRATION SSH"

echo ""
print_info "1. Statut de l'agent SSH"
ssh_agent_status

echo ""
print_info "2. Rechargement de l'environnement SSH"
ssh_env_reload_enhanced

echo ""
read -p "Appuyez sur Entr√©e pour continuer vers NVM/Node.js..."

# ==============================================================================
#                      D√©monstration NVM/Node.js
# ==============================================================================

print_header "üü¢ D√âMONSTRATION NVM/NODE.JS"

echo ""
print_info "1. Version Node.js actuelle"
node_version_enhanced

echo ""
print_info "2. Liste des versions NVM"
if command -v nvm &> /dev/null; then
    nvm_list_enhanced
else
    print_warning "NVM n'est pas disponible pour cette d√©monstration"
fi

echo ""
print_info "3. Simulation d'un changement de r√©pertoire avec .nvmrc"
print_step "Cr√©ation d'un r√©pertoire de test temporaire..."

# Cr√©er un r√©pertoire temporaire avec un .nvmrc
temp_dir="/tmp/demo_nvmrc_$$"
mkdir -p "$temp_dir"
echo "lts/jod" > "$temp_dir/.nvmrc"

print_step "Changement vers le r√©pertoire avec .nvmrc..."
cd_enhanced "$temp_dir"

print_step "Retour au r√©pertoire original..."
cd_enhanced "$SCRIPT_DIR"

print_step "Nettoyage du r√©pertoire temporaire..."
rm -rf "$temp_dir"

echo ""
read -p "Appuyez sur Entr√©e pour continuer vers Git..."

# ==============================================================================
#                      D√©monstration Git
# ==============================================================================

print_header "üìù D√âMONSTRATION GIT"

# V√©rifier qu'on est dans un repo git
if ! git rev-parse --git-dir >/dev/null 2>&1; then
    print_warning "Pas dans un d√©p√¥t Git, d√©monstration Git limit√©e"
else
    echo ""
    print_info "1. Informations sur le d√©p√¥t actuel"
    local current_branch=$(git branch --show-current 2>/dev/null)
    local repo_root=$(git rev-parse --show-toplevel 2>/dev/null)
    
    print_step "D√©p√¥t: $repo_root"
    print_step "Branche actuelle: $current_branch"
    
    echo ""
    print_info "2. Statut Git avec style"
    print_step "Statut des fichiers:"
    
    # Afficher le statut git avec des couleurs
    if git diff --quiet && git diff --cached --quiet; then
        print_success "‚úÖ Aucun changement en attente"
    else
        print_warning "‚ö†Ô∏è  Changements d√©tect√©s"
        git status --porcelain | while read -r line; do
            local status="${line:0:2}"
            local file="${line:3}"
            case "$status" in
                "M ") print_info "  üìù Modifi√©: $file" ;;
                "A ") print_success "  ‚ûï Ajout√©: $file" ;;
                "D ") print_error "  ‚ûñ Supprim√©: $file" ;;
                "??") print_warning "  ‚ùì Non suivi: $file" ;;
                *) print_step "  $status $file" ;;
            esac
        done
    fi
    
    echo ""
    print_info "3. Exemple de format de branche recommand√©"
    print_step "Format: type/JIRA-123/description"
    print_step "Exemples:"
    print_info "  ‚Ä¢ feat/PROJ-456/add-user-authentication"
    print_info "  ‚Ä¢ fix/BUG-789/resolve-login-issue"
    print_info "  ‚Ä¢ docs/DOC-123/update-readme"
    
    echo ""
    print_info "4. Simulation d'un commit automatique"
    print_step "Si vous √©tiez sur une branche comme 'feat/PROJ-123/awesome-feature',"
    print_step "le commit serait automatiquement format√© comme:"
    print_success "  ‚ú® feat(PROJ-123): awesome feature"
fi

echo ""
read -p "Appuyez sur Entr√©e pour la d√©monstration finale..."

# ==============================================================================
#                      D√©monstration des aliases
# ==============================================================================

print_header "üéØ ALIASES DISPONIBLES"

echo ""
print_info "Nouvelles commandes SSH disponibles:"
print_step "‚Ä¢ ssh-status    - Statut de l'agent SSH"
print_step "‚Ä¢ ssh-start     - D√©marrer l'agent SSH"
print_step "‚Ä¢ ssh-load      - Charger toutes les cl√©s SSH"
print_step "‚Ä¢ ssh-reload    - Recharger l'environnement SSH"

echo ""
print_info "Nouvelles commandes NVM/Node disponibles:"
print_step "‚Ä¢ node-version  - Afficher la version Node.js"
print_step "‚Ä¢ nvm-list      - Lister les versions NVM"
print_step "‚Ä¢ nvm-install   - Installer une version Node"
print_step "‚Ä¢ nvm-use       - Utiliser une version Node"

echo ""
print_info "Nouvelles commandes Git disponibles:"
print_step "‚Ä¢ gac           - Commit am√©lior√© (git add + commit)"
print_step "‚Ä¢ gbs           - Cr√©er une branche (git branch start)"
print_step "‚Ä¢ gbd           - Supprimer une branche (git branch delete)"
print_step "‚Ä¢ gri           - Rebase interactif am√©lior√©"

echo ""
print_info "Autres commandes am√©lior√©es:"
print_step "‚Ä¢ reload        - Rechargement du shell am√©lior√©"
print_step "‚Ä¢ cd            - Navigation avec gestion NVM automatique"

echo ""
print_success "üéâ D√©monstration termin√©e !"
print_info "Pour utiliser ces commandes, ajoutez ceci √† votre .zshrc :"
echo ""
print_step "# Chargement des fonctions d'affichage am√©lior√©es"
print_step "source ~/.shell_display"
print_step "source ~/.shell_functions_enhanced"

echo ""
print_warning "üí° Conseil: Testez les commandes une par une pour vous familiariser !" 