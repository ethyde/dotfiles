# ==============================================================================
#                      Syst√®me de Lazy Loading pour Fonctions Enhanced
# ==============================================================================

# Variables globales pour le lazy loading
_ENHANCED_FUNCTIONS_LOADED=false
_GIT_BRANCH_CACHE=""
_GIT_BRANCH_CACHE_TIME=0
_GIT_STATUS_CACHE=""
_GIT_STATUS_CACHE_TIME=0
_AKLO_AVAILABLE=""
_AKLO_PROJECT_INITIALIZED=""

# D√©tection de la disponibilit√© d'Aklo
check_aklo_availability() {
    if [[ -z "$_AKLO_AVAILABLE" ]]; then
        if command -v aklo >/dev/null 2>&1; then
            _AKLO_AVAILABLE="true"
            # V√©rifier si le projet est initialis√© avec Aklo
            if [[ -f "docs/project.conf" ]] && [[ -d "docs/backlog" ]]; then
                _AKLO_PROJECT_INITIALIZED="true"
            else
                _AKLO_PROJECT_INITIALIZED="false"
            fi
        else
            _AKLO_AVAILABLE="false"
            _AKLO_PROJECT_INITIALIZED="false"
        fi
    fi
}

# Charge les fonctions enhanced seulement si n√©cessaire
load_enhanced_functions() {
    if [[ "$_ENHANCED_FUNCTIONS_LOADED" != "true" ]]; then
        local enhanced_file="$HOME/.shell_functions_enhanced"
        if [[ -f "$enhanced_file" ]]; then
            source "$enhanced_file"
            _ENHANCED_FUNCTIONS_LOADED=true
            echo "üöÄ Fonctions enhanced charg√©es"
        else
            echo "‚ùå Fichier enhanced non trouv√©: $enhanced_file"
            return 1
        fi
    fi
}

# Cache intelligent pour le nom de branche Git
get_current_branch_cached() {
    local now=$(date +%s)
    local cache_duration=5  # 5 secondes
    
    if [[ $((now - _GIT_BRANCH_CACHE_TIME)) -gt $cache_duration ]] || [[ -z "$_GIT_BRANCH_CACHE" ]]; then
        if git rev-parse --git-dir >/dev/null 2>&1; then
            _GIT_BRANCH_CACHE=$(git branch --show-current 2>/dev/null || echo "")
            _GIT_BRANCH_CACHE_TIME=$now
        else
            _GIT_BRANCH_CACHE=""
        fi
    fi
    
    echo "$_GIT_BRANCH_CACHE"
}

# Cache intelligent pour le statut Git
get_git_status_cached() {
    local now=$(date +%s)
    local cache_duration=3  # 3 secondes pour le statut
    
    if [[ $((now - _GIT_STATUS_CACHE_TIME)) -gt $cache_duration ]] || [[ -z "$_GIT_STATUS_CACHE" ]]; then
        if git rev-parse --git-dir >/dev/null 2>&1; then
            local changes=$(git status --porcelain 2>/dev/null | wc -l | tr -d ' ')
            _GIT_STATUS_CACHE="$changes"
            _GIT_STATUS_CACHE_TIME=$now
        else
            _GIT_STATUS_CACHE="0"
        fi
    fi
    
    echo "$_GIT_STATUS_CACHE"
}

# D√©tecte si on est dans un contexte de t√¢che Aklo
detect_aklo_task_context() {
    check_aklo_availability
    
    if [[ "$_AKLO_PROJECT_INITIALIZED" == "true" ]]; then
        local current_branch=$(get_current_branch_cached)
        # V√©rifie si la branche suit le pattern task-XX-X
        if [[ "$current_branch" =~ task-[0-9]+-[0-9]+ ]]; then
            # Extrait l'ID de la t√¢che
            local task_id=$(echo "$current_branch" | sed -n 's/.*task-\([0-9]\+-[0-9]\+\).*/\1/p')
            echo "$task_id"
            return 0
        fi
    fi
    
    return 1
}

# Wrapper intelligent pour gac avec int√©gration Aklo
gac_lazy() {
    check_aklo_availability
    
    # Si Aklo est disponible et on est dans un contexte de t√¢che
    local task_id=$(detect_aklo_task_context)
    if [[ $? -eq 0 ]] && [[ -n "$task_id" ]]; then
        echo "üéØ Contexte Aklo d√©tect√© (t√¢che $task_id)"
        echo "üí° Utilisation recommand√©e: aklo submit-task"
        echo "   Ou continuez avec gac standard..."
        
        # Demande confirmation pour utiliser Aklo
        echo -n "Utiliser aklo submit-task ? (y/N): "
        read -r response
        if [[ "$response" =~ ^[Yy]$ ]]; then
            echo "üöÄ Ex√©cution: aklo submit-task"
            aklo submit-task
            return $?
        fi
    fi
    
    # Fallback sur la fonction enhanced standard
    load_enhanced_functions || return 1
    git_add_all_and_commit_super_enhanced "$@"
}

# Wrapper intelligent pour gbs avec int√©gration Aklo
gbs_lazy() {
    check_aklo_availability
    
    # Si Aklo est disponible et projet initialis√©
    if [[ "$_AKLO_PROJECT_INITIALIZED" == "true" ]] && [[ $# -eq 1 ]]; then
        local branch_name="$1"
        
        # V√©rifie si c'est un pattern de t√¢che Aklo
        if [[ "$branch_name" =~ ^[0-9]+-[0-9]+$ ]]; then
            echo "üéØ Pattern de t√¢che Aklo d√©tect√©: $branch_name"
            echo "üí° Utilisation recommand√©e: aklo start-task $branch_name"
            echo "   Ou continuez avec gbs standard..."
            
            # Demande confirmation pour utiliser Aklo
            echo -n "Utiliser aklo start-task ? (y/N): "
            read -r response
            if [[ "$response" =~ ^[Yy]$ ]]; then
                echo "üöÄ Ex√©cution: aklo start-task $branch_name"
                aklo start-task "$branch_name"
                return $?
            fi
        fi
    fi
    
    # Fallback sur la fonction enhanced standard
    load_enhanced_functions || return 1
    git_branch_start_super_enhanced "$@"
}

# Wrapper pour gbd avec lazy loading (pas d'int√©gration Aklo sp√©cifique)
gbd_lazy() {
    load_enhanced_functions || return 1
    git_branch_delete_super_enhanced "$@"
}

# Wrapper pour gri avec lazy loading (pas d'int√©gration Aklo sp√©cifique)
gri_lazy() {
    load_enhanced_functions || return 1
    git_rebase_interactive_super_enhanced "$@"
}

# Nouvelle fonction : Assistant Aklo pour workflow complet
aklo_workflow_assistant() {
    check_aklo_availability
    
    if [[ "$_AKLO_AVAILABLE" != "true" ]]; then
        echo "‚ùå Aklo n'est pas disponible sur ce syst√®me"
        return 1
    fi
    
    if [[ "$_AKLO_PROJECT_INITIALIZED" != "true" ]]; then
        echo "‚ùå Projet non initialis√© avec Aklo"
        echo "üí° Initialisez avec: aklo init"
        return 1
    fi
    
    echo "üéØ Assistant Workflow Aklo"
    echo "========================="
    echo ""
    echo "Commandes disponibles:"
    echo "  aklo propose-pbi    - Cr√©er un nouveau PBI"
    echo "  aklo plan <PBI_ID>  - Planifier les t√¢ches d'un PBI"
    echo "  aklo start-task <ID> - Commencer une t√¢che"
    echo "  aklo submit-task    - Soumettre pour revue"
    echo "  aklo status         - √âtat du projet"
    echo ""
    
    # Affiche le statut actuel
    echo "üìä Statut actuel:"
    aklo status 2>/dev/null || echo "   (Impossible de r√©cup√©rer le statut)"
}

# Prompt Git optimis√© avec cache et indicateur Aklo
git_prompt_fast() {
    local branch=$(get_current_branch_cached)
    local changes=$(get_git_status_cached)
    
    if [[ -n "$branch" ]]; then
        local color=""
        local aklo_indicator=""
        
        # D√©tection contexte Aklo
        check_aklo_availability
        if [[ "$_AKLO_PROJECT_INITIALIZED" == "true" ]] && [[ "$branch" =~ task-[0-9]+-[0-9]+ ]]; then
            aklo_indicator="‚ö°"
        fi
        
        if [[ "$changes" -gt 0 ]]; then
            color="\033[1;31m"  # Rouge si changements
        else
            color="\033[1;32m"  # Vert si propre
        fi
        
        echo -e "${color}git:${branch}${changes:+ ($changes)}${aklo_indicator}$\033[0m"
    fi
}

# Invalidation du cache Git (√† appeler apr√®s op√©rations Git)
invalidate_git_cache() {
    _GIT_BRANCH_CACHE=""
    _GIT_BRANCH_CACHE_TIME=0
    _GIT_STATUS_CACHE=""
    _GIT_STATUS_CACHE_TIME=0
}

# Invalidation du cache Aklo
invalidate_aklo_cache() {
    _AKLO_AVAILABLE=""
    _AKLO_PROJECT_INITIALIZED=""
}

# Fonction utilitaire pour MCP : D√©tection et suggestion Aklo
mcp_aklo_suggest() {
    local operation="$1"
    local context="$2"
    
    check_aklo_availability
    
    case "$operation" in
        "start-task")
            if [[ "$_AKLO_PROJECT_INITIALIZED" == "true" ]] && [[ "$context" =~ ^[0-9]+-[0-9]+$ ]]; then
                echo "üí° MCP Suggestion: Utilisez 'mcp_aklo-terminal_aklo_execute' avec command='start-task' et args=['$context']"
                echo "   Cela activera le protocole D√âVELOPPEMENT automatiquement"
                return 0
            fi
            ;;
        "submit-task")
            local task_id=$(detect_aklo_task_context)
            if [[ $? -eq 0 ]] && [[ -n "$task_id" ]]; then
                echo "üí° MCP Suggestion: Utilisez 'mcp_aklo-terminal_aklo_execute' avec command='submit-task'"
                echo "   Cela activera le protocole REVUE DE CODE automatiquement"
                return 0
            fi
            ;;
        "check-context")
            if [[ "$_AKLO_AVAILABLE" == "true" ]]; then
                echo "‚úÖ Aklo disponible"
                if [[ "$_AKLO_PROJECT_INITIALIZED" == "true" ]]; then
                    echo "‚úÖ Projet Aklo initialis√©"
                    local task_id=$(detect_aklo_task_context)
                    if [[ $? -eq 0 ]] && [[ -n "$task_id" ]]; then
                        echo "‚úÖ Contexte t√¢che d√©tect√©: $task_id"
                    else
                        echo "‚ÑπÔ∏è  Pas de contexte t√¢che actuel"
                    fi
                else
                    echo "‚ùå Projet non initialis√© avec Aklo"
                fi
            else
                echo "‚ùå Aklo non disponible"
            fi
            ;;
    esac
    
    return 1
}

# Fonction de transition intelligente : Git ‚Üí Aklo
git_to_aklo_bridge() {
    local git_command="$1"
    shift
    local args="$@"
    
    check_aklo_availability
    
    # Si Aklo n'est pas disponible, ex√©cuter la commande Git normale
    if [[ "$_AKLO_AVAILABLE" != "true" ]] || [[ "$_AKLO_PROJECT_INITIALIZED" != "true" ]]; then
        echo "üîÑ Fallback: Ex√©cution Git standard"
        case "$git_command" in
            "checkout-task")
                git checkout -b "feature/task-$args"
                ;;
            "commit-task")
                git add . && git commit -m "feat: $args"
                ;;
            *)
                echo "‚ùå Commande Git non reconnue: $git_command"
                return 1
                ;;
        esac
        return $?
    fi
    
    # Si Aklo est disponible, proposer l'alternative Aklo
    case "$git_command" in
        "checkout-task")
            if [[ "$args" =~ ^[0-9]+-[0-9]+$ ]]; then
                echo "üéØ Alternative Aklo disponible:"
                echo "   aklo start-task $args"
                echo "   (Cr√©e la branche + met √† jour le statut de la t√¢che)"
                echo ""
                echo -n "Utiliser Aklo ? (y/N): "
                read -r response
                if [[ "$response" =~ ^[Yy]$ ]]; then
                    aklo start-task "$args"
                    return $?
                fi
            fi
            git checkout -b "feature/task-$args"
            ;;
        "commit-task")
            local task_id=$(detect_aklo_task_context)
            if [[ $? -eq 0 ]] && [[ -n "$task_id" ]]; then
                echo "üéØ Alternative Aklo disponible:"
                echo "   aklo submit-task"
                echo "   (Commit + push + met √† jour le statut)"
                echo ""
                echo -n "Utiliser Aklo ? (y/N): "
                read -r response
                if [[ "$response" =~ ^[Yy]$ ]]; then
                    aklo submit-task
                    return $?
                fi
            fi
            git add . && git commit -m "feat: $args"
            ;;
    esac
}

# Note: Les fonctions sont disponibles apr√®s sourcing du fichier
# (export -f n'est pas support√© dans zsh)

# Aliases lazy loading
alias gac='gac_lazy'
alias gbs='gbs_lazy'
alias gbd='gbd_lazy'
alias gri='gri_lazy'
alias aklo-help='aklo_workflow_assistant'
alias aklo-suggest='mcp_aklo_suggest check-context' 