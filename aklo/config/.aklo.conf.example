# Configuration Aklo - Commits Atomiques par Protocole
# 
# Ce fichier d√©finit le comportement des commandes aklo pour votre projet.
# Copiez ce fichier vers .aklo.conf √† la racine de votre projet et adaptez-le.
#
# üìñ PRINCIPE FONDAMENTAL (META-IMPROVEMENT workflow-consistency-20250102) :
# Un protocole = Un commit atomique incluant artefact principal + connexes + journal
#
# üéØ UTILISATION :
# cp aklo/config/.aklo.conf.example .aklo.conf
# aklo plan 42              # Utilise la configuration du projet
# aklo plan 42 --no-agent   # Override vers mode skeleton

#==============================================================================
# SECTION 1 : AUTOMATISATION INTELLIGENTE
#==============================================================================

# ü§ñ Niveau d'assistance de l'IA pour la g√©n√©ration de contenu
# 
# full     : G√©n√©ration compl√®te du contenu par l'IA (recommand√© pour d√©buter)
#            ‚Üí Contenu d√©taill√©, sections remplies, crit√®res d'acceptation g√©n√©r√©s
#            ‚Üí Journal d√©taill√© avec contexte et d√©cisions
#            ‚Üí Id√©al pour : nouveaux projets, prototypage rapide
#
# skeleton : Structure et sections vides √† compl√©ter manuellement  
#            ‚Üí Fichiers cr√©√©s avec en-t√™tes et structure correcte
#            ‚Üí Contenu √† remplir par l'humain
#            ‚Üí Id√©al pour : projets matures, contr√¥le pr√©cis du contenu
#
# minimal  : Fichiers avec IDs/nommage uniquement (niveau expert)
#            ‚Üí Cr√©ation des fichiers avec m√©tadonn√©es de base uniquement
#            ‚Üí Tout le contenu √† cr√©er manuellement
#            ‚Üí Id√©al pour : utilisateurs exp√©riment√©s, workflows sp√©cifiques
agent_assistance=full

# üìù Mise √† jour automatique du journal lors des op√©rations
# 
# true  : Journal mis √† jour automatiquement dans chaque commit atomique (recommand√©)
#         ‚Üí Tra√ßabilit√© compl√®te des actions et d√©cisions
#         ‚Üí Historique d√©taill√© pour reprise de contexte
#         ‚Üí Respect du principe des commits atomiques
#
# false : Pas de mise √† jour automatique du journal
#         ‚Üí Mise √† jour manuelle requise
#         ‚Üí Risque d'oubli et de perte de tra√ßabilit√©
auto_journal=true

#==============================================================================
# SECTION 2 : CONFIGURATION GIT ET VERSIONING
#==============================================================================

# üåø Branches principales du projet
# Adaptez selon votre workflow Git (main/master, develop, etc.)
MAIN_BRANCH=main
PRODUCTION_BRANCH=main

# üöÄ Configuration des releases
# USE_RELEASE_BRANCHES=true  ‚Üí Utilise des branches release/x.y.z temporaires
# USE_RELEASE_BRANCHES=false ‚Üí Release directement depuis la branche principale
USE_RELEASE_BRANCHES=false

# Format des branches de release (si USE_RELEASE_BRANCHES=true)
# %s sera remplac√© par le num√©ro de version (ex: release/1.2.0)
RELEASE_BRANCH_FORMAT=release/%s

# üè∑Ô∏è Format des tags Git pour les releases
# %s sera remplac√© par le num√©ro de version (ex: v1.2.0)
GIT_TAG_FORMAT=v%s

#==============================================================================
# SECTION 3 : STRUCTURE DES ARTEFACTS
#==============================================================================

# üìÅ R√©pertoire racine du projet 
# Laissez vide pour d√©tection automatique depuis le r√©pertoire courant
PROJECT_WORKDIR=

# üìã Chemins relatifs des r√©pertoires d'artefacts
# Adaptez selon l'organisation de votre projet
# Structure recommand√©e par la Charte Aklo :
PBI_DIR=docs/backlog/00-pbi                    # Product Backlog Items
TASKS_DIR=docs/backlog/01-tasks                # T√¢ches techniques
ARCH_DIR=docs/backlog/02-architecture          # Documents d'architecture
RELEASES_DIR=docs/backlog/07-releases          # Rapports de release
JOURNAL_DIR=docs/backlog/15-journal            # Journal quotidien (commits atomiques)
SCRATCHPAD_DIR=docs/backlog/16-scratchpads     # Brouillons (hors Git, voir .gitignore)

#==============================================================================
# SECTION 4 : VALIDATION ET QUALIT√â
#==============================================================================

# ‚úÖ Validations automatiques avant commits atomiques
# Recommand√© : activez toutes les validations pour garantir la qualit√©
VALIDATE_LINTER=true    # V√©rification du style de code
VALIDATE_TESTS=true     # Ex√©cution de la suite de tests
VALIDATE_BUILD=true     # Validation du build de production

# üõ†Ô∏è Commandes sp√©cifiques selon votre stack technique
# Adaptez ces commandes √† votre environnement :
# 
# JavaScript/Node.js :
LINTER_COMMAND=npm run lint
TEST_COMMAND=npm test
BUILD_COMMAND=npm run build
#
# Python :
# LINTER_COMMAND=flake8 .
# TEST_COMMAND=pytest
# BUILD_COMMAND=python setup.py build
#
# Go :
# LINTER_COMMAND=golangci-lint run
# TEST_COMMAND=go test ./...
# BUILD_COMMAND=go build

#==============================================================================
# SECTION 5 : INT√âGRATION MCP
#==============================================================================

# Utilisation des serveurs MCP pour l'automatisation avanc√©e
USE_MCP_SERVERS=true

# Serveurs MCP disponibles
MCP_TERMINAL_SERVER=@aklo/mcp-terminal
MCP_DOCUMENTATION_SERVER=@aklo/mcp-documentation

# Timeout pour les op√©rations MCP (en millisecondes)
MCP_TIMEOUT=30000

#==============================================================================
# SECTION 6 : PERSONNALISATION PAR PROTOCOLE
#==============================================================================

# Configuration sp√©cifique pour le protocole PLANIFICATION
PLANNING_DEFAULT_ASSISTANCE=full
PLANNING_AUTO_ARCH_DETECTION=true

# Configuration sp√©cifique pour le protocole D√âVELOPPEMENT
DEV_AUTO_TESTS=true
DEV_AUTO_LINTING=true

# Configuration sp√©cifique pour le protocole RELEASE
RELEASE_AUTO_CHANGELOG=true
RELEASE_REQUIRE_TESTS=true

#==============================================================================
# SECTION 7 : S√âCURIT√â ET RESTRICTIONS
#==============================================================================

# Restrictions de s√©curit√©
ALLOW_FORCE_PUSH=false
REQUIRE_SIGNED_COMMITS=false

# Validation obligatoire avant commits atomiques
REQUIRE_HUMAN_VALIDATION=true

# Sauvegarde automatique avant op√©rations destructrices
AUTO_BACKUP=true

#==============================================================================
# EXEMPLES DE CONFIGURATIONS PAR TYPE DE PROJET
#==============================================================================

# üöÄ PROJET PROTOTYPE / EXPLORATION RAPIDE :
# agent_assistance=full
# auto_journal=true
# VALIDATE_LINTER=false
# VALIDATE_TESTS=false

# üè≠ PROJET PRODUCTION / √âQUIPE :
# agent_assistance=skeleton
# auto_journal=true
# VALIDATE_LINTER=true
# VALIDATE_TESTS=true
# REQUIRE_HUMAN_VALIDATION=true

# üéØ PROJET PERSONNEL / CONTR√îLE TOTAL :
# agent_assistance=minimal
# auto_journal=false
# USE_MCP_SERVERS=false

# üìö PROJET DOCUMENTATION / CONTENU :
# agent_assistance=full
# auto_journal=true
# VALIDATE_BUILD=false
# VALIDATE_TESTS=false

#==============================================================================
# AIDE-M√âMOIRE DES COMMANDES
#==============================================================================

# üìã PLANIFICATION :
# aklo plan 42              # Mode full avec journal
# aklo plan 42 --no-agent   # Mode skeleton avec journal  
# aklo plan 42 --no-journal # Mode full sans journal

# üöÄ RELEASE :
# aklo release patch        # 1.0.0 ‚Üí 1.0.1
# aklo release minor        # 1.0.1 ‚Üí 1.1.0  
# aklo release major        # 1.1.0 ‚Üí 2.0.0

# üìù WORKFLOW COMMITS ATOMIQUES :
# 1. Un protocole = Un commit atomique
# 2. Commit inclut : artefact principal + connexes + journal
# 3. Validation humaine obligatoire avant commit
# 4. Message standardis√© selon le protocole

# üîß CONFIGURATION :
# cp aklo/config/.aklo.conf.example .aklo.conf
# vim .aklo.conf            # Adapter √† votre projet
# aklo help                 # Voir toutes les commandes