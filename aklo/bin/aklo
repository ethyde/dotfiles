#!/bin/sh
#==============================================================================
# The Aklo Protocol - Interface Unifiée
#
# Auteur: Human_Developer & AI_Agent
# Version: Interface complète avec commits atomiques par protocole
#
# Implémente l'interface unifiée aklo couvrant tous les protocoles
# définie dans le META-IMPROVEMENT command-coverage-20250102.
#==============================================================================

# Configuration de base du Shell
set -e

#==============================================================================
# PARSER GÉNÉRIQUE DE PROTOCOLES - SOURCE UNIQUE DE VÉRITÉ
#==============================================================================

# Fonction principale : Parser et générer un artefact depuis un protocole
parse_and_generate_artefact() {
  local protocol_name="$1"        # Ex: "00-PRODUCT-OWNER", "04-DEBOGAGE", "05-REFACTORING"
  local artefact_type="$2"        # Ex: "PBI", "DEBUG", "REFACTOR"
  local assistance_level="$3"     # "full", "skeleton", "minimal"
  local output_file="$4"          # Chemin du fichier de sortie
  local context_vars="$5"         # Variables contextuelles (JSON-like string)
  
  # Construire le chemin du protocole (relatif au répertoire racine)
  local protocol_file="./aklo/charte/PROTOCOLES/${protocol_name}.md"
  
  # Si pas trouvé en relatif, essayer le chemin absolu depuis le script
  if [ ! -f "$protocol_file" ]; then
    local script_dir="$(dirname "$0")"
    protocol_file="${script_dir}/../charte/PROTOCOLES/${protocol_name}.md"
  fi
  
  if [ ! -f "$protocol_file" ]; then
    echo "❌ Erreur : Protocole $protocol_name non trouvé dans la charte." >&2
    echo "   Cherché dans: ./aklo/charte/PROTOCOLES/${protocol_name}.md" >&2
    echo "   Et dans: ${script_dir}/../charte/PROTOCOLES/${protocol_name}.md" >&2
    return 1
  fi
  
  # Parser le protocole pour extraire la structure d'artefact
  local artefact_structure=$(extract_artefact_structure "$protocol_file" "$artefact_type")
  
  if [ -z "$artefact_structure" ]; then
    echo "❌ Erreur : Structure d'artefact $artefact_type non trouvée dans $protocol_name." >&2
    return 1
  fi
  
  # Appliquer le filtrage intelligent selon le niveau d'assistance
  local filtered_content=$(apply_intelligent_filtering "$artefact_structure" "$assistance_level" "$context_vars")
  
  # Écrire le résultat dans le fichier de sortie
  echo "$filtered_content" > "$output_file"
  
  return 0
}

# Extraire la structure d'artefact depuis un protocole
extract_artefact_structure() {
  local protocol_file="$1"
  local artefact_type="$2"
  
  # Patterns de recherche selon le type d'artefact
  local start_pattern=""
  local end_pattern=""
  
  case "$artefact_type" in
    "PBI")
      start_pattern="### 2\.3\. Structure Obligatoire Du Fichier PBI"
      end_pattern="^## SECTION 3"
      ;;
    "DEBUG")
      start_pattern="### 2\.3\. Structure Obligatoire Du Fichier Debug"
      end_pattern="^## SECTION 3"
      ;;
    "REFACTOR")
      start_pattern="### 2\.3\. Structure Obligatoire Du Fichier Refactor"
      end_pattern="^## SECTION 3"
      ;;
    "ARCH")
      start_pattern="### 2\.3\. Structure Obligatoire Du Fichier ARCH"
      end_pattern="^## SECTION 3"
      ;;
    "TASK")
      start_pattern="### 2\.3\. Structure Obligatoire Du Fichier Task"
      end_pattern="^## SECTION 3"
      ;;
    "RELEASE")
      start_pattern="### 2\.3\. Structure Obligatoire du Fichier Release"
      end_pattern="^## SECTION 3"
      ;;
    "JOURNAL")
      start_pattern="### 2\.3\. Structure Obligatoire du Fichier Journal"
      end_pattern="^## SECTION 3"
      ;;
    "REVIEW")
      start_pattern="### 2\.2\. Structure Obligatoire Du Fichier Review"
      end_pattern="^## SECTION 3"
      ;;
    "HOTFIX")
      start_pattern="### 2\.3\. Structure Obligatoire du Fichier Hotfix"
      end_pattern="^## SECTION 3"
      ;;
    *)
      echo "❌ Type d'artefact $artefact_type non supporté." >&2
      return 1
      ;;
  esac
  
  # Extraire la section entre les patterns
  local structure=$(sed -n "/$start_pattern/,/$end_pattern/p" "$protocol_file")
  
  # Si aucune section trouvée, retourner vide
  if [ -z "$structure" ]; then
    return 1
  fi
  
  # Supprimer la première ligne (pattern de début)
  structure=$(echo "$structure" | tail -n +2)
  
  # Supprimer la dernière ligne si elle contient le pattern de fin
  if echo "$structure" | tail -n 1 | grep -q "^## SECTION 3"; then
    # Compter les lignes et supprimer la dernière
    local line_count=$(echo "$structure" | wc -l)
    local target_lines=$((line_count - 1))
    structure=$(echo "$structure" | head -n $target_lines)
  fi
  
  # Extraire uniquement le contenu markdown entre ```markdown et ```
  echo "$structure" | sed -n '/```markdown/,/```/p' | sed '1d;$d'
}

# Appliquer le filtrage intelligent selon le niveau d'assistance
apply_intelligent_filtering() {
  local content="$1"
  local assistance_level="$2"
  local context_vars="$3"
  
  # Parser les variables contextuelles (format simple key=value) - approche robuste
  # Remplacer les virgules par des newlines et parser ligne par ligne
  local vars_lines=$(echo "$context_vars" | sed 's/,/\n/g')
  local id_value=$(echo "$vars_lines" | grep '^id=' | cut -d'=' -f2 | tr -d '\n\r')
  local full_id_value=$(echo "$vars_lines" | grep '^full_id=' | cut -d'=' -f2 | tr -d '\n\r')
  local pbi_id_value=$(echo "$vars_lines" | grep '^pbi_id=' | cut -d'=' -f2 | tr -d '\n\r')
  local task_id_value=$(echo "$vars_lines" | grep '^task_id=' | cut -d'=' -f2 | tr -d '\n\r')
  local title_value=$(echo "$vars_lines" | grep '^title=' | cut -d'=' -f2 | tr -d '\n\r')
  local date_value=$(echo "$vars_lines" | grep '^date=' | cut -d'=' -f2 | tr -d '\n\r')
  local status_value=$(echo "$vars_lines" | grep '^status=' | cut -d'=' -f2 | tr -d '\n\r')
  local version_value=$(echo "$vars_lines" | grep '^version=' | cut -d'=' -f2 | tr -d '\n\r')
  local timestamp_value=$(echo "$vars_lines" | grep '^timestamp=' | cut -d'=' -f2 | tr -d '\n\r')
  
  # Appliquer les remplacements intelligents
  local filtered_content="$content"
  
  # Extraire PBI_ID et ARCH_ID depuis id_value (format: "1-4")
  local pbi_id_only="${id_value%%-*}"    # "1" depuis "1-4"
  local arch_id_only="${id_value##*-}"   # "4" depuis "1-4"
  

  
  # Remplacements de patterns selon le type d'artefact (ordre important!)
  # 1. Remplacements pour TASK (01-PLANIFICATION)
  if [ -n "$full_id_value" ]; then
    filtered_content=$(echo "$filtered_content" | sed "s/TASK-\\[PBI_ID\\]-\\[Task_ID\\]/TASK-${full_id_value}/g")
    filtered_content=$(echo "$filtered_content" | sed "s/feature\\/task-\\[PBI_ID\\]-\\[Task_ID\\]/feature\\/task-${full_id_value}/g")
  fi
  if [ -n "$pbi_id_value" ]; then
    filtered_content=$(echo "$filtered_content" | sed "s/\\[PBI_ID\\]/${pbi_id_value}/g")
    filtered_content=$(echo "$filtered_content" | sed "s/PBI-\\[PBI_ID\\]/PBI-${pbi_id_value}/g")
  fi
  if [ -n "$task_id_value" ]; then
    filtered_content=$(echo "$filtered_content" | sed "s/\\[Task_ID\\]/${task_id_value}/g")
  fi
  
  # 2. Remplacements pour ARCH (02-ARCHITECTURE) 
  if [ -n "$id_value" ]; then
    # Extraire PBI_ID et ARCH_ID depuis id_value (format: "1-4")
    local pbi_id_only="${id_value%%-*}"    # "1" depuis "1-4"
    local arch_id_only="${id_value##*-}"   # "4" depuis "1-4"
    
    filtered_content=$(echo "$filtered_content" | sed "s/ARCH-\\[PBI_ID\\]-\\[ID\\]/ARCH-${id_value}/g")
    filtered_content=$(echo "$filtered_content" | sed "s/ARCH-42-1/ARCH-${id_value}/g")  # Remplacer l'exemple ARCH-42-1
    filtered_content=$(echo "$filtered_content" | sed "s/PBI-42/PBI-${pbi_id_only}/g")   # Remplacer l'exemple PBI-42
    filtered_content=$(echo "$filtered_content" | sed "s/\\[ID\\]/${arch_id_only}/g")
  fi
  
  # 3. Remplacements de patterns génériques et titres
  if [ -n "$title_value" ]; then
    filtered_content=$(echo "$filtered_content" | sed "s/\\[Titre décrivant le problème architectural\\]/${title_value}/g")
    filtered_content=$(echo "$filtered_content" | sed "s/\\[Titre technique de la tâche\\]/${title_value}/g")
    filtered_content=$(echo "$filtered_content" | sed "s/%%TITLE%%/${title_value}/g")
  fi
  
  # 4. Remplacements d'ID génériques
  if [ -n "$id_value" ]; then
    filtered_content=$(echo "$filtered_content" | sed "s/%%ID%%/${id_value}/g")
    filtered_content=$(echo "$filtered_content" | sed "s/PBI-%%ID%%/PBI-${id_value}/g")
  fi
  
  # 5. Remplacements de version (RELEASE)
  if [ -n "$version_value" ]; then
    filtered_content=$(echo "$filtered_content" | sed "s/\\[version\\]/${version_value}/g")
    filtered_content=$(echo "$filtered_content" | sed "s/v\\[version\\]/v${version_value}/g")
    filtered_content=$(echo "$filtered_content" | sed "s/vX\\.X\\.X/v${version_value}/g")
    filtered_content=$(echo "$filtered_content" | sed "s/X\\.X\\.X/${version_value}/g")
  fi
  
  # 6. Remplacements de timestamp (JOURNAL)
  if [ -n "$timestamp_value" ]; then
    filtered_content=$(echo "$filtered_content" | sed "s/HH:MM/${timestamp_value}/g")
  fi
  
  # 7. Remplacements de dates (patterns YYYY-MM-DD et commandes date)
  if [ -n "$date_value" ]; then
    filtered_content=$(echo "$filtered_content" | sed "s/YYYY-MM-DD/${date_value}/g")
    filtered_content=$(echo "$filtered_content" | sed "s/[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}/${date_value}/g")
    filtered_content=$(echo "$filtered_content" | sed "s/\$(date +[^)]*))/${date_value}/g")
    filtered_content=$(echo "$filtered_content" | sed "s/\$(date +'[^']*')/${date_value}/g")
  fi
  
  # Remplacements de statuts
  if [ -n "$status_value" ]; then
    filtered_content=$(echo "$filtered_content" | sed "s/PROPOSED/${status_value}/g")
    filtered_content=$(echo "$filtered_content" | sed "s/INVESTIGATING/${status_value}/g")
    filtered_content=$(echo "$filtered_content" | sed "s/ANALYSIS/${status_value}/g")
    filtered_content=$(echo "$filtered_content" | sed "s/DRAFT/${status_value}/g")
  fi
  
  # Adaptation selon le niveau d'assistance
  case "$assistance_level" in
    "full")
      # Garder tout le contenu avec exemples et instructions
      ;;
    "skeleton")
      # Supprimer les exemples et instructions détaillées, garder la structure
      filtered_content=$(echo "$filtered_content" | sed 's/(Ex: [^)]*)//g')
      filtered_content=$(echo "$filtered_content" | sed 's/_À compléter[^_]*_/_À compléter_/g')
      ;;
    "minimal")
      # Garder seulement la structure de base, supprimer les détails
      filtered_content=$(echo "$filtered_content" | sed 's/(.*)//')
      filtered_content=$(echo "$filtered_content" | sed 's/_[^_]*_//g')
      filtered_content=$(echo "$filtered_content" | sed '/^$/N;/^\n$/d')
      ;;
  esac
  
  echo "$filtered_content"
}

# Fonction utilitaire : Détecter le type d'ID selon le protocole
detect_id_pattern() {
  local protocol_name="$1"
  local base_value="$2"  # Valeur de base (ex: titre pour DEBUG, PBI_ID pour ARCH)
  
  case "$protocol_name" in
    "00-PRODUCT-OWNER")
      # PBI: ID numérique simple
      echo "$base_value"
      ;;
    "04-DEBOGAGE")
      # DEBUG: titre-slugifié-YYYYMMDD
      local date_id=$(date +%Y%m%d)
      local title_slug=$(echo "$base_value" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
      echo "${title_slug}-${date_id}"
      ;;
    "05-REFACTORING")
      # REFACTOR: titre-slugifié-YYYYMMDD (même pattern que DEBUG)
      local date_id=$(date +%Y%m%d)
      local title_slug=$(echo "$base_value" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
      echo "${title_slug}-${date_id}"
      ;;
    "02-ARCHITECTURE")
      # ARCH: PBI_ID-SEQ-STATUS (ex: 1-1-DRAFT)
      echo "$base_value"  # Déjà formaté par la commande appelante
      ;;
    "01-PLANIFICATION")
      # TASK: PBI_ID-TASK_SEQ (ex: 1-1)
      echo "$base_value"  # Déjà formaté par la commande appelante
      ;;
    "09-RELEASE")
      # RELEASE: Version sémantique (ex: 1.2.0)
      echo "$base_value"  # Version déjà formatée
      ;;
    "18-JOURNAL")
      # JOURNAL: Date YYYY-MM-DD (ex: 2025-01-02)
      echo "$base_value"  # Date déjà formatée
      ;;
    "07-REVUE-DE-CODE")
      # REVIEW: ID de task ou PR (ex: task-42-1, pr-123)
      echo "$base_value"  # ID déjà formaté par la commande appelante
      ;;
    "10-HOTFIX")
      # HOTFIX: description-slugifiée-YYYYMMDD (ex: bug-login-prod-20250628)
      local date_id=$(date +%Y%m%d)
      local title_slug=$(echo "$base_value" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
      echo "${title_slug}-${date_id}"
      ;;
    *)
      echo "$base_value"
      ;;
  esac
}

#==============================================================================
# SECTION 1 : FONCTIONS UTILITAIRES HÉRITÉES
#==============================================================================

# Réutilisation des fonctions existantes
get_next_id() {
  SEARCH_PATH="$1"
  PREFIX="$2"
  LAST_ID=$(ls "${SEARCH_PATH}/${PREFIX}"*-*.md 2>/dev/null | sed -n "s/.*${PREFIX}\([0-9]*\)-.*/\1/p" | sort -n | tail -1 || echo 0)
  NEXT_ID=$((LAST_ID + 1))
  echo "$NEXT_ID"
}

get_config() {
  KEY="$1"
  GLOBAL_CONFIG_FILE="$(dirname "$0")/../config/.aklo.conf"
  
  find_local_config() {
    local current_dir="$(pwd)"
    while [ "$current_dir" != "/" ]; do
      if [ -f "$current_dir/.aklo.conf" ]; then
        echo "$current_dir/.aklo.conf"
        return 0
      fi
      current_dir="$(dirname "$current_dir")"
    done
    return 1
  }
  
  CONFIG_FILE=$(find_local_config) || CONFIG_FILE="$GLOBAL_CONFIG_FILE"
  if [ ! -f "$CONFIG_FILE" ]; then
    echo "Erreur : Fichier de configuration introuvable." >&2
    exit 1
  fi
  
  sed -n "/^${KEY}=/s/^[^=]*=//p" "$CONFIG_FILE" | tr -d '"'
}

#==============================================================================
# SECTION 2 : FONCTIONS JOURNAL ATOMIQUE
#==============================================================================

# Fonction: update_journal
# Rôle: Met à jour le journal quotidien avec une entrée de protocole
# Usage: update_journal "PROTOCOLE" "Action" "Description" "Artefacts"
update_journal() {
  PROTOCOL="$1"
  ACTION="$2"
  DESCRIPTION="$3"
  ARTEFACTS="$4"
  
  JOURNAL_DIR="./$(get_config "JOURNAL_DIR")"
  TODAY=$(date +%Y-%m-%d)
  JOURNAL_FILE="${JOURNAL_DIR}/JOURNAL-${TODAY}.md"
  TIMESTAMP=$(date +%H:%M)
  
  # Créer le répertoire journal si nécessaire
  mkdir -p "$JOURNAL_DIR"
  
  # Créer le fichier journal du jour si nécessaire avec le parser générique
  if [ ! -f "$JOURNAL_FILE" ]; then
    local context_vars="date=${TODAY},timestamp=${TIMESTAMP}"
    parse_and_generate_artefact "18-JOURNAL" "JOURNAL" "full" "$JOURNAL_FILE" "$context_vars"
    
    if [ $? -ne 0 ]; then
      echo "⚠️ Fallback vers génération statique JOURNAL" >&2
      # Fallback statique si le parser échoue
      cat > "$JOURNAL_FILE" << EOF
# JOURNAL DE TRAVAIL : ${TODAY}
---
**Responsable:** Human_Developer
**Objectif(s) de la journée:** [À définir]
---

## Entrées Chronologiques

### ${TIMESTAMP} - Début de session

- **Action :** Ouverture du journal quotidien
- **Contexte :** Première utilisation du système de journal intégré

EOF
    fi
  fi
  
  # Ajouter l'entrée de protocole (structure extraite du protocole)
  cat >> "$JOURNAL_FILE" << EOF
### ${TIMESTAMP} - [${PROTOCOL}] ${ACTION}

- **Action :** ${DESCRIPTION}
- **Artefacts :** ${ARTEFACTS}
- **Timestamp :** ${TODAY} ${TIMESTAMP}

EOF
}

#==============================================================================
# SECTION 3 : COMMANDES AVEC COMMITS ATOMIQUES
#==============================================================================

# Commande: plan (Version 2.0 - Commit Atomique)
# Implémente le protocole PLANIFICATION avec commit atomique unique
command_plan() {
  if [ -z "$1" ]; then
    echo "Erreur : L'ID du PBI est requis (ex: 42)." >&2
    exit 1
  fi
  PBI_ID="$1"
  
  # Détection du niveau d'assistance
  AGENT_ASSISTANCE=$(get_config "AGENT_ASSISTANCE")
  AUTO_JOURNAL=$(get_config "AUTO_JOURNAL")
  
  # Parsing des arguments
  shift
  while [ $# -gt 0 ]; do
    case "$1" in
      --no-agent)
        AGENT_ASSISTANCE="skeleton"
        ;;
      --no-journal)
        AUTO_JOURNAL="false"
        ;;
      *)
        echo "Argument inconnu: $1" >&2
        exit 1
        ;;
    esac
    shift
  done
  
  # Override depuis la configuration si présente
  CONFIG_ASSISTANCE=$(get_config "AGENT_ASSISTANCE" 2>/dev/null || echo "")
  CONFIG_JOURNAL=$(get_config "AUTO_JOURNAL" 2>/dev/null || echo "")
  
  if [ -n "$CONFIG_ASSISTANCE" ]; then
    AGENT_ASSISTANCE="$CONFIG_ASSISTANCE"
  fi
  if [ -n "$CONFIG_JOURNAL" ]; then
    AUTO_JOURNAL="$CONFIG_JOURNAL"
  fi
  
  echo "--- PLANIFICATION v2.0 (Commit Atomique) ---"
  echo "› PBI: ${PBI_ID}"
  echo "› Assistance: ${AGENT_ASSISTANCE}"
  echo "› Journal automatique: ${AUTO_JOURNAL}"
  echo ""
  
  # Validation du PBI
  PBI_FILE=$(ls ./docs/backlog/00-pbi/PBI-${PBI_ID}-*.md 2>/dev/null | head -1)
  if [ ! -f "$PBI_FILE" ]; then
    echo "Erreur : PBI ${PBI_ID} introuvable." >&2
    exit 1
  fi
  
  # Préparation des variables pour le commit atomique
  CREATED_TASKS=""
  MODIFIED_FILES=""
  TASK_COUNT=0
  
  echo "--- Phase 1: Création des Tasks ---"
  
  case "$AGENT_ASSISTANCE" in
    "full")
      echo "Mode FULL: L'IA va générer le contenu complet des tasks."
      echo "TODO: Intégration avec le serveur MCP pour génération automatique"
      ;;
    "skeleton")
      echo "Mode SKELETON: Création de la structure des tasks à compléter."
      ;;
    "minimal")
      echo "Mode MINIMAL: Création des fichiers avec IDs uniquement."
      ;;
  esac
  
  # Boucle de création interactive (simplifiée pour la démo)
  while true; do
    printf "  › Titre de la nouvelle tâche (vide pour terminer): "
    read -r TASK_TITLE
    
    if [ -z "$TASK_TITLE" ]; then
      break
    fi
    
    TASK_COUNT=$((TASK_COUNT + 1))
    TASK_ID=$(printf "%02d" $TASK_COUNT)
    TASK_FILENAME="TASK-${PBI_ID}-${TASK_ID}-TODO.md"
    TASK_PATH="./docs/backlog/01-tasks/${TASK_FILENAME}"
    
    # Création du fichier Task selon le niveau d'assistance
    mkdir -p "./docs/backlog/01-tasks"
    
    # Génération dynamique depuis le protocole PLANIFICATION
    local task_full_id="${PBI_ID}-${TASK_ID}"
    local context_vars="pbi_id=${PBI_ID},task_id=${TASK_ID},full_id=${task_full_id},title=${TASK_TITLE},status=TODO"
    
    parse_and_generate_artefact "01-PLANIFICATION" "TASK" "$AGENT_ASSISTANCE" "$TASK_PATH" "$context_vars"
    
    # Vérification du succès de génération
    if [ $? -ne 0 ]; then
      echo "❌ Erreur : Échec de génération TASK depuis le protocole PLANIFICATION" >&2
      echo "   Vérifiez l'intégrité du protocole et réessayez" >&2
      return 1
    fi
    
    CREATED_TASKS="${CREATED_TASKS}${TASK_FILENAME} "
    MODIFIED_FILES="${MODIFIED_FILES}${TASK_PATH} "
    echo "  ✓ Task créée: ${TASK_FILENAME}"
  done
  
  if [ $TASK_COUNT -eq 0 ]; then
    echo "Aucune task créée. Abandon."
    exit 0
  fi
  
  echo ""
  echo "--- Phase 2: Mise à jour du PBI ---"
  
  # Mise à jour du PBI avec la liste des tasks
  cp "$PBI_FILE" "${PBI_FILE}.backup"
  
  # Ajout de la section Tasks si elle n'existe pas
  if ! grep -q "## Tasks Associées" "$PBI_FILE"; then
    cat >> "$PBI_FILE" << EOF

## Tasks Associées

EOF
  fi
  
  # Ajout des tasks créées
  for task_file in $CREATED_TASKS; do
    task_id=$(echo "$task_file" | sed 's/TASK-\([^-]*-[^-]*\)-.*/\1/')
    echo "- TASK-${task_id}: [Créée]" >> "$PBI_FILE"
  done
  
  MODIFIED_FILES="${MODIFIED_FILES}${PBI_FILE} "
  echo "  ✓ PBI mis à jour avec ${TASK_COUNT} tasks"
  
  # Phase 3: Mise à jour du journal
  if [ "$AUTO_JOURNAL" = "true" ]; then
    echo ""
    echo "--- Phase 3: Mise à jour du journal ---"
    
    JOURNAL_DESCRIPTION="Décomposition PBI-${PBI_ID} en ${TASK_COUNT} tasks techniques (mode: ${AGENT_ASSISTANCE})"
    JOURNAL_ARTEFACTS="PBI-${PBI_ID} mis à jour, ${TASK_COUNT} tasks créées: ${CREATED_TASKS}"
    
    update_journal "PLANIFICATION" "Décomposition PBI" "$JOURNAL_DESCRIPTION" "$JOURNAL_ARTEFACTS"
    
    JOURNAL_FILE="./docs/backlog/15-journal/JOURNAL-$(date +%Y-%m-%d).md"
    MODIFIED_FILES="${MODIFIED_FILES}${JOURNAL_FILE} "
    echo "  ✓ Journal mis à jour"
  fi
  
  # Phase 4: Validation et commit atomique
  echo ""
  echo "--- Phase 4: Préparation du commit atomique ---"
  echo "Fichiers à committer:"
  for file in $MODIFIED_FILES; do
    echo "  - $file"
  done
  echo ""
  
  printf "Voulez-vous créer le commit atomique de planification ? (y/n) "
  read -r reply
  if [ "$reply" != "y" ]; then
    echo "Commit annulé. Fichiers conservés pour révision manuelle."
    exit 0
  fi
  
  # Création du commit atomique
  git add $MODIFIED_FILES
  
  COMMIT_MSG="feat(planning): Décomposition PBI-${PBI_ID} en ${TASK_COUNT} tasks

- Création de ${TASK_COUNT} tasks techniques (mode: ${AGENT_ASSISTANCE})
- PBI-${PBI_ID} mis à jour avec la liste des tasks associées"

  if [ "$AUTO_JOURNAL" = "true" ]; then
    COMMIT_MSG="${COMMIT_MSG}
- Journal mis à jour avec le processus de planification"
  fi

  COMMIT_MSG="${COMMIT_MSG}

Tasks créées:"
  for task_file in $CREATED_TASKS; do
    task_title=$(head -1 "./docs/backlog/01-tasks/$task_file" | sed 's/# //')
    COMMIT_MSG="${COMMIT_MSG}
- $task_title"
  done

  COMMIT_MSG="${COMMIT_MSG}

Prochaine étape: DEVELOPPEMENT"
  
  git commit -m "$COMMIT_MSG"
  
  echo ""
  echo "🎉 Planification terminée avec commit atomique !"
  echo "   ${TASK_COUNT} tasks créées pour PBI-${PBI_ID}"
  echo "   Commit: $(git rev-parse --short HEAD)"
}

#==============================================================================
# SECTION 4 : COMMANDE RELEASE V2.0
#==============================================================================

# Commande: release (Version 2.0 - Workflow Séquentiel + Commit Atomique)
command_release() {
  if [ -z "$1" ]; then
    echo "Erreur : Le type de release est requis (major, minor, patch)." >&2
    exit 1
  fi
  BUMP_TYPE="$1"
  
  echo "--- RELEASE v2.0 (Workflow Séquentiel + Commit Atomique) ---"
  
  # Phase 1: Préparation locale (sans commit)
  echo "--- Phase 1: Préparation locale ---"
  
  CURRENT_VERSION=$(grep '"version"' package.json | sed 's/.*"version": "\([^"]*\)".*/\1/' || echo "0.0.0")
  
  case "$BUMP_TYPE" in
    "major")
      NEW_VERSION=$(echo "$CURRENT_VERSION" | awk -F. '{print ($1+1)".0.0"}')
      ;;
    "minor")
      NEW_VERSION=$(echo "$CURRENT_VERSION" | awk -F. '{print $1"."($2+1)".0"}')
      ;;
    "patch")
      NEW_VERSION=$(echo "$CURRENT_VERSION" | awk -F. '{print $1"."$2"."($3+1)}')
      ;;
    *)
      echo "Erreur : Type de release invalide. Utilisez major, minor ou patch." >&2
      exit 1
      ;;
  esac
  
  echo "  › Version actuelle: ${CURRENT_VERSION}"
  echo "  › Nouvelle version: ${NEW_VERSION}"
  
  # Préparation des fichiers (sans commit)
  RELEASE_DIR="./$(get_config "RELEASES_DIR")"
  mkdir -p "$RELEASE_DIR"
  RELEASE_FILE="${RELEASE_DIR}/RELEASE-${NEW_VERSION}-AWAITING_DEPLOYMENT.md"
  
  # Génération dynamique depuis le protocole RELEASE
  local context_vars="version=${NEW_VERSION},type=${BUMP_TYPE},date=$(date +%Y-%m-%d),status=AWAITING_DEPLOYMENT"
  
  parse_and_generate_artefact "09-RELEASE" "RELEASE" "full" "$RELEASE_FILE" "$context_vars"
  
  # Vérification du succès de génération
  if [ $? -ne 0 ]; then
    echo "❌ Erreur : Échec de génération RELEASE depuis le protocole" >&2
    echo "   Vérifiez l'intégrité du protocole 09-RELEASE" >&2
    return 1
  fi
  
  # Mise à jour du CHANGELOG (simplifié)
  if [ ! -f "CHANGELOG.md" ]; then
    echo "# CHANGELOG" > CHANGELOG.md
    echo "" >> CHANGELOG.md
  fi
  
  # Ajout de la nouvelle version au CHANGELOG
  sed -i.bak "2i\\
\\
## [${NEW_VERSION}] - $(date +%Y-%m-%d)\\
\\
### Added\\
- [À compléter]\\
\\
### Changed\\
- [À compléter]\\
\\
### Fixed\\
- [À compléter]\\
" CHANGELOG.md
  
  # Mise à jour de la version dans package.json
  if [ -f "package.json" ]; then
    sed -i.bak "s/\"version\": \"${CURRENT_VERSION}\"/\"version\": \"${NEW_VERSION}\"/" package.json
  fi
  
  echo "  ✓ Rapport de release créé"
  echo "  ✓ CHANGELOG.md mis à jour"
  echo "  ✓ Version mise à jour dans package.json"
  
  # Phase 2: Validation technique (sans commit)
  echo ""
  echo "--- Phase 2: Validation technique ---"
  echo "  › Lancement des tests..."
  
  # Simulation des tests (à adapter selon le projet)
  if command -v npm >/dev/null 2>&1 && [ -f "package.json" ]; then
    echo "  › Tests npm..."
    # npm test || { echo "Erreur: Les tests ont échoué"; exit 1; }
    echo "  ✓ Tests npm passés (simulé)"
  fi
  
  echo "  ✓ Validation technique réussie"
  
  # Phase 3: Mise à jour du journal
  echo ""
  echo "--- Phase 3: Mise à jour du journal ---"
  
  JOURNAL_DESCRIPTION="Préparation release v${NEW_VERSION} (type: ${BUMP_TYPE})"
  JOURNAL_ARTEFACTS="RELEASE-${NEW_VERSION}, CHANGELOG.md, package.json"
  
  update_journal "RELEASE" "Préparation release" "$JOURNAL_DESCRIPTION" "$JOURNAL_ARTEFACTS"
  echo "  ✓ Journal mis à jour"
  
  # Phase 4: Validation humaine du diff complet
  echo ""
  echo "--- Phase 4: Validation du commit atomique ---"
  echo "Fichiers modifiés pour la release:"
  echo "  - ${RELEASE_FILE}"
  echo "  - CHANGELOG.md"
  echo "  - package.json"
  echo "  - ./docs/backlog/15-journal/JOURNAL-$(date +%Y-%m-%d).md"
  echo ""
  
  printf "Voulez-vous créer le commit atomique de release ? (y/n) "
  read -r reply
  if [ "$reply" != "y" ]; then
    echo "Release annulée. Fichiers conservés pour révision manuelle."
    exit 0
  fi
  
  # Phase 5: Commit atomique final
  echo ""
  echo "--- Phase 5: Commit atomique et tagging ---"
  
  git add "$RELEASE_FILE" CHANGELOG.md package.json "./docs/backlog/15-journal/JOURNAL-$(date +%Y-%m-%d).md"
  
  COMMIT_MSG="release: Version ${NEW_VERSION}

Release ${BUMP_TYPE} v${NEW_VERSION} préparée et validée.

- Rapport RELEASE-${NEW_VERSION} finalisé
- CHANGELOG.md mis à jour avec nouvelles fonctionnalités
- Version mise à jour : ${CURRENT_VERSION} → ${NEW_VERSION}
- Journal mis à jour avec le processus de release
- Tous les tests passent, build de production validé

Type de release: ${BUMP_TYPE}"
  
  git commit -m "$COMMIT_MSG"
  
  # Création du tag
  git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
  
  echo ""
  echo "🎉 Release v${NEW_VERSION} créée avec succès !"
  echo "   Commit: $(git rev-parse --short HEAD)"
  echo "   Tag: v${NEW_VERSION}"
  echo ""
  echo "Prochaines étapes:"
  echo "  1. git push origin main"
  echo "  2. git push origin v${NEW_VERSION}"
  echo "  3. Déploiement en production"
}

#==============================================================================
# SECTION 4 : COMMANDES SYSTÈME (P1 - Priorité maximale)
#==============================================================================

# Commande: status - Tableau de bord complet du projet
command_status() {
  local mode="${1:-standard}"
  local script_dir="$(dirname "$0")"
  
  case "$mode" in
    "--help")
      echo "Usage: aklo status [--brief|--detailed|--json]"
      echo ""
      echo "Affiche le tableau de bord complet du projet aklo."
      echo ""
      echo "Options:"
      echo "  --brief, -b     Affichage condensé"
      echo "  --detailed, -d  Affichage détaillé avec métriques"
      echo "  --json          Sortie au format JSON"
      exit 0
      ;;
    *)
      # Déléguer au script spécialisé pour tous les modes
      if [ -f "$script_dir/../ux-improvements/status-command.sh" ]; then
        . "$script_dir/../ux-improvements/status-command.sh"
        # Passer le mode ou "standard" si vide
        aklo_status "${mode:-standard}"
      else
        echo "Erreur : Script status-command.sh introuvable." >&2
        exit 1
      fi
      ;;
  esac
}

# Commande: mcp - Gestion des serveurs MCP
command_mcp() {
  local action="$1"
  local script_dir="$(dirname "$0")"
  
  case "$action" in
    "setup")
      echo "🔧 Configuration des serveurs MCP..."
      if [ -f "$script_dir/../mcp-servers/setup-mcp.sh" ]; then
        "$script_dir/../mcp-servers/setup-mcp.sh"
      else
        echo "Erreur : Script setup-mcp.sh introuvable." >&2
        exit 1
      fi
      ;;
    "restart")
      echo "🔄 Redémarrage des serveurs MCP..."
      if [ -f "$script_dir/../mcp-servers/restart-mcp.sh" ]; then
        "$script_dir/../mcp-servers/restart-mcp.sh"
      else
        echo "Erreur : Script restart-mcp.sh introuvable." >&2
        exit 1
      fi
      ;;
    "watch")
      echo "👁️ Surveillance des serveurs MCP..."
      if [ -f "$script_dir/../mcp-servers/watch-mcp.sh" ]; then
        "$script_dir/../mcp-servers/watch-mcp.sh"
      else
        echo "Erreur : Script watch-mcp.sh introuvable." >&2
        exit 1
      fi
      ;;
    "--help"|"help"|"")
      echo "Usage: aklo mcp <action>"
      echo ""
      echo "Gestion des serveurs MCP (Model Context Protocol)."
      echo ""
      echo "Actions:"
      echo "  setup     Configuration initiale des serveurs MCP"
      echo "  restart   Redémarrage des serveurs après modification"
      echo "  watch     Surveillance en temps réel des serveurs"
      echo ""
      echo "Exemples:"
      echo "  aklo mcp setup      # Configuration initiale"
      echo "  aklo mcp restart    # Après modification du code MCP"
      echo "  aklo mcp watch      # Surveillance continue"
      exit 0
      ;;
    *)
      echo "Erreur : Action MCP inconnue '$action'." >&2
      echo "Utilisez 'aklo mcp help' pour voir les actions disponibles."
      exit 1
      ;;
  esac
}

# Commande: validate - Validation de projets et artefacts
command_validate() {
  local target="${1:-.}"
  local script_dir="$(dirname "$0")"
  
  case "$target" in
    "--help")
      echo "Usage: aklo validate [path]"
      echo ""
      echo "Valide la structure et la cohérence du projet aklo."
      echo ""
      echo "Arguments:"
      echo "  path    Chemin à valider (défaut: répertoire courant)"
      echo ""
      echo "Validations effectuées:"
      echo "  • Structure des répertoires aklo"
      echo "  • Cohérence des artefacts (PBI, TASK, etc.)"
      echo "  • Respect des protocoles de la charte"
      echo "  • Configuration .aklo.conf"
      exit 0
      ;;
    *)
      echo "🔍 Validation du projet aklo..."
      if [ -f "$script_dir/../ux-improvements/validation.sh" ]; then
        "$script_dir/../ux-improvements/validation.sh" "$target"
      else
        echo "Erreur : Script validation.sh introuvable." >&2
        exit 1
      fi
      ;;
  esac
}

# Commande: template - Gestion des templates
command_template() {
  local action="$1"
  local script_dir="$(dirname "$0")"
  
  case "$action" in
    "list")
      echo "📋 Templates disponibles..."
      if [ -f "$script_dir/../ux-improvements/templates.sh" ]; then
        . "$script_dir/../ux-improvements/templates.sh"
        list_templates
      else
        echo "Erreur : Script templates.sh introuvable." >&2
        exit 1
      fi
      ;;
    "create")
      shift
      echo "🆕 Création d'un nouveau template..."
      if [ -f "$script_dir/../ux-improvements/templates.sh" ]; then
        . "$script_dir/../ux-improvements/templates.sh"
        create_template "$@"
      else
        echo "Erreur : Script templates.sh introuvable." >&2
        exit 1
      fi
      ;;
    "apply")
      shift
      echo "📝 Application d'un template..."
      if [ -f "$script_dir/../ux-improvements/templates.sh" ]; then
        . "$script_dir/../ux-improvements/templates.sh"
        apply_template "$@"
      else
        echo "Erreur : Script templates.sh introuvable." >&2
        exit 1
      fi
      ;;
    "--help"|"help"|"")
      echo "Usage: aklo template <action> [args...]"
      echo ""
      echo "Gestion des templates de projet aklo."
      echo ""
      echo "Actions:"
      echo "  list              Liste les templates disponibles"
      echo "  create <name>     Crée un nouveau template"
      echo "  apply <name>      Applique un template au projet"
      echo ""
      echo "Exemples:"
      echo "  aklo template list"
      echo "  aklo template create mon-template"
      echo "  aklo template apply web-app"
      exit 0
      ;;
    *)
      echo "Erreur : Action template inconnue '$action'." >&2
      echo "Utilisez 'aklo template help' pour voir les actions disponibles."
      exit 1
      ;;
  esac
}

# Commande: install-ux - Installation des améliorations UX
command_install_ux() {
  local script_dir="$(dirname "$0")"
  
  case "${1:-}" in
    "--help")
      echo "Usage: aklo install-ux"
      echo ""
      echo "Installe les améliorations d'expérience utilisateur aklo :"
      echo "  • Autocomplétion shell (bash/zsh)"
      echo "  • Aliases et raccourcis"
      echo "  • Configuration optimisée"
      echo "  • Intégration avec les éditeurs"
      exit 0
      ;;
    *)
      echo "🎨 Installation des améliorations UX..."
      if [ -f "$script_dir/../ux-improvements/install-ux.sh" ]; then
        "$script_dir/../ux-improvements/install-ux.sh"
      else
        echo "Erreur : Script install-ux.sh introuvable." >&2
        exit 1
      fi
      ;;
  esac
}

# Commande: propose-pbi - Création d'un Product Backlog Item
command_propose_pbi() {
  local title="$1"
  local template="${2:-default}"
  local agent_assistance=$(get_config "AGENT_ASSISTANCE" || echo "full")
  local auto_journal=$(get_config "AUTO_JOURNAL" || echo "true")
  
  case "$title" in
    "--help"|"help"|"")
      echo "Usage: aklo propose-pbi \"<titre>\" [--template=<type>]"
      echo ""
      echo "Crée un nouveau Product Backlog Item selon le protocole PRODUCT-OWNER."
      echo ""
      echo "Arguments:"
      echo "  titre       Titre descriptif du PBI (requis, entre guillemets)"
      echo ""
      echo "Options:"
      echo "  --template=<type>  Type de template (default|feature|bug|improvement)"
      echo "  --no-agent         Mode skeleton (structure vide à compléter)"
      echo "  --no-journal       Pas de mise à jour automatique du journal"
      echo ""
      echo "Exemples:"
      echo "  aklo propose-pbi \"Ajouter authentification OAuth\""
      echo "  aklo propose-pbi \"Corriger bug de validation\" --template=bug"
      echo "  aklo pbi \"Optimiser temps de chargement\" --no-agent"
      exit 0
      ;;
    --no-agent)
      agent_assistance="skeleton"
      title="$2"
      template="${3:-default}"
      ;;
    --no-journal)
      auto_journal="false"
      title="$2"
      template="${3:-default}"
      ;;
  esac
  
  if [ -z "$title" ]; then
    echo "Erreur : Le titre du PBI est requis." >&2
    echo "Usage: aklo propose-pbi \"<titre>\""
    echo "Utilisez 'aklo propose-pbi --help' pour plus d'informations."
    exit 1
  fi
  
  # Génération de l'ID unique
  PBI_DIR="./$(get_config "PBI_DIR")"
  mkdir -p "$PBI_DIR"
  
  PBI_ID=$(get_next_id "$PBI_DIR" "PBI")
  PBI_FILE="${PBI_DIR}/PBI-${PBI_ID}-PROPOSED.md"
  TODAY=$(date +%Y-%m-%d)
  
  echo "🎯 Création du PBI-${PBI_ID}: \"$title\""
  
  # Génération du contenu selon le niveau d'assistance
  case "$agent_assistance" in
    "full")
      echo "🤖 Génération complète selon protocole PRODUCT-OWNER..."
      generate_pbi_from_protocol "$PBI_FILE" "$PBI_ID" "$title" "$TODAY" "full"
      ;;
    "skeleton")
      echo "📝 Structure protocole à compléter..."
      generate_pbi_from_protocol "$PBI_FILE" "$PBI_ID" "$title" "$TODAY" "skeleton"
      ;;
    "minimal")
      echo "🔧 Structure minimale selon protocole..."
      generate_pbi_from_protocol "$PBI_FILE" "$PBI_ID" "$title" "$TODAY" "minimal"
      ;;
  esac
  
  # Mise à jour du journal si activée
  if [ "$auto_journal" = "true" ]; then
    update_journal "PRODUCT-OWNER" "Création PBI" "Nouveau PBI-${PBI_ID}: $title" "PBI-${PBI_ID}-PROPOSED.md"
  fi
  
  echo ""
  echo "✅ PBI-${PBI_ID}-PROPOSED.md créé avec succès !"
  echo "📍 Fichier: $PBI_FILE"
  echo ""
  echo "Prochaines étapes:"
  echo "  1. Réviser et compléter le PBI"
  echo "  2. Valider avec l'équipe"
  echo "  3. aklo plan ${PBI_ID} (pour décomposer en tâches)"
}

# Fonction de génération PBI - Parser dynamique du protocole PRODUCT-OWNER
generate_pbi_from_protocol() {
  local file="$1"
  local id="$2"
  local title="$3"
  local date="$4"
  local assistance_level="$5"
  
  # Variables contextuelles pour le parser générique
  local context_vars="id=${id},title=${title},date=${date},status=PROPOSED"
  
  # Génération dynamique depuis le protocole
  parse_and_generate_artefact "00-PRODUCT-OWNER" "PBI" "$assistance_level" "$file" "$context_vars"
  
  # Si le parser générique échoue, afficher une erreur explicite
  if [ $? -ne 0 ]; then
    echo "❌ Erreur : Échec de génération PBI depuis le protocole" >&2
    echo "   Vérifiez l'intégrité du protocole PRODUCT-OWNER" >&2
    return 1
  fi
}

# ===== FONCTION PBI STATIC_FALLBACK SUPPRIMÉE =====
# La fonction generate_pbi_static_fallback a été supprimée car remplacée 
# par le parser générique dynamique.

# Commande: arch - Conception d'architecture logicielle
command_arch() {
  local pbi_id="$1"
  local review_flag="$2"
  local agent_assistance=$(get_config "AGENT_ASSISTANCE" || echo "full")
  local auto_journal=$(get_config "AUTO_JOURNAL" || echo "true")
  
  case "$pbi_id" in
    "--help"|"help"|"")
      echo "Usage: aklo arch <PBI_ID> [--review]"
      echo ""
      echo "Conception d'architecture logicielle selon le protocole ARCHITECTURE."
      echo ""
      echo "Arguments:"
      echo "  PBI_ID      ID du PBI nécessitant une architecture (requis)"
      echo ""
      echo "Options:"
      echo "  --review    Révision d'une architecture existante"
      echo "  --no-agent  Mode skeleton (structure vide à compléter)"
      echo "  --no-journal Pas de mise à jour automatique du journal"
      echo ""
      echo "Exemples:"
      echo "  aklo arch 42            # Nouvelle architecture pour PBI-42"
      echo "  aklo arch 42 --review   # Révision de l'architecture PBI-42"
      echo "  aklo arch 42 --no-agent # Mode skeleton"
      exit 0
      ;;
    --no-agent)
      agent_assistance="skeleton"
      pbi_id="$2"
      review_flag="$3"
      ;;
    --no-journal)
      auto_journal="false"
      pbi_id="$2"
      review_flag="$3"
      ;;
  esac
  
  if [ -z "$pbi_id" ]; then
    echo "Erreur : L'ID du PBI est requis." >&2
    echo "Usage: aklo arch <PBI_ID>"
    echo "Utilisez 'aklo arch --help' pour plus d'informations."
    exit 1
  fi
  
  # Validation de l'existence du PBI
  PBI_DIR="./$(get_config "PBI_DIR")"
  PBI_FILE=$(find "$PBI_DIR" -name "PBI-${pbi_id}-*.md" 2>/dev/null | head -1)
  
  if [ -z "$PBI_FILE" ]; then
    echo "Erreur : PBI-${pbi_id} introuvable dans $PBI_DIR" >&2
    echo "Vérifiez que le PBI existe avant de créer son architecture."
    echo "Fichiers PBI disponibles:"
    ls -la "$PBI_DIR"/ 2>/dev/null | grep "PBI-" || echo "  Aucun fichier PBI trouvé"
    exit 1
  fi
  
  # Génération de l'ID d'architecture
  ARCH_DIR="./$(get_config "ARCH_DIR")"
  mkdir -p "$ARCH_DIR"
  
  # Trouver le prochain ID d'architecture pour ce PBI
  ARCH_ID=1
  while [ -f "${ARCH_DIR}/ARCH-${pbi_id}-${ARCH_ID}-"*".md" ]; do
    ARCH_ID=$((ARCH_ID + 1))
  done
  
  if [ "$review_flag" = "--review" ]; then
    # Mode révision : chercher l'architecture existante
    EXISTING_ARCH=$(find "$ARCH_DIR" -name "ARCH-${pbi_id}-*-VALIDATED.md" 2>/dev/null | head -1)
    if [ -z "$EXISTING_ARCH" ]; then
      echo "Erreur : Aucune architecture validée trouvée pour PBI-${pbi_id}" >&2
      echo "Utilisez 'aklo arch ${pbi_id}' pour créer une nouvelle architecture."
      exit 1
    fi
    echo "🔄 Révision de l'architecture existante : $(basename "$EXISTING_ARCH")"
  fi
  
  ARCH_FILE="${ARCH_DIR}/ARCH-${pbi_id}-${ARCH_ID}-DRAFT.md"
  TODAY=$(date +%Y-%m-%d)
  
  echo "🏗️  Création de l'architecture ARCH-${pbi_id}-${ARCH_ID} pour PBI-${pbi_id}"
  
  # Génération du contenu selon le niveau d'assistance
  case "$agent_assistance" in
    "full")
      echo "🤖 Génération complète selon protocole ARCHITECTURE..."
      generate_arch_from_protocol "$ARCH_FILE" "$pbi_id" "$ARCH_ID" "$TODAY" "$PBI_FILE" "full"
      ;;
    "skeleton")
      echo "📝 Structure protocole à compléter..."
      generate_arch_from_protocol "$ARCH_FILE" "$pbi_id" "$ARCH_ID" "$TODAY" "$PBI_FILE" "skeleton"
      ;;
    "minimal")
      echo "🔧 Structure minimale selon protocole..."
      generate_arch_from_protocol "$ARCH_FILE" "$pbi_id" "$ARCH_ID" "$TODAY" "$PBI_FILE" "minimal"
      ;;
  esac
  
  # Mise à jour du journal si activée
  if [ "$auto_journal" = "true" ]; then
    update_journal "ARCHITECTURE" "Création document" "Architecture ARCH-${pbi_id}-${ARCH_ID} pour PBI-${pbi_id}" "ARCH-${pbi_id}-${ARCH_ID}-DRAFT.md"
  fi
  
  echo ""
  echo "✅ ARCH-${pbi_id}-${ARCH_ID}-DRAFT.md créé avec succès !"
  echo "📍 Fichier: $ARCH_FILE"
  echo ""
  echo "Prochaines étapes:"
  echo "  1. Analyser le problème architectural"
  echo "  2. Évaluer 2-3 options d'architecture"
  echo "  3. Documenter les compromis (trade-offs)"
  echo "  4. Soumettre pour validation"
  echo "  5. Mettre à jour les Tasks après validation"
}

# ===== FONCTIONS ARCH OBSOLÈTES SUPPRIMÉES =====
# Les fonctions generate_arch_full, generate_arch_skeleton, generate_arch_minimal
# ont été supprimées car remplacées par le parser générique dynamique.

# Fonction de génération ARCH - Parser dynamique du protocole ARCHITECTURE
generate_arch_from_protocol() {
  local file="$1"
  local pbi_id="$2"
  local arch_id="$3"
  local date="$4"
  local pbi_file="$5"
  local assistance_level="$6"
  
  # Extraire le titre du PBI (nettoyer les caractères spéciaux)
  local pbi_title=$(grep "^# PBI-${pbi_id}" "$pbi_file" 2>/dev/null | sed 's/^# PBI-[0-9]* : //' | tr -d '\n\r' || echo "Architecture pour PBI-${pbi_id}")
  
  # Variables contextuelles pour le parser générique
  local arch_full_id="${pbi_id}-${arch_id}"
  local context_vars="id=${arch_full_id},title=${pbi_title},date=${date},status=DRAFT,pbi_id=${pbi_id},arch_id=${arch_id}"
  

  
  # Génération dynamique depuis le protocole
  parse_and_generate_artefact "02-ARCHITECTURE" "ARCH" "$assistance_level" "$file" "$context_vars"
  
  # Si le parser générique échoue, afficher une erreur explicite
  if [ $? -ne 0 ]; then
    echo "❌ Erreur : Échec de génération ARCH depuis le protocole" >&2
    echo "   Vérifiez l'intégrité du protocole ARCHITECTURE" >&2
    return 1
  fi
}

# ===== FONCTION ARCH STATIC_FALLBACK SUPPRIMÉE =====
# La fonction generate_arch_static_fallback a été supprimée car remplacée 
# par le parser générique dynamique.

# Commande: dev - Développement TDD d'une Task
command_dev() {
  local task_id="$1"
  local agent_assistance=$(get_config "AGENT_ASSISTANCE" || echo "full")
  local auto_journal=$(get_config "AUTO_JOURNAL" || echo "true")
  
  case "$task_id" in
    "--help"|"help"|"")
      echo "Usage: aklo dev <TASK_ID>"
      echo ""
      echo "Démarre le développement TDD d'une Task selon le protocole DÉVELOPPEMENT."
      echo ""
      echo "Arguments:"
      echo "  TASK_ID    ID de la task (format: PBI_ID-TASK_ID, ex: 1-2)"
      echo ""
      echo "Options:"
      echo "  --no-agent     Assistance minimale (skeleton)"
      echo "  --no-journal   Désactiver la mise à jour du journal"
      echo ""
      echo "Exemples:"
      echo "  aklo dev 1-1              # Développer TASK-1-1"
      echo "  aklo dev 2-3 --no-agent   # Développer TASK-2-3 en mode minimal"
      echo ""
      echo "Prérequis:"
      echo "  - La Task doit exister avec le statut TODO"
      echo "  - Le répertoire doit être un projet Git"
      echo ""
      echo "Workflow:"
      echo "  1. Validation de la Task (statut TODO)"
      echo "  2. Création de la branche feature/task-[PBI_ID]-[TASK_ID]"
      echo "  3. Changement de statut TODO → IN_PROGRESS"
      echo "  4. Présentation du plan de vol développement TDD"
      echo "  5. Guidage dans le cycle TDD (RED-GREEN-BLUE)"
      return 0
      ;;
  esac

  # Validation du format TASK_ID
  if [[ ! "$task_id" =~ ^[0-9]+-[0-9]+$ ]]; then
    echo "❌ Erreur : Format TASK_ID invalide."
    echo "   Format attendu: PBI_ID-TASK_ID (ex: 1-2)"
    echo "   Reçu: '$task_id'"
    return 1
  fi

  # Extraction PBI_ID et TASK_SEQ
  local pbi_id=$(echo "$task_id" | cut -d'-' -f1)
  local task_seq=$(echo "$task_id" | cut -d'-' -f2)
  
  # Recherche de la Task
  local tasks_dir="./$(get_config "TASKS_DIR")"
  local task_file=$(find "$tasks_dir" -name "TASK-${pbi_id}-${task_seq}-TODO.md" 2>/dev/null | head -1)
  
  if [ -z "$task_file" ]; then
    echo "❌ Erreur : Task TASK-${pbi_id}-${task_seq} introuvable avec statut TODO."
    echo "   Répertoire recherché: $tasks_dir"
    echo "   Fichier attendu: TASK-${pbi_id}-${task_seq}-TODO.md"
    echo ""
    echo "Vérifiez que:"
    echo "  1. La Task existe"
    echo "  2. Elle a le statut TODO (pas IN_PROGRESS ou DONE)"
    echo "  3. Le répertoire TASKS_DIR est correct dans .aklo.conf"
    return 1
  fi

  echo "🚀 Démarrage du développement TDD pour TASK-${pbi_id}-${task_seq}"
  echo "📁 Task trouvée: $task_file"
  
  # Vérification que nous sommes dans un repo Git
  if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "❌ Erreur : Ce répertoire n'est pas un dépôt Git."
    echo "   Le développement TDD nécessite Git pour la gestion des branches."
    return 1
  fi

  # Création de la branche feature
  local branch_name="feature/task-${pbi_id}-${task_seq}"
  echo "🌿 Création de la branche: $branch_name"
  
  if git show-ref --verify --quiet refs/heads/$branch_name; then
    echo "⚠️  La branche $branch_name existe déjà."
    echo "   Basculement vers la branche existante..."
    git checkout $branch_name
  else
    git checkout -b $branch_name
    if [ $? -ne 0 ]; then
      echo "❌ Erreur : Impossible de créer la branche $branch_name"
      return 1
    fi
  fi

  # Changement de statut TODO → IN_PROGRESS
  local new_task_file="${tasks_dir}/TASK-${pbi_id}-${task_seq}-IN_PROGRESS.md"
  echo "📝 Mise à jour du statut: TODO → IN_PROGRESS"
  
  mv "$task_file" "$new_task_file"
  if [ $? -ne 0 ]; then
    echo "❌ Erreur : Impossible de changer le statut de la Task"
    git checkout -
    return 1
  fi

  # Mise à jour du journal si activé
  if [ "$auto_journal" = "true" ]; then
    update_journal "DÉVELOPPEMENT" "Démarrage développement TDD TASK-${pbi_id}-${task_seq}" "Branche: $branch_name, Statut: TODO → IN_PROGRESS" "TASK-${pbi_id}-${task_seq}-IN_PROGRESS.md"
  fi

  echo ""
  echo "✅ Environnement de développement TDD préparé !"
  echo ""
  echo "📋 PLAN DE VOL DÉVELOPPEMENT TDD"
  echo "════════════════════════════════════════════════════════════════"
  echo "🎯 Objectif: Implémenter TASK-${pbi_id}-${task_seq} selon méthodologie TDD"
  echo ""
  echo "📁 Fichiers:"
  echo "   • Task: $new_task_file"
  echo "   • Branche: $branch_name"
  echo "   • Statut: IN_PROGRESS"
  echo ""
  echo "🔄 Cycle TDD à suivre:"
  echo "   1. 🔴 RED:   Écrire un test qui échoue"
  echo "   2. 🟢 GREEN: Écrire le code minimum pour réussir"
  echo "   3. 🔵 BLUE:  Refactoriser et valider la qualité"
  echo "   4. ♻️  ITÉRER: Répéter jusqu'à completion"
  echo ""
  echo "📋 Validation finale requise:"
  echo "   • Definition of Done complètement cochée"
  echo "   • Tous les tests passent"
  echo "   • Linter et typage sans erreur"
  echo "   • Code review et approbation"
  echo ""
  echo "🎯 Prochaines étapes:"
  echo "   1. Lire la Task: cat '$new_task_file'"
  echo "   2. Identifier la première fonctionnalité à implémenter"
  echo "   3. Commencer le cycle TDD"
  echo "   4. Utiliser 'aklo submit-task' quand terminé"
  echo ""
  echo "💡 Conseils:"
  echo "   • Restez sur la branche $branch_name"
  echo "   • Commitez régulièrement vos avancées"
  echo "   • Respectez les principes SOLID"
  echo "   • Documentez votre code (JSDoc/TSDoc)"
}

# Commande: debug - Diagnostic et correction de bugs
command_debug() {
  local title="$1"
  local agent_assistance=$(get_config "AGENT_ASSISTANCE" || echo "full")
  local auto_journal=$(get_config "AUTO_JOURNAL" || echo "true")
  
  case "$title" in
    "--help"|"help"|"")
      echo "Usage: aklo debug \"<titre du problème>\""
      echo ""
      echo "Diagnostic et correction de bugs selon le protocole DEBOGAGE."
      echo ""
      echo "Arguments:"
      echo "  titre      Description du problème à diagnostiquer (requis)"
      echo ""
      echo "Options:"
      echo "  --no-agent     Assistance minimale (skeleton)"
      echo "  --no-journal   Désactiver la mise à jour du journal"
      echo ""
      echo "Exemples:"
      echo "  aklo debug \"Login impossible avec utilisateur admin\""
      echo "  aklo debug \"Timeout API payment\" --no-agent"
      echo ""
      echo "Workflow:"
      echo "  1. Création du rapport DEBUG-[ID]-INVESTIGATING.md"
      echo "  2. Documentation du problème et étapes de reproduction"
      echo "  3. Formulation d'hypothèses initiales"
      echo "  4. Investigation itérative avec instrumentation"
      echo "  5. Analyse de la cause racine (root cause)"
      echo "  6. Plan de correction et validation"
      echo "  7. Implémentation via protocole DÉVELOPPEMENT"
      return 0
      ;;
    --no-agent)
      agent_assistance="skeleton"
      title="$2"
      ;;
    --no-journal)
      auto_journal="false"
      title="$2"
      ;;
  esac

  if [ -z "$title" ]; then
    echo "❌ Erreur : Le titre du problème est requis." >&2
    echo "Usage: aklo debug \"<titre du problème>\""
    echo "Utilisez 'aklo debug --help' pour plus d'informations."
    return 1
  fi

  # Génération de l'ID unique basé sur le titre et la date
  local date_id=$(date +%Y%m%d)
  local title_slug=$(echo "$title" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
  local debug_id="${title_slug}-${date_id}"
  
  # Préparation des répertoires
  local debug_dir="$(get_config "DEBUG_DIR" || echo "docs/backlog/03-debug")"
  
  # Assurer que le répertoire existe (chemin absolu si besoin)
  if [ ! -d "$debug_dir" ]; then
    mkdir -p "$debug_dir" 2>/dev/null || true
  fi
  
  local debug_file="${debug_dir}/DEBUG-${debug_id}-INVESTIGATING.md"
  local today=$(date +%Y-%m-%d)
  
  # Vérification si le rapport existe déjà
  if [ -f "$debug_file" ]; then
    echo "⚠️  Un rapport de débogage existe déjà pour ce problème :"
    echo "   📁 $debug_file"
    echo ""
    echo "Options :"
    echo "  1. Modifier le titre pour créer un nouveau rapport"
    echo "  2. Continuer avec le rapport existant"
    return 1
  fi

  echo "🐛 Création du rapport de débogage DEBUG-${debug_id}"
  echo "📁 Problème: $title"
  
  # Génération du rapport selon le niveau d'assistance
  generate_debug_from_protocol "$debug_file" "$debug_id" "$title" "$today" "$agent_assistance"
  
  # Mise à jour du journal si activée
  if [ "$auto_journal" = "true" ]; then
    update_journal "DEBOGAGE" "Initialisation investigation DEBUG-${debug_id}" "Problème: $title" "DEBUG-${debug_id}-INVESTIGATING.md"
  fi

  echo ""
  echo "✅ DEBUG-${debug_id}-INVESTIGATING.md créé avec succès !"
  echo "📍 Fichier: $debug_file"
  echo ""
  echo "🔍 Prochaines étapes:"
  echo "  1. Documenter les étapes de reproduction"
  echo "  2. Formuler les hypothèses initiales"
  echo "  3. Commencer l'investigation itérative"
  echo "  4. Identifier la cause racine"
  echo "  5. Proposer un plan de correction"
  echo "  6. Implémenter via 'aklo dev' après validation"
}

# Commande: review - Revue de code assistée
command_review() {
  local target="$1"
  local agent_assistance=$(get_config "AGENT_ASSISTANCE" || echo "full")
  local auto_journal=$(get_config "AUTO_JOURNAL" || echo "true")

  case "$target" in
    "--help"|"help"|"")
      echo "Usage: aklo review <TASK_ID|COMMIT|PR> [--checklist]"
      echo ""
      echo "Revue de code assistée selon le protocole REVUE-DE-CODE."
      echo ""
      echo "Arguments:"
      echo "  TASK_ID    ID de la task à réviser (format: PBI_ID-TASK_ID, ex: 1-2)"
      echo "  COMMIT     Hash du commit à réviser (ex: abc123f)"
      echo "  PR         Numéro de PR à réviser (ex: pr-42)"
      echo ""
      echo "Options:"
      echo "  --checklist    Mode checklist détaillée pour validation"
      echo "  --no-agent     Assistance minimale (skeleton)"
      echo "  --no-journal   Désactiver la mise à jour du journal"
      echo ""
      echo "Exemples:"
      echo "  aklo review 1-2              # Réviser la Task 1-2"
      echo "  aklo review abc123f          # Réviser un commit spécifique"
      echo "  aklo review pr-42            # Réviser une Pull Request"
      echo "  aklo review 1-2 --checklist  # Mode checklist détaillée"
      echo ""
      echo "Workflow:"
      echo "  1. Analyse du diff de code"
      echo "  2. Vérification conformité protocole DÉVELOPPEMENT"
      echo "  3. Évaluation principes SOLID et qualité"
      echo "  4. Génération rapport REVIEW-[ID].md"
      echo "  5. Classification des observations (CRITICAL/MAJOR/MINOR)"
      exit 0
      ;;
    *)
      # Parsing des arguments
      shift
      local checklist_mode=false
      while [ $# -gt 0 ]; do
        case "$1" in
          --checklist)
            checklist_mode=true
            ;;
          --no-agent)
            agent_assistance="skeleton"
            ;;
          --no-journal)
            auto_journal="false"
            ;;
          *)
            echo "Argument inconnu: $1" >&2
            exit 1
            ;;
        esac
        shift
      done
      ;;
  esac

  if [ -z "$target" ]; then
    echo "Erreur : Cible de revue requise (TASK_ID, COMMIT ou PR)." >&2
    echo "Utilisez 'aklo review --help' pour plus d'informations."
    exit 1
  fi

  # Génération de l'ID de review
  REVIEW_DIR="./$(get_config "REVIEWS_DIR" || echo "docs/backlog/03-reviews")"
  mkdir -p "$REVIEW_DIR"

  # Déterminer le type de cible et formater l'ID
  local review_id=""
  if [[ "$target" =~ ^[0-9]+-[0-9]+$ ]]; then
    # Format TASK_ID (ex: 1-2)
    review_id="task-${target}"
  elif [[ "$target" =~ ^pr-[0-9]+$ ]]; then
    # Format PR (ex: pr-42)
    review_id="$target"
  elif [[ "$target" =~ ^[a-f0-9]{6,40}$ ]]; then
    # Format commit hash
    review_id="commit-${target:0:7}"
  else
    # Format libre
    review_id="$target"
  fi

  REVIEW_FILE="${REVIEW_DIR}/REVIEW-${review_id}.md"
  TODAY=$(date +%Y-%m-%d)

  echo "🔍 Création de la revue REVIEW-${review_id} pour: $target"

  # Génération du contenu selon le niveau d'assistance
  case "$agent_assistance" in
    "full")
      echo "🤖 Génération complète selon protocole REVUE-DE-CODE..."
      generate_review_from_protocol "$REVIEW_FILE" "$review_id" "$target" "$TODAY" "full"
      ;;
    "skeleton")
      echo "📝 Structure protocole à compléter..."
      generate_review_from_protocol "$REVIEW_FILE" "$review_id" "$target" "$TODAY" "skeleton"
      ;;
    "minimal")
      echo "🔧 Structure minimale selon protocole..."
      generate_review_from_protocol "$REVIEW_FILE" "$review_id" "$target" "$TODAY" "minimal"
      ;;
  esac

  # Mise à jour du journal si activée
  if [ "$auto_journal" = "true" ]; then
    update_journal "REVIEW" "Revue de code: $target" "REVIEW-${review_id}.md"
  fi

  echo ""
  echo "✅ REVIEW-${review_id}.md créé avec succès !"
  echo "📍 Fichier: $REVIEW_FILE"
  echo ""
  echo "🔍 Prochaines étapes:"
  echo "  1. Analyser le diff de code concerné"
  echo "  2. Remplir la checklist de conformité"
  echo "  3. Documenter les observations par criticité"
  echo "  4. Présenter le rapport au développeur"
  echo "  5. Fusionner après corrections (aklo merge-task)"
}

# Commande: refactor - Refactoring sécurisé de code
command_refactor() {
  local scope="$1"
  local agent_assistance=$(get_config "AGENT_ASSISTANCE" || echo "full")
  local auto_journal=$(get_config "AUTO_JOURNAL" || echo "true")

  case "$scope" in
    "--help"|"help"|"")
      echo "Usage: aklo refactor \"<description>\" [--safe]"
      echo ""
      echo "Refactoring sécurisé de code selon le protocole REFACTORING."
      echo ""
      echo "Arguments:"
      echo "  description  Description du refactoring à effectuer (requis)"
      echo ""
      echo "Options:"
      echo "  --safe         Mode sécurisé avec validation continue"
      echo "  --no-agent     Assistance minimale (skeleton)"
      echo "  --no-journal   Désactiver la mise à jour du journal"
      echo ""
      echo "Exemples:"
      echo "  aklo refactor \"Extraire logique métier en service\""
      echo "  aklo refactor \"Simplifier fonction de validation\" --safe"
      echo "  aklo refactor \"Réorganiser structure des classes\""
      echo ""
      echo "Workflow:"
      echo "  1. Diagnostic du code smell et problème identifié"
      echo "  2. Stratégie de refactoring avec plan d'action"
      echo "  3. Vérification couverture de tests (prérequis)"
      echo "  4. Exécution par micro-changements avec validation"
      echo "  5. Preuve de non-régression et finalisation"
      echo ""
      echo "Statuts:"
      echo "  ANALYSIS     - Diagnostic en cours"
      echo "  REFACTORING  - Exécution du plan approuvé"
      echo "  DONE         - Refactoring terminé et validé"
      exit 0
      ;;
    *)
      # Parsing des arguments
      shift
      local safe_mode=false
      while [ $# -gt 0 ]; do
        case "$1" in
          --safe)
            safe_mode=true
            ;;
          --no-agent)
            agent_assistance="skeleton"
            ;;
          --no-journal)
            auto_journal="false"
            ;;
          *)
            echo "Argument inconnu: $1" >&2
            exit 1
            ;;
        esac
        shift
      done
      ;;
  esac

  if [ -z "$scope" ]; then
    echo "Erreur : Description du refactoring requise." >&2
    echo "Utilisez 'aklo refactor --help' pour plus d'informations."
    exit 1
  fi

  # Génération de l'ID de refactoring
  REFACTOR_DIR="./$(get_config "REFACTOR_DIR" || echo "docs/backlog/05-refactor")"
  mkdir -p "$REFACTOR_DIR"

  # Générer l'ID selon le protocole (titre-slugifié-YYYYMMDD)
  refactor_id=$(detect_id_pattern "05-REFACTORING" "$scope")
  REFACTOR_FILE="${REFACTOR_DIR}/REFACTOR-${refactor_id}-ANALYSIS.md"
  TODAY=$(date +%Y-%m-%d)

  echo "🔧 Création du refactoring REFACTOR-${refactor_id}"
  echo "📋 Description: $scope"

  # Génération du contenu selon le niveau d'assistance
  case "$agent_assistance" in
    "full")
      echo "🤖 Génération complète selon protocole REFACTORING..."
      generate_refactor_from_protocol "$REFACTOR_FILE" "$refactor_id" "$scope" "$TODAY" "full"
      ;;
    "skeleton")
      echo "📝 Structure protocole à compléter..."
      generate_refactor_from_protocol "$REFACTOR_FILE" "$refactor_id" "$scope" "$TODAY" "skeleton"
      ;;
    "minimal")
      echo "🔧 Structure minimale selon protocole..."
      generate_refactor_from_protocol "$REFACTOR_FILE" "$refactor_id" "$scope" "$TODAY" "minimal"
      ;;
  esac

  # Mise à jour du journal si activée
  if [ "$auto_journal" = "true" ]; then
    update_journal "REFACTOR" "Refactoring: $scope" "REFACTOR-${refactor_id}-ANALYSIS.md"
  fi

  echo ""
  echo "✅ REFACTOR-${refactor_id}-ANALYSIS.md créé avec succès !"
  echo "📍 Fichier: $REFACTOR_FILE"
  echo ""
  echo "🔧 Prochaines étapes:"
  echo "  1. Diagnostiquer le code smell identifié"
  echo "  2. Définir la stratégie et plan d'action"
  echo "  3. Vérifier la couverture de tests (OBLIGATOIRE)"
  echo "  4. Soumettre le plan pour validation"
  echo "  5. Exécuter le refactoring par micro-changements"
  echo ""
  echo "⚠️  RAPPEL: La couverture de tests est un prérequis non négociable"
}

# Commande: hotfix - Correction d'urgence en production
command_hotfix() {
  local issue="$1"
  local agent_assistance=$(get_config "AGENT_ASSISTANCE" || echo "full")
  local auto_journal=$(get_config "AUTO_JOURNAL" || echo "true")

  case "$issue" in
    "--help"|"help"|"")
      echo "Usage: aklo hotfix \"<description du bug critique>\" [--emergency]"
      echo ""
      echo "Correction d'urgence en production selon le protocole HOTFIX."
      echo ""
      echo "Arguments:"
      echo "  description  Description du bug critique en production (requis)"
      echo ""
      echo "Options:"
      echo "  --emergency    Mode urgence avec validation accélérée"
      echo "  --no-agent     Assistance minimale (skeleton)"
      echo "  --no-journal   Désactiver la mise à jour du journal"
      echo ""
      echo "Exemples:"
      echo "  aklo hotfix \"Login impossible pour nouveaux utilisateurs\""
      echo "  aklo hotfix \"Panier d'achat inaccessible\" --emergency"
      echo "  aklo hotfix \"API payment timeout en production\""
      echo ""
      echo "Workflow d'urgence:"
      echo "  1. Validation de l'urgence réelle (production bloquée)"
      echo "  2. Création branche hotfix depuis tag de production"
      echo "  3. Diagnostic rapide de la cause racine"
      echo "  4. Correction minimale et ciblée"
      echo "  5. Déploiement d'urgence avec nouveau tag de patch"
      echo "  6. Planification post-mortem et synchronisation"
      echo ""
      echo "Statuts:"
      echo "  INVESTIGATING - Analyse cause racine en cours"
      echo "  AWAITING_FIX  - Plan de correction en attente de validation"
      echo "  DEPLOYING     - Correctif validé, déploiement en cours"
      echo "  RESOLVED      - Hotfix en production, post-mortem planifié"
      echo ""
      echo "⚠️  ATTENTION: Réservé aux bugs critiques bloquant la production"
      exit 0
      ;;
    *)
      # Parsing des arguments
      shift
      local emergency_mode=false
      while [ $# -gt 0 ]; do
        case "$1" in
          --emergency)
            emergency_mode=true
            ;;
          --no-agent)
            agent_assistance="skeleton"
            ;;
          --no-journal)
            auto_journal="false"
            ;;
          *)
            echo "Argument inconnu: $1" >&2
            exit 1
            ;;
        esac
        shift
      done
      ;;
  esac

  if [ -z "$issue" ]; then
    echo "Erreur : Description du bug critique requise." >&2
    echo "Utilisez 'aklo hotfix --help' pour plus d'informations."
    exit 1
  fi

  # Validation de l'urgence
  echo "🚨 HOTFIX D'URGENCE DÉTECTÉ"
  echo "📋 Bug critique: $issue"
  echo ""
  echo "⚠️  VALIDATION REQUISE:"
  echo "   Ce bug bloque-t-il réellement la production ?"
  echo "   Cause-t-il une perte de revenus immédiate ?"
  echo "   Les utilisateurs sont-ils impactés de manière critique ?"
  echo ""
  read -p "Confirmer l'urgence réelle (y/N): " confirm
  if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
    echo "❌ Hotfix annulé. Utilisez 'aklo debug' pour un diagnostic normal."
    exit 1
  fi

  # Génération de l'ID de hotfix
  HOTFIX_DIR="./$(get_config "HOTFIX_DIR" || echo "docs/backlog/08-hotfixes")"
  mkdir -p "$HOTFIX_DIR"

  # Générer l'ID selon le protocole (description-slugifiée-YYYYMMDD)
  hotfix_id=$(detect_id_pattern "10-HOTFIX" "$issue")
  HOTFIX_FILE="${HOTFIX_DIR}/HOTFIX-${hotfix_id}.md"
  TODAY=$(date +%Y-%m-%d)
  TIME=$(date +%H:%M)

  echo ""
  echo "🚨 Création du hotfix HOTFIX-${hotfix_id}"
  echo "⏰ Urgence confirmée - Procédure accélérée activée"

  # Génération du contenu selon le niveau d'assistance
  case "$agent_assistance" in
    "full")
      echo "🤖 Génération complète selon protocole HOTFIX..."
      generate_hotfix_from_protocol "$HOTFIX_FILE" "$hotfix_id" "$issue" "$TODAY" "$TIME" "full"
      ;;
    "skeleton")
      echo "📝 Structure protocole à compléter..."
      generate_hotfix_from_protocol "$HOTFIX_FILE" "$hotfix_id" "$issue" "$TODAY" "$TIME" "skeleton"
      ;;
    "minimal")
      echo "🔧 Structure minimale selon protocole..."
      generate_hotfix_from_protocol "$HOTFIX_FILE" "$hotfix_id" "$issue" "$TODAY" "$TIME" "minimal"
      ;;
  esac

  # Mise à jour du journal si activée
  if [ "$auto_journal" = "true" ]; then
    update_journal "HOTFIX" "URGENCE: $issue" "HOTFIX-${hotfix_id}.md"
  fi

  echo ""
  echo "✅ HOTFIX-${hotfix_id}.md créé avec succès !"
  echo "📍 Fichier: $HOTFIX_FILE"
  echo ""
  echo "🚨 PROCÉDURE D'URGENCE - Prochaines étapes:"
  echo "  1. Identifier le tag de production actuellement déployé"
  echo "  2. Créer branche hotfix depuis ce tag"
  echo "  3. Diagnostiquer rapidement la cause racine"
  echo "  4. Implémenter la correction MINIMALE"
  echo "  5. Déployer d'urgence avec nouveau tag de patch"
  echo "  6. Planifier le post-mortem (PBI/TASK de correction définitive)"
  echo ""
  echo "⚡ RAPPEL: Correction minimale uniquement - Pas de refactoring !"
  echo "⚡ RAPPEL: Planifier le post-mortem après stabilisation"
}

# Fonction de génération HOTFIX - Parser dynamique du protocole HOTFIX
generate_debug_from_protocol() {
  local file="$1"
  local debug_id="$2"
  local title="$3"
  local date="$4"
  local assistance_level="$5"
  
  # Variables contextuelles pour le parser générique
  local context_vars="id=${debug_id},title=${title},date=${date},status=INVESTIGATING"
  
  # Génération dynamique depuis le protocole
  parse_and_generate_artefact "04-DEBOGAGE" "DEBUG" "$assistance_level" "$file" "$context_vars"
  
  # Si le parser générique échoue, afficher une erreur explicite
  if [ $? -ne 0 ]; then
    echo "❌ Erreur : Échec de génération DEBUG depuis le protocole" >&2
    echo "   Vérifiez l'intégrité du protocole DEBOGAGE" >&2
    return 1
  fi
}

# ===== FONCTION DEBUG STATIC_FALLBACK SUPPRIMÉE =====
# La fonction generate_debug_static_fallback a été supprimée car remplacée
# par le parser générique dynamique.

generate_review_from_protocol() {
  local file="$1"
  local review_id="$2"
  local target="$3"
  local date="$4"
  local assistance_level="$5"

  # Variables contextuelles pour le parser générique
  local context_vars="review_id:${review_id},target:${target},date:${date},status:PENDING"

  # Appel du parser générique
  parse_and_generate_artefact "07-REVUE-DE-CODE" "REVIEW" "$assistance_level" "$file" "$context_vars"

  if [ $? -ne 0 ]; then
    echo "❌ Erreur : Échec de génération REVIEW depuis le protocole" >&2
    echo "   Vérifiez l'intégrité du protocole REVUE-DE-CODE" >&2
    return 1
  fi
}

generate_refactor_from_protocol() {
  local file="$1"
  local refactor_id="$2"
  local description="$3"
  local date="$4"
  local assistance_level="$5"

  # Variables contextuelles pour le parser générique
  local context_vars="refactor_id:${refactor_id},description:${description},date:${date},status:ANALYSIS"

  # Appel du parser générique
  parse_and_generate_artefact "05-REFACTORING" "REFACTOR" "$assistance_level" "$file" "$context_vars"

  if [ $? -ne 0 ]; then
    echo "❌ Erreur : Échec de génération REFACTOR depuis le protocole" >&2
    echo "   Vérifiez l'intégrité du protocole REFACTORING" >&2
    return 1
  fi
}

generate_hotfix_from_protocol() {
  local file="$1"
  local hotfix_id="$2"
  local issue="$3"
  local date="$4"
  local time="$5"
  local assistance_level="$6"

  # Variables contextuelles pour le parser générique
  local context_vars="hotfix_id:${hotfix_id},issue:${issue},date:${date},time:${time},status:INVESTIGATING"

  # Appel du parser générique
  parse_and_generate_artefact "10-HOTFIX" "HOTFIX" "$assistance_level" "$file" "$context_vars"

  if [ $? -ne 0 ]; then
    echo "❌ Erreur : Échec de génération HOTFIX depuis le protocole" >&2
    echo "   Vérifiez l'intégrité du protocole HOTFIX" >&2
    return 1
  fi
}

#==============================================================================
# SECTION 5 : DISPATCH DES COMMANDES
#==============================================================================

# Fonction d'aide
show_help() {
  echo "🤖 Aklo Protocol - Interface Unifiée"
  echo ""
  echo "USAGE:"
  echo "  aklo <command> [options]"
  echo ""
  echo "🔧 COMMANDES SYSTÈME:"
  echo "  status [--brief|--detailed|--json]  Tableau de bord du projet"
  echo "  validate [path]                     Validation projet/artefacts"
  echo "  mcp setup|restart|watch             Gestion serveurs MCP"
  echo "  template list|create|apply          Gestion des templates"
  echo "  install-ux                          Installation améliorations UX"
  echo ""
  echo "🚀 COMMANDES DÉVELOPPEMENT:"
  echo "  propose-pbi \"<titre>\" [--template]  Création d'un Product Backlog Item"
  echo "  pbi \"<titre>\"                       Alias pour propose-pbi"
  echo "  plan <PBI_ID> [--no-agent]          Planification avec commit atomique"
  echo "  arch <PBI_ID> [--review]            Conception d'architecture logicielle"
  echo "  dev <TASK_ID> [--no-journal]        Développement TDD d'une Task"
  echo "  debug \"<titre>\" [--no-agent]        Diagnostic et correction de bugs"
  echo "  review <TASK_ID|COMMIT> [--checklist] Revue de code assistée"
  echo "  refactor \"<description>\" [--safe]   Refactoring sécurisé de code"
  echo "  hotfix \"<bug critique>\" [--emergency] Correction d'urgence production"
  echo "  release <type> [--dry-run]          Release (major|minor|patch)"
  echo ""
  echo "📚 AIDE ET INFORMATION:"
  echo "  help                                Affiche cette aide"
  echo "  <command> --help                    Aide spécifique à une commande"
  echo ""
  echo "🎯 NIVEAUX D'ASSISTANCE:"
  echo "  full      - Génération complète par l'IA (défaut)"
  echo "  skeleton  - Structure vide à compléter (--no-agent)"
  echo "  minimal   - IDs uniquement (via .aklo.conf uniquement)"
  echo ""
  echo "⚙️ CONFIGURATION:"
  echo "  .aklo.conf              Configuration locale du projet"
  echo "    agent_assistance=full|skeleton|minimal"
  echo "    auto_journal=true|false"
  echo ""
  echo "📖 EXEMPLES:"
  echo "  aklo status             # Tableau de bord complet"
  echo "  aklo mcp restart        # Redémarrer les serveurs MCP"
  echo "  aklo plan 42            # Planifier le PBI 42"
  echo "  aklo dev 1-2            # Développer la Task 1-2 en TDD"
  echo "  aklo validate           # Valider le projet"
  echo ""
  echo "💡 Astuce: Utilisez 'aklo <command> --help' pour l'aide détaillée."
}

# Dispatch principal
case "${1:-help}" in
  "plan")
    shift
    command_plan "$@"
    ;;
  "release")
    shift
    command_release "$@"
    ;;
  "status")
    shift
    command_status "$@"
    ;;
  "mcp")
    shift
    command_mcp "$@"
    ;;
  "validate")
    shift
    command_validate "$@"
    ;;
  "template")
    shift
    command_template "$@"
    ;;
  "install-ux")
    shift
    command_install_ux "$@"
    ;;
  "propose-pbi"|"pbi")
    shift
    command_propose_pbi "$@"
    ;;
  "arch")
    shift
    command_arch "$@"
    ;;
  "dev")
    shift
    command_dev "$@"
    ;;
  "debug")
    shift
    command_debug "$@"
    ;;
  "review")
    shift
    command_review "$@"
    ;;
  "refactor")
    shift
    command_refactor "$@"
    ;;
  "hotfix")
    shift
    command_hotfix "$@"
    ;;
  "help"|"--help"|"-h")
    show_help
    ;;
  *)
    echo "Commande inconnue: $1"
    echo "Utilisez 'aklo help' pour voir les commandes disponibles."
    exit 1
    ;;
esac