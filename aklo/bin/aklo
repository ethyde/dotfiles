#!/usr/bin/env bash
#==============================================================================
# AKLO - CHARTE AUTOMATION TOOL (V4.3 - STABLE FINALE ET COMPL√àTE)
#==============================================================================

main() {
    # --- D√âFINITION FIABLE DU CONTEXTE ---
    local AKLO_TOOL_REAL_PATH
    AKLO_TOOL_REAL_PATH=$(realpath "$0")
    export AKLO_TOOL_DIR
    AKLO_TOOL_DIR=$(dirname "$(dirname "$AKLO_TOOL_REAL_PATH")")
    export AKLO_PROJECT_ROOT
    AKLO_PROJECT_ROOT=$(pwd)

    # --- PARSING DES ARGUMENTS ---
    local command="$1"
    shift
    export AKLO_DRY_RUN=false
    local args=()
    for arg in "$@"; do
        if [ "$arg" = "--dry-run" ]; then
            export AKLO_DRY_RUN=true
        else
            args+=("$arg")
        fi
    done
    set -- "${args[@]}"

    # --- CHARGEMENT COMPLET DES MODULES ---
    local MODULES_DIR="${AKLO_TOOL_DIR}/modules"
    source "${MODULES_DIR}/core/config.sh"
    source "${MODULES_DIR}/core/parser.sh"
    source "${MODULES_DIR}/parser/parser_cached.sh"
    source "${MODULES_DIR}/cache/cache_functions.sh"
    source "${MODULES_DIR}/cache/cache_monitoring.sh"
    source "${MODULES_DIR}/io/extract_functions.sh"
    source "${MODULES_DIR}/ux/help-system.sh"
    source "${MODULES_DIR}/commands/system_commands.sh"
    source "${MODULES_DIR}/commands/new_command.sh"
    source "${MODULES_DIR}/commands/pbi_commands.sh"
    source "${MODULES_DIR}/commands/task_commands.sh"
    source "${MODULES_DIR}/commands/start-task_command.sh"
    source "${MODULES_DIR}/commands/submit-task_command.sh"
    source "${MODULES_DIR}/commands/merge-task_command.sh"
    source "${MODULES_DIR}/commands/release_command.sh"
    source "${MODULES_DIR}/commands/hotfix_command.sh"
    source "${MODULES_DIR}/commands/debug_command.sh"
    source "${MODULES_DIR}/commands/refactor_command.sh"
    source "${MODULES_DIR}/commands/optimize_command.sh"
    source "${MODULES_DIR}/commands/security_command.sh"
    source "${MODULES_DIR}/commands/experiment_command.sh"
    source "${MODULES_DIR}/commands/docs_command.sh"
    source "${MODULES_DIR}/commands/scratchpad_command.sh"
    source "${MODULES_DIR}/commands/kb_command.sh"
    source "${MODULES_DIR}/commands/meta_command.sh"
    source "${MODULES_DIR}/commands/cache_command.sh"
    source "${MODULES_DIR}/commands/config_command.sh"
    source "${MODULES_DIR}/commands/monitor_command.sh"
    source "${MODULES_DIR}/commands/journal_command.sh"
    source "${MODULES_DIR}/commands/review_command.sh"
    source "${MODULES_DIR}/commands/arch_command.sh"
    source "${MODULES_DIR}/commands/analysis_command.sh"
    source "${MODULES_DIR}/commands/onboarding_command.sh"
    source "${MODULES_DIR}/commands/deprecation_command.sh"
    source "${MODULES_DIR}/commands/tracking_command.sh"
    source "${MODULES_DIR}/commands/task_new_command.sh"
    source "${MODULES_DIR}/commands/fast_track_command.sh"
    source "${MODULES_DIR}/commands/knowledge_base_command.sh"

    # --- INITIALISATION POST-CHARGEMENT ---
    init_cache_dir

    if [ "$AKLO_DRY_RUN" = true ]; then
        echo "üíß Mode DRY-RUN activ√©. Aucune modification ne sera effectu√©e."
    fi
    
    # --- GESTION DE L'AIDE APR√àS CHARGEMENT DES MODULES ---
    if [[ "$command" == "--help" || "$command" == "-h" || "$command" == "help" || -z "$command" ]]; then
        show_help
        return 0
    fi
    
    # --- DISPATCHER COMPLET ---
    local cmd_function="cmd_$(echo "$command" | tr '-' '_')"
    if declare -f "$cmd_function" >/dev/null; then
        "$cmd_function" "$@"
    else
        # Alias pour get_config (top-level)
        if [ "$command" = "get_config" ]; then
            cmd_get_config "$@"
            return $?
        fi
        echo "Erreur: Commande inconnue '$command'" >&2
        return 1
    fi
}

# Alias top-level : get_config
cmd_get_config() {
    # D√©l√®gue √† la sous-commande config get_config
    shift # on retire 'get_config' du tableau d'arguments
    cmd_config get_config "$@"
}

main "$@"
