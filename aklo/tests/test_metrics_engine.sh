#!/bin/bash

#==============================================================================
# Test Suite pour Metrics Engine - TASK-13-7
#
# Auteur: AI_Agent
# Version: 1.0
# Tests unitaires pour le syst√®me de m√©triques avanc√©es
#==============================================================================

# Configuration des tests
set -e
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"

# Chargement du framework de test
source "${SCRIPT_DIR}/test_framework.sh"

# Variables de test
TEST_METRICS_DB="/tmp/test_metrics_history.db"
TEST_CACHE_DIR="/tmp/aklo_test_cache"

# Nettoyage avant tests
setup_test_environment() {
    rm -f "${TEST_METRICS_DB}"
    rm -rf "${TEST_CACHE_DIR}"
    mkdir -p "${TEST_CACHE_DIR}"
    export AKLO_CACHE_DIR="${TEST_CACHE_DIR}"
    export AKLO_METRICS_DB="${TEST_METRICS_DB}"
}

# Nettoyage apr√®s tests
cleanup_test_environment() {
    rm -f "${TEST_METRICS_DB}"
    rm -rf "${TEST_CACHE_DIR}"
}

#==============================================================================
# Test 1: Initialisation du syst√®me de m√©triques
#==============================================================================
test_metrics_engine_initialization() {
    echo "=== Test: Initialisation du syst√®me de m√©triques ==="
    
    # Chargement du module
    source "${PROJECT_ROOT}/modules/core/metrics_engine.sh"
    
    # Test d'initialisation
    initialize_metrics_engine
    
    # V√©rifications
    assert_file_exists "${TEST_METRICS_DB}" "Base de donn√©es des m√©triques doit √™tre cr√©√©e"
    assert_function_exists "collect_loading_metrics" "Fonction collect_loading_metrics doit exister"
    assert_function_exists "track_performance_metrics" "Fonction track_performance_metrics doit exister"
    assert_function_exists "monitor_learning_efficiency" "Fonction monitor_learning_efficiency doit exister"
    
    echo "‚úì Initialisation du syst√®me de m√©triques r√©ussie"
}

#==============================================================================
# Test 2: Collecte des m√©triques de chargement
#==============================================================================
test_collect_loading_metrics() {
    echo "=== Test: Collecte des m√©triques de chargement ==="
    
    source "${PROJECT_ROOT}/modules/core/metrics_engine.sh"
    initialize_metrics_engine
    
    # Test de collecte de m√©triques
    local start_time=$(date +%s.%N)
    collect_loading_metrics "get_config" "MINIMAL" "cli" "${start_time}"
    
    # V√©rification que les m√©triques sont enregistr√©es
    assert_file_contains "${TEST_METRICS_DB}" "get_config" "M√©triques de get_config enregistr√©es"
    assert_file_contains "${TEST_METRICS_DB}" "MINIMAL" "Profil MINIMAL enregistr√©"
    
    echo "‚úì Collecte des m√©triques de chargement r√©ussie"
}

#==============================================================================
# Test 3: Suivi des performances par profil
#==============================================================================
test_track_performance_metrics() {
    echo "=== Test: Suivi des performances par profil ==="
    
    source "${PROJECT_ROOT}/modules/core/metrics_engine.sh"
    initialize_metrics_engine
    
    # Test de suivi des performances
    track_performance_metrics "plan" "NORMAL" "0.150" "success"
    track_performance_metrics "optimize" "FULL" "0.800" "success"
    
    # V√©rification des m√©triques de performance
    assert_file_contains "${TEST_METRICS_DB}" "plan" "M√©triques de plan enregistr√©es"
    assert_file_contains "${TEST_METRICS_DB}" "optimize" "M√©triques d'optimize enregistr√©es"
    
    echo "‚úì Suivi des performances par profil r√©ussi"
}

#==============================================================================
# Test 4: Monitoring de l'efficacit√© d'apprentissage
#==============================================================================
test_monitor_learning_efficiency() {
    echo "=== Test: Monitoring de l'efficacit√© d'apprentissage ==="
    
    source "${PROJECT_ROOT}/modules/core/metrics_engine.sh"
    initialize_metrics_engine
    
    # Test de monitoring d'apprentissage
    monitor_learning_efficiency "new_command" "NORMAL" "85" "prediction"
    
    # V√©rification des m√©triques d'apprentissage
    assert_file_contains "${TEST_METRICS_DB}" "new_command" "M√©triques d'apprentissage enregistr√©es"
    assert_file_contains "${TEST_METRICS_DB}" "prediction" "Type de d√©cision enregistr√©"
    
    echo "‚úì Monitoring de l'efficacit√© d'apprentissage r√©ussi"
}

#==============================================================================
# Test 5: G√©n√©ration de rapport d'usage
#==============================================================================
test_generate_usage_report() {
    echo "=== Test: G√©n√©ration de rapport d'usage ==="
    
    source "${PROJECT_ROOT}/modules/core/metrics_engine.sh"
    initialize_metrics_engine
    
    # Ajout de donn√©es de test
    collect_loading_metrics "get_config" "MINIMAL" "cli" "$(date +%s.%N)"
    track_performance_metrics "plan" "NORMAL" "0.150" "success"
    
    # Test de g√©n√©ration de rapport
    local report=$(generate_usage_report "last_hour")
    
    # V√©rifications
    assert_not_empty "$report" "Rapport d'usage g√©n√©r√©"
    echo "$report" | grep -q "get_config" || fail "Rapport doit contenir get_config"
    echo "$report" | grep -q "plan" || fail "Rapport doit contenir plan"
    
    echo "‚úì G√©n√©ration de rapport d'usage r√©ussie"
}

#==============================================================================
# Ex√©cution des tests
#==============================================================================
main() {
    echo "üöÄ D√©marrage des tests du Metrics Engine - TASK-13-7"
    
    setup_test_environment
    
    # Ex√©cution des tests
    test_metrics_engine_initialization
    test_collect_loading_metrics
    test_track_performance_metrics
    test_monitor_learning_efficiency
    test_generate_usage_report
    
    cleanup_test_environment
    
    echo "‚úÖ Tous les tests du Metrics Engine sont pass√©s avec succ√®s !"
}

# Ex√©cution si appel√© directement
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi