<?xml version="1.0" encoding="UTF-8"?>
<protocol name="planning">
   <description>
      This protocol is activated after a PBI is validated (status = AGREED). Its mission is to
      transform the functional requirement into an initial technical action plan by decomposing it
      into atomic, traceable tasks (TASK artefacts).
   </description>

   <section title="mission_and_deliverable">
      <sub_section title="mission">
         <introduction>
            The mission of this protocol is to break down a requirement (PBI, correction plan, etc.)
            into atomic, logical technical tasks (TASK artefacts).
         </introduction>
         <note>
            Decomposition is most often triggered by the PRODUCT OWNER protocol, but can also be
            required by DEPRECATION, SECURITY AUDIT, or any protocol needing a detailed technical
            action plan.
         </note>
      </sub_section>
      <sub_section title="expected_deliverable">
         <deliverable>
            One or more `TASK-[pbi_id]-[task_id]-TODO.xml` files created in
            `/docs/backlog/01-tasks/`, and a planning report summarizing the plan, listing all
            created tasks, and highlighting those requiring architectural review.
         </deliverable>
      </sub_section>
      <sub_section title="task_usage">
         <usage>
            A TASK is an atomic, actionable technical unit derived from a PBI. It must be specific,
            measurable, achievable, relevant, and time-boxed (SMART). Each TASK is traceable to its
            parent PBI and is the basis for all development, review, and tracking activities.
         </usage>
      </sub_section>
   </section>

   <section title="task_artefact_management_and_structure">
      <sub_section title="naming">
         <format>TASK-[pbi_id]-[task_id]-[status].xml</format>
         <details>
            <detail name="pbi_id">ID of the parent PBI, ensuring traceability.</detail>
            <detail name="task_id">Sequential identifier of the task within the PBI scope.</detail>
            <detail name="status">The status of the task in its lifecycle.</detail>
         </details>
      </sub_section>
      <sub_section title="statuses">
         <list>
            <item name="todo">Ready to be picked up.</item>
            <item name="in_progress">Being executed by a human_developer.</item>
            <item name="awaiting_review">Development finished, diff awaiting validation.</item>
            <item name="done">Commit has been made.</item>
            <item name="merged">Branch has been merged into main.</item>
         </list>
      </sub_section>
      <sub_section title="mandatory_task_artefact_structure">
         <artefact_template format="xml">
            <task pbi_id="[pbi_id]" task_id="[task_id]" status="todo" title="[title]">
               <metadata>
                  <parent_pbi>PBI-[pbi_id]</parent_pbi>
                  <arch_review_required>[yes|no]</arch_review_required>
                  <architecture_document optional="true">ARCH-[pbi_id]-1.xml</architecture_document>
                  <assignee>[assignee]</assignee>
                  <git_branch>feature/task-[pbi_id]-[task_id]</git_branch>
               </metadata>
               <content>
                  <technical_objective>
                     Clear, unambiguous description of the work to be done, files to modify/create,
                     and expected result.
                  </technical_objective>
                  <context_and_files>
                     Crucial section for the AI. Contains code snippets, file paths, data
                     structures, and any information needed to accomplish the task.
                  </context_and_files>
                  <ai_agent_instructions>
                     <description>Sequential and precise list of actions for the agent to execute.
                        Each step should be small and verifiable.</description>
                     <step number="1">Instruction 1...</step>
                     <step number="2">Instruction 2...</step>
                  </ai_agent_instructions>
                  <definition_of_done>
                     <criterion state="todo">The code is implemented according to instructions.</criterion>
                     <criterion state="todo">The code follows the project's coding standards.</criterion>
                     <criterion state="todo">Unit tests are written and pass successfully.</criterion>
                     <criterion state="todo">Documentation (docstring) is complete.</criterion>
                     <criterion state="todo">The code has been reviewed and approved.</criterion>
                  </definition_of_done>
               </content>
            </task>
         </artefact_template>
         <example>
            <task pbi_id="101" task_id="1" status="in_progress" title="Implement login form UI">
              <metadata>
                <parent_pbi>PBI-101</parent_pbi>
                <arch_review_required>no</arch_review_required>
                <assignee>alice</assignee>
                <git_branch>feature/task-101-1</git_branch>
              </metadata>
              <content>
                <technical_objective>
                  Create a login form with email and password fields, styled according to the design system.
                </technical_objective>
                <context_and_files>
                  File: `src/components/LoginForm.tsx`<br/>
                  Use the existing `Input` and `Button` components.<br/>
                  Follow the Figma design: `/designs/login-form.fig`.
                </context_and_files>
                <ai_agent_instructions>
                  <description>Step-by-step actions for the agent:</description>
                  <step number="1">Create the LoginForm component with email and password fields.</step>
                  <step number="2">Add validation for required fields.</step>
                  <step number="3">Style the form according to the design system.</step>
                </ai_agent_instructions>
                <definition_of_done>
                  <criterion state="done">Login form renders with email and password fields.</criterion>
                  <criterion state="in_progress">Validation is implemented for required fields.</criterion>
                  <criterion state="todo">Form matches the design system styles.</criterion>
                  <criterion state="todo">Code is reviewed and approved.</criterion>
                </definition_of_done>
              </content>
            </task>
          </example>
      </sub_section>
   </section>

   <section title="planning_procedure">
      <step number="1" type="analysis" title="pbi_appropriation">
         <description>
            Take as input a PBI with status AGREED. Deeply analyze acceptance criteria and
            constraints. Ask clarification questions to the human_developer if needed.
         </description>
      </step>
      <flight_plan required="true">
         <title>planning_flight_plan</title>
         <instruction>Before decomposing and creating tasks, the agent must present a detailed plan.</instruction>
         <objective>Decompose a PBI into atomic, traceable technical tasks</objective>
         <planned_actions>
            <item>Deep analysis of the parent PBI and its acceptance criteria</item>
            <item>Identification of technical components to modify/create</item>
            <item>Decomposition into SMART tasks</item>
            <item>Generation of sequential IDs for each task of the PBI</item>
            <item>Creation of `TASK-[pbi_id]-[task_id]-TODO.xml` files in `/docs/backlog/01-tasks/`</item>
            <item>Assessment of architectural review need for each task</item>
         </planned_actions>
         <affected_files>
            <item type="creation">/docs/backlog/01-tasks/TASK-[pbi_id]-[task_id]-TODO.xml</item>
            <item type="update">/docs/backlog/00-pbi/PBI-[pbi_id]-AGREED.xml</item>
         </affected_files>
         <system_commands>
            <item type="automation" optional="true">aklo plan [pbi_id]</item>
            <item type="verification">Check existing task IDs for this PBI</item>
         </system_commands>
         <mcp_tools>
            <item>mcp_desktop-commander_list_directory</item>
            <item>mcp_desktop-commander_read_file</item>
            <item>mcp_desktop-commander_write_file</item>
            <item>mcp_aklo-terminal_aklo_execute</item>
         </mcp_tools>
         <required_validation>
            <answer>yes</answer>
            <description>Explicit approval required before creation</description>
         </required_validation>
      </flight_plan>
      <step number="2" type="procedure" title="task_decomposition">
         <description>
            Decompose the PBI into a list of technical tasks according to SMART criteria.
         </description>
         <smart_criteria>
            <criterion letter="s" name="specific">The task objective must be clear and unambiguous.</criterion>
            <criterion letter="m" name="measurable">There must be one or more objective criteria
               (definition of done) to know when the task is complete.</criterion>
            <criterion letter="a" name="achievable">The task must be achievable with available
               skills and resources.</criterion>
            <criterion letter="r" name="relevant">The task must directly contribute to the parent
               PBI. No irrelevant work.</criterion>
            <criterion letter="t" name="time_boxed">The task must be small enough to be a manageable
               unit of work and not drag on indefinitely.</criterion>
         </smart_criteria>
         <action>For each identified task, create the corresponding `TASK-...-TODO.xml` file.</action>
         <automation command="aklo plan [pbi_id]" optional="true" />
      </step>
      <step number="3" type="analysis" title="triage_and_risk_identification">
         <description>
            For each created task, assess its complexity and impact. If a task presents an
            architectural risk, set the `arch_review_required` field to `yes` in the task file;
            otherwise, set to `no`.
         </description>
      </step>
      <step number="4" type="conclusion" title="plan_presentation">
         <description>
            Prepare the planning report listing all created tasks, highlighting those requiring
            architectural review, and submit it to the human_developer with a clear recommendation.
         </description>
         <recommendation_cases>
            <case name="trivial">If the request is minor, recommend using the FAST-TRACK protocol.</case>
            <case name="simple">If no task requires review, recommend moving directly to the
               DEVELOPMENT protocol.</case>
            <case name="complex">If some tasks require review, recommend activating the ARCHITECTURE
               protocol.</case>
         </recommendation_cases>
      </step>
   </section>

   <section title="atomic_commit_and_validation">
      <sub_section title="commit_content">
         <commit_message_template>
        <![CDATA[
feat(planning): Decompose PBI-[ID] into [N] tasks

- Creation of [N] SMART technical tasks
- [X] tasks require architectural review
- PBI-[ID] updated with the list of associated tasks
- Journal updated with the planning process

Tasks created:
- TASK-[PBI_ID]-01: [Title]
- TASK-[PBI_ID]-02: [Title]
- [...]

Next step: [ARCHITECTURE|DEVELOPMENT|FAST-TRACK]
        ]]>
      </commit_message_template>
      </sub_section>
      <sub_section title="pre_commit_validation">
         <awaiting_validation> Before the commit, present the complete diff to the human_developer: <list
               type="ordered">
               <item>Diff of all created TASK files</item>
               <item>Diff of the modified parent PBI</item>
               <item>Diff of the updated journal</item>
               <item>Recommendation for the next step</item>
            </list>
        <instruction>The
            human_developer must explicitly approve the complete atomic commit.</instruction>
         </awaiting_validation>
      </sub_section>
      <sub_section title="post_planning_modification_management">
         <rule>
            Subsequent modifications to TASKs (status changes, content updates) are part of other
            protocols and generate their own atomic commits.
         </rule>
         <examples>
            <item>Change `TASK-TODO` → `TASK-DONE`: commit from DEVELOPMENT protocol</item>
            <item>Modification of a TASK's criteria: commit from META-IMPROVEMENT protocol</item>
            <item>Addition of extra TASKs: new cycle of the PLANNING protocol</item>
         </examples>
      </sub_section>
   </section>
</protocol>