<?xml version="1.0" encoding="UTF-8"?>
<protocol name="knowledge_base_management">
   <description>
      The mission of this protocol is to capitalize on the knowledge acquired throughout the project
      to avoid repeating the same mistakes and to accelerate future decision-making.
   </description>

   <section title="mission_and_deliverable">
      <sub_section title="mission">
         <introduction>
            Extract critical and transversal learnings from `DEBUG`, `ARCHITECTURE`,
            `EXPERIMENTATION`, or `OPTIMIZATION` protocols and centralize them in a single,
            easily accessible knowledge base.
         </introduction>
      </sub_section>
      <sub_section title="expected_deliverable">
         <list>
            <item>
               <strong>Knowledge Base:</strong> A single, continuously enriched `KNOWLEDGE-BASE.xml`
               file at the root of the `/docs/` directory.
            </item>
         </list>
      </sub_section>
   </section>

   <section title="artefact_and_structure">
      <sub_section title="artefact">
         <file>/docs/KNOWLEDGE-BASE.xml</file>
      </sub_section>
      <sub_section title="recommended_file_structure">
         <artefact_template format="xml">
            <knowledge_base>
               <introduction>
                  This document is the source of truth for recurring technical decisions and lessons
                  learned. It must be consulted before any architectural decision or choice of
                  dependency.
               </introduction>
               <note>
                  <strong>Governance:</strong> Any modification or addition to this knowledge base
                  must be explicitly validated by the `Human_Developer` as per the management
                  procedure.
               </note>
               
               <entry id="KB-001">
                  <metadata>
                     <subject>Performance of the SuperChart.js library</subject>
                     <status>Active</status>
                     <added_date>2025-07-01</added_date>
                     <source href="DEBUG-performance-dashboard-20250701.xml">
                        DEBUG-performance-dashboard-20250701.xml
                     </source>
                  </metadata>
                  <content>
                     <knowledge>
                        The `SuperChart.js` library exhibits severe performance degradation
                        (blocking the main thread) beyond 1000 data points on the same chart.
                     </knowledge>
                     <impact_analysis>
                        <list>
                           <item><strong>Direct Impact:</strong> Blocks the development of dense
                              dashboards and real-time analysis features.</item>
                           <item><strong>Risk:</strong> Uninformed use of this library on new
                              features could create critical performance regressions.</item>
                        </list>
                     </impact_analysis>
                     <actionable_recommendation>
                        <list type="ordered">
                           <item>
                              <strong>DO NOT USE</strong> `SuperChart.js` for visualizations with
                              more than 500 points.
                           </item>
                           <item>
                              For dense charts, <strong>USE</strong> `MegaGraph.js`, which
                              implements a canvas virtualization solution.
                           </item>
                           <item>
                              <strong>VALIDATE</strong> the performance of any new chart via a load
                              test defined in `OPTIM-benchmark-protocol.xml`.
                           </item>
                        </list>
                     </actionable_recommendation>
                  </content>
               </entry>

               <entry id="KB-002">
                  <metadata>
                     <subject>Inter-Service Communication</subject>
                     <status>Active</status>
                     <added_date>2025-06-28</added_date>
                     <source href="ARCH-refactor-notification-service-1.xml">
                        ARCH-refactor-notification-service-1.xml
                     </source>
                  </metadata>
                  <content>
                     <knowledge>
                        Direct synchronous API calls between the `Users` service and the `Billing`
                        service created a strong coupling, leading to cascading failures when one of
                        them slowed down.
                     </knowledge>
                     <impact_analysis>
                        <list>
                           <item><strong>Direct Impact:</strong> Slowness in the `Billing` service
                              prevented users from logging in, which is an unacceptable impact.</item>
                           <item><strong>Risk:</strong> Extending this synchronous communication
                              pattern to new services will exponentially increase the fragility of
                              the overall architecture.</item>
                        </list>
                     </impact_analysis>
                     <actionable_recommendation>
                        <list type="ordered">
                           <item>
                              For any new <strong>non-blocking</strong> interaction (e.g.,
                              notification, status update), <strong>MANDATORY USE</strong> of
                              asynchronous communication via the Kafka event bus is required.
                           </item>
                           <item>
                              Synchronous calls are only allowed for <strong>blocking and
                              critical</strong> operations (e.g., verifying a payment's validity
                              before granting access to a service).
                           </item>
                        </list>
                     </actionable_recommendation>
                  </content>
               </entry>
            </knowledge_base>
         </artefact_template>
      </sub_section>
   </section>

   <section title="management_procedure">
      <step number="1" type="analysis" title="knowledge_detection">
         <description>
            At the end of a protocol (`DEBUG`, `ARCH`, etc.), the `AI_Agent` or the
            `Human_Developer` must ask the question: "Have we learned something here that could be
            useful to someone else in the future?".
         </description>
      </step>
      <step number="2" type="procedure" title="proposal_for_addition">
         <description>
            If the answer is yes, the `AI_Agent` proposes an entry for the knowledge base. The
            proposal must include the subject, the knowledge, the impact, the recommendation, and a
            link to the source artefact.
         </description>
      </step>
      <step number="3" type="awaiting_validation" title="validation">
         <description>
            Submit the new entry for validation by the `Human_Developer`.
         </description>
      </step>
      <step number="4" type="conclusion" title="update">
         <description>
            Once the entry is approved, the `AI_Agent` updates the `/docs/KNOWLEDGE-BASE.xml` file
            and creates a dedicated commit (e.g., `docs(kb): add lesson about SuperChart.js
            performance`).
         </description>
      </step>
   </section>
</protocol>