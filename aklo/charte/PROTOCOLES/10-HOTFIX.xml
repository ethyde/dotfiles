<?xml version="1.0" encoding="UTF-8"?>
<protocol name="hotfix_management">
  <description>
    This protocol is activated ONLY to fix a critical bug in production that is blocking users or causing immediate revenue loss. It bypasses the standard workflow for maximum speed.
  </description>

  <section title="Mission, Context, and Deliverables">
    <sub_section title="Mission">
      <introduction>
        To restore service in production as quickly as possible by applying a minimalist and targeted fix, while documenting the procedure to ensure traceability.
      </introduction>
    </sub_section>
    <sub_section title="Context and Relationship to Other Protocols">
        <see_also protocol="09-RELEASE" description="A Hotfix is an emergency procedure that circumvents the standard Release protocol. The resulting patch must be incorporated into the main development branch to be included in the next regular release." />
        <see_also protocol="04-DEBOGAGE" description="The Hotfix protocol creates a follow-up task to be handled by the standard Debugging protocol to address the root cause permanently." />
    </sub_section>
    <sub_section title="Expected Deliverables">
      <deliverables>
        <deliverable type="report">A `HOTFIX-[ID].xml` file created in `/docs/backlog/08-hotfixes/`, documenting the problem and solution.</deliverable>
        <deliverable type="commit">A commit containing ONLY the minimal fix, produced via the [DEVELOPMENT] protocol.</deliverable>
        <deliverable type="git_tag">A new patch version Git tag (e.g., `v1.2.1`).</deliverable>
      </deliverables>
    </sub_section>
  </section>

  <section title="Hotfix Artefact Management and Structure">
    <sub_section title="Naming Convention">
      <format>HOTFIX-[ID].xml</format>
      <details>
        <detail name="id">A unique identifier for the hotfix (e.g., `login-bug-prod-20250708`).</detail>
      </details>
    </sub_section>
    <sub_section title="Statuses">
      <list>
        <item name="investigating">Root cause analysis is in progress.</item>
        <item name="awaiting_fix">The diagnosis is complete, and a correction plan is awaiting validation by the Human_Developer.</item>
        <item name="deploying">The fix has been validated, built, and is being deployed.</item>
        <item name="resolved">The hotfix is live in production, and follow-up actions (post-mortem) are planned.</item>
      </list>
    </sub_section>
    <sub_section title="Mandatory Artefact Structure">
      <artefact_template format="xml">
        <hotfix_report id="[id]" status="investigating">
          <metadata>
            <responsible>[Human_Developer's Name]</responsible>
            <detection_date>[YYYY-MM-DDTHH:MM:SSZ]</detection_date>
            <affected_version>[e.g., v1.2.0]</affected_version>
          </metadata>
          <content>
            <critical_impact>A concise description of the business impact. e.g., "New users cannot sign up."</critical_impact>
            <critical_problem_summary>Description of the bug, its impact, and proof of its existence in production.</critical_problem_summary>
            <rapid_root_cause_analysis>A quick diagnosis to identify the immediate source of the problem.</rapid_root_cause_analysis>
            <minimal_workaround_applied>Description of the minimalist code change applied, justifying why it's the smallest possible change to resolve the issue.</minimal_workaround_applied>
            <post_mortem_plan>
              <follow_up_task type="PBI|DEBUG_TASK" ref="[PBI/TASK ID]" mandatory="true">A PBI or DEBUG Task must be created to thoroughly investigate the root cause and apply a permanent solution.</follow_up_task>
              <backport_status>The hotfix must be merged back into the main development branch.</backport_status>
            </post_mortem_plan>
          </content>
        </hotfix_report>
      </artefact_template>
      <example>
        <hotfix_report id="payment-gateway-down-20250708" status="resolved">
          <metadata>
            <responsible>Alice</responsible>
            <detection_date>2025-07-08T14:30:00Z</detection_date>
            <affected_version>v1.2.0</affected_version>
          </metadata>
          <content>
            <critical_impact>The payment gateway is returning a 500 error, blocking all purchases.</critical_impact>
            <critical_problem_summary>Since 14:25Z, all attempts to pay result in an API error. This was confirmed via production logs showing an "Invalid API Key" error from the payment provider.</critical_problem_summary>
            <rapid_root_cause_analysis>The API key for the payment gateway expired today. The new key was available in the vault but not deployed.</rapid_root_cause_analysis>
            <minimal_workaround_applied>Updated the `PAYMENT_API_KEY` environment variable in the production configuration with the new key. No code was changed.</minimal_workaround_applied>
            <post_mortem_plan>
              <follow_up_task type="PBI" ref="PBI-118" mandatory="true">Create a new PBI to implement automated monitoring of API key expiry dates.</follow_up_task>
              <backport_status>Not applicable as this was an environment variable change, but confirmed config-as-code repository is up-to-date.</backport_status>
            </post_mortem_plan>
          </content>
        </hotfix_report>
      </example>
    </sub_section>
  </section>

  <section title="Hotfix Procedure">
    <flight_plan required="true" name="HOTFIX_FLIGHT_PLAN">
      <objective>Fix a critical production bug with minimal impact and maximum speed.</objective>
      <actions>
        <item>Validate the actual emergency with the Human_Developer.</item>
        <item>Create the `HOTFIX-[ID].xml` report.</item>
        <item>Identify the current production tag.</item>
        <item>Create a hotfix branch from the production tag.</item>
        <item>Perform a rapid diagnosis of the critical bug's root cause.</item>
        <item>Implement the minimal fix via the [DEVELOPMENT] protocol.</item>
        <item>Build, test, and deploy urgently with a new patch tag.</item>
        <item>Plan the mandatory post-mortem and synchronize branches.</item>
      </actions>
      <affected_files>
        <file type="lifecycle">/docs/backlog/08-hotfixes/HOTFIX-[ID].xml</file>
        <file type="modification">Source code files for the minimal fix.</file>
        <file type="creation">New PBI/TASK for the permanent fix (post-mortem).</file>
      </affected_files>
      <system_commands>
        <command optional="true">`aklo hotfix "[description]"`</command>
        <command>`git checkout tags/[tag-production] -b hotfix/[description]`</command>
        <command>Emergency tests to validate the fix.</command>
        <command>Emergency build and deployment scripts.</command>
        <command>`git tag -a v[version.patch+1]`</command>
      </system_commands>
      <required_validation>YES - Explicit approval required before initiating an emergency hotfix.</required_validation>
    </flight_plan>

    <step number="1" type="analysis" title="Urgency Validation">
      <action>Read any relevant conventions from `.aklo.conf`.</action>
      <awaiting_validation>Confirm with the Human_Developer that the situation justifies a HOTFIX and not a normal [DEBUGGING] cycle.</awaiting_validation>
    </step>
    <step number="2" type="procedure" title="Emergency Branch Creation">
      <action>Create a `HOTFIX-[ID].xml` file. Identify the tag of the currently deployed production version. Create a hotfix branch (e.g., `hotfix/fix-login-bug`) directly from that production tag.</action>
      <automation optional="true">`aklo hotfix "[bug description]"`</automation>
    </step>
    <step number="3" type="procedure" title="Minimal Fix">
      <action>Activate the [DEVELOPMENT] protocol with a strict constraint: the code change must be the smallest and most targeted possible. No refactoring or enhancements are allowed.</action>
    </step>
    <step number="4" type="validation" title="Fix Validation">
      <awaiting_validation>Submit the minimalist `diff` for approval to the Human_Developer. This is a critical validation point.</awaiting_validation>
    </step>
    <step number="5" type="procedure" title="Emergency Deployment and Follow-up Planning">
      <action>Once the fix is validated, merge the hotfix branch directly into the production branch, create a new patch tag, build, and deploy immediately. Immediately after deployment confirmation, fill out the "Post-Mortem Plan" in the `HOTFIX-[ID].xml` report. This includes creating a new Task or PBI for the permanent fix, which is mandatory.</action>
      <automation optional="true">`aklo hotfix publish`</automation>
    </step>
    <step number="6" type="conclusion" title="Synchronization and Closure">
      <action>After deployment and follow-up planning, merge the production branch back into the main development branch to ensure the fix is present for future development. Inform the Human_Developer that production is stable and the follow-up process is traceable.</action>
    </step>
  </section>

  <section title="Example Journal Entry">
      <example_journal_entry>
        <entry timestamp="2025-07-08T14:31:00Z">
          <source protocol="hotfix_management" />
          <message type="critical_alert">HOTFIX ACTIVATED: Payment gateway is down. Starting emergency procedure.</message>
          <details>
            <hotfix_id>payment-gateway-down-20250708</hotfix_id>
            <affected_version>v1.2.0</affected_version>
          </details>
        </entry>
      </example_journal_entry>
    </section>
</protocol>