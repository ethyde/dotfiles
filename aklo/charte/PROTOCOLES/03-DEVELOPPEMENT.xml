<?xml version="1.0" encoding="UTF-8"?>
<protocol name="development_and_implementation">
    <description>
        This protocol is activated for each individual Task (Status = TODO). It governs how code is
        written, tested, and documented. It is the single source of truth for all code quality
        standards.
    </description>

    <section title="Mission and Deliverable">
        <sub_section title="Mission">
            <introduction>
                To implement the code for a Task in a clean, robust, and testable manner, following
                an iterative development cycle and strictly adhering to quality standards.
            </introduction>
            <note>
                This protocol is the main execution engine, activated by [PLANNING] for new
                features, but also by [DEBUGGING], [REFACTORING], [OPTIMIZATION], and [HOTFIX] for
                their respective implementation needs.
            </note>
        </sub_section>
        <sub_section title="Expected Deliverable">
            <deliverable type="atomic_commit">
                A single, semantic, and atomic commit on the `feature/task-[PBI_ID]-[Task_ID]`
                branch. This commit is created only after explicit validation of the `diff` by the
                Human_Developer.
            </deliverable>
        </sub_section>
    </section>

    <section title="Non-Negotiable Code Quality Rules">
        <introduction>All of the following rules must be respected.</introduction>
        <sub_section title="Compliance with S.O.L.I.D. Principles">
            <principles>
                <principle name="Single Responsibility">Each function, class, or module should have
                    only one reason to change.</principle>
                <principle name="Open/Closed">Entities should be open for extension, but closed for
                    modification.</principle>
                <principle name="Liskov Substitution">Subclasses must be substitutable for their
                    base classes.</principle>
                <principle name="Interface Segregation">Prefer small, client-specific interfaces.</principle>
                <principle name="Dependency Inversion">Depend upon abstractions, not upon
                    concretions.</principle>
            </principles>
        </sub_section>
        <sub_section title="Code Quality and Cleanliness">
            <rules>
                <rule name="Strict and Explicit Typing">Strict typing (e.g., TypeScript's `strict`
                    mode) must be rigorously applied. No use of `any` is tolerated.</rule>
                <rule name="Linter Compliance">The code must be perfectly compliant with the
                    `linting` rules configured in the project. No linter errors shall remain.</rule>
                <rule name="Length Limits">
                    <limit type="file">Files should ideally not exceed 300 lines.</limit>
                    <limit type="function">Functions should ideally not exceed 25 lines.</limit>
                </rule>
                <rule name="Complete and Integral Code">Always write the full code for a file. No
                    snippets, placeholder comments (`// ...`), or multiple blocks for the same file.</rule>
            </rules>
        </sub_section>
        <sub_section title="Systematic Documentation">
            <rules>
                <rule name="Documentation Format">Every exported function, method, class, type, or
                    interface must be preceded by a complete comment block following the **TSDoc**
                    standard for TypeScript projects, or **JSDoc** for JavaScript projects. The
                    specific format is enforced by the project's linter configuration.</rule>
                <rule name="Documentation Content">The documentation must explain the element's role
                    (`@description`), each parameter (`@param`), and the return value (`@returns`).</rule>
            </rules>
        </sub_section>
    </section>

    <section title="Test-Driven Development (TDD) Procedure">
        <introduction>The implementation of any feature must follow this iterative micro-cycle.</introduction>
        <flight_plan required="true" name="DEVELOPMENT_FLIGHT_PLAN">
            <objective>Implement a Task according to the TDD (Test-Driven Development) methodology.</objective>
            <actions>
                <item>Verify that all prerequisite tasks are completed (if any).</item>
                <item>Create the Git branch according to the `feature/task-[PBI_ID]-[Task_ID]`
                    format.</item>
                <item>Update the Task status from `TODO` to `IN_PROGRESS`.</item>
                <item>TDD cycle for each feature slice: Write failing unit test (RED), write minimum
                    code to pass (GREEN), refactor and validate quality (BLUE).</item>
                <item>Complete validation of the "Definition of Done".</item>
                <item>Prepare the diff for review.</item>
                <item>Create an atomic and semantic commit after approval.</item>
            </actions>
            <affected_files>
                <file type="status_change">/docs/backlog/01-tasks/TASK-[PBI_ID]-[Task_ID].xml (TODO
                    → IN_PROGRESS → AWAITING_REVIEW → DONE)</file>
                <file type="creation/modification">Source code files as per Task specifications.</file>
                <file type="creation/modification">Corresponding unit test files.</file>
            </affected_files>
            <system_commands>
                <command>`git checkout -b feature/task-[PBI_ID]-[Task_ID]`</command>
                <command>Test runner execution (e.g., `npm test`, `pytest`).</command>
                <command>Linter and type checker validation.</command>
                <command optional="true">`aklo start-task [ID]` / `aklo submit-task`</command>
            </system_commands>
            <mcp_tools>
                <tool>mcp_desktop-commander_read_file</tool>
                <tool>mcp_desktop-commander_edit_block</tool>
                <tool>mcp_desktop-commander_move_file</tool>
                <tool>mcp_desktop-commander_execute_command</tool>
            </mcp_tools>
            <required_validation>YES - Explicit approval required before development.</required_validation>
        </flight_plan>

        <prerequisites title="Environment Preparation">
            <action>Before starting, create a Git branch that follows the format defined in the
                TASK's header, then rename the TASK artifact file to change its status from `TODO`
                to `IN_PROGRESS`.</action>
            <automation optional="true">`aklo start-task [task_id]`</automation>
        </prerequisites>

        <sub_section title="Dependency Management">
            <rule>If a Task lists dependencies in its metadata, development cannot begin until all
                prerequisite tasks have a status of `DONE` or `MERGED`. The `start-task` automation
                or the manual process must verify this condition.</rule>
        </sub_section>

        <step number="1" title="Write a Failing Test (Red)">
            <description>Identify a small piece of the functionality required by the Task. Write a
                single unit test that describes this behavior. Run the test and ensure it fails
                (RED).</description>
        </step>
        <step number="2" title="Write Minimum Code to Pass (Green)">
            <description>Write the absolute minimum production code necessary for the previous test
                to pass (GREEN). At this stage, code elegance is secondary; functionality is the
                only goal. Rerun the test to confirm it passes.</description>
        </step>
        <step number="3" title="Refactor and Validate Quality (Blue)">
            <description>Now that the behavior is secured by a test, execute the following quality
                checklist:</description>
            <checklist>
                <item>Refactor the code: Improve structure (clarity, naming, apply SOLID
                    principles).</item>
                <item>Validate the Linter: Run the linter and fix all errors and warnings.</item>
                <item>Validate Typing: Run the type checker (e.g., `tsc --noEmit`) and fix all type
                    errors.</item>
                <item>Validate Non-Regression: Rerun the entire test suite to ensure refactoring did
                    not break anything.</item>
            </checklist>
        </step>
        <step number="4" title="Iterate or Finalize">
            <description>If the Task is not complete, return to step 1 for the next piece of
                functionality. If the Task is complete, proceed to the finalization step.</description>
        </step>
        <step number="5" title="Validate the Definition of Done">
            <description>Before submitting the work for review, open the related Task file. Validate
                and check off (`[x]`) every single item on the "Definition of Done" checklist. If
                any item cannot be checked, the work is not finished.</description>
        </step>
        <step number="6" title="Pre-Commit Review">
            <awaiting_validation>
                Once the "Definition of Done" is fully validated, prepare a complete `diff` of all
                modifications. Present this `diff` to the Human_Developer for a final review. Update
                the TASK's status to `AWAITING_REVIEW`.
            </awaiting_validation>
            <automation optional="true">`aklo submit-task`</automation>
        </step>
        <step number="7" title="Finalization and Atomic Commit">
            <description>Once the `diff` is approved, update the Task status to `DONE`, update the
                journal with an implementation summary, and create the single atomic, semantic
                commit.</description>
        </step>
    </section>

    <section title="Development Atomic Commit">
        <sub_section title="Single Commit Principle">
            <rule>The development of a TASK produces a single atomic commit that includes:</rule>
            <composition>
                <item>Implemented code for the TASK.</item>
                <item>Associated tests (unit, integration, etc.).</item>
                <item>The updated TASK artifact (status `TODO` → `DONE` with completed `Definition
                    of Done` checklist).</item>
                <item>The journal update.</item>
            </composition>
        </sub_section>
        <sub_section title="Commit Content">
            <commit_message_template><![CDATA[
feat(TASK-[PBI_ID]-[Task_ID]): [Task Title]

[Detailed description of the implementation.]

- Full implementation according to the Definition of Done.
- All tests pass (linter, typing, test suite).
- TASK-[PBI_ID]-[Task_ID] marked as DONE.
- Journal updated with the implementation process.

Closes TASK-[PBI_ID]-[Task_ID]
      ]]></commit_message_template>
        </sub_section>
        <sub_section title="Management of Partial Implementations">
            <rule>If a TASK proves too large during implementation:</rule>
            <options>
                <option>Activate the [META-IMPROVEMENT] protocol to split the TASK.</option>
                <option>Make a partial commit with `IN_PROGRESS` status and a justification in the
                    journal.</option>
                <option>Return to the [PLANNING] protocol to redefine the TASK.</option>
            </options>
            <example name="Partial Commit Message"><![CDATA[
feat(TASK-[PBI_ID]-[Task_ID]): [Title] - Partial implementation

[Description of what was implemented.]

- Partial implementation: [Justification]
- TASK-[PBI_ID]-[Task_ID] status remains IN_PROGRESS.
- Journal updated with progress status.
- Next step: [Plan to finalize]

Partial implementation of TASK-[PBI_ID]-[Task_ID]
      ]]></example>
        </sub_section>
    </section>
</protocol>