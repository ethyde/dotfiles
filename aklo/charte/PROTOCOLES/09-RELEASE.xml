<?xml version="1.0" encoding="UTF-8"?>
<protocol name="release_management">
  <description>
    This protocol is activated when the Human_Developer decides that a set of features is ready to be published as a new stable version of the application.
  </description>

  <section title="Mission and Deliverables">
    <sub_section title="Mission">
      <introduction>
        To coordinate and automate the necessary steps to transform a series of validated commits into an official, documented, and deployment-ready software version.
      </introduction>
    </sub_section>
    <sub_section title="Expected Deliverables">
      <deliverables>
        <deliverable type="report">A `RELEASE-[version].xml` file created in `/docs/backlog/07-releases/`.</deliverable>
        <deliverable type="changelog">The `CHANGELOG.xml` file at the project root, updated with the new version's changes.</deliverable>
        <deliverable type="git_tag">A semantic and annotated Git tag (e.g., `v1.2.0`).</deliverable>
        <deliverable type="build_artefact">A build artefact ready for deployment (e.g., a Docker container, a .zip archive).</deliverable>
      </deliverables>
    </sub_section>
  </section>

  <section title="Release Artefact Management and Structure">
    <sub_section title="Naming Convention">
      <format>RELEASE-[version]-[Status].xml</format>
      <details>
        <detail name="version">The semantic version number (e.g., `1.2.0`).</detail>
        <detail name="status">The status of the release process.</detail>
      </details>
    </sub_section>
    <sub_section title="Statuses">
      <list>
        <item name="preparing">Information gathering and release branch creation are in progress.</item>
        <item name="awaiting_deployment">The version has been built, tagged, and is ready for final deployment.</item>
        <item name="shipped">The version has been deployed to production.</item>
      </list>
    </sub_section>
    <sub_section title="Mandatory Artefact Structure">
      <artefact_template format="xml">
        <release_report version="[version]" status="preparing">
          <metadata>
            <start_date>[YYYY-MM-DD]</start_date>
            <end_date optional="true">[YYYY-MM-DD]</end_date>
          </metadata>
          <content>
            <release_objective>A brief description of this version's purpose.</release_objective>
            <included_pbis>
              <pbi ref="[path/to/PBI-ID.xml]">PBI Title</pbi>
            </included_pbis>
            <pre_deployment_checklist>
              <check name="Release branch created">false</check>
              <check name="CHANGELOG generated and validated">false</check>
              <check name="Version bumped in package.json">false</check>
              <check name="All tests passed on release branch">false</check>
              <check name="Production build created successfully">false</check>
              <check name="Git tag created and pushed">false</check>
              <check name="Stakeholders notified of release" optional="true">false</check>
            </pre_deployment_checklist>
          </content>
        </release_report>
      </artefact_template>
      <example>
        <release_report version="1.2.0" status="preparing">
          <metadata>
            <start_date>2025-07-08</start_date>
          </metadata>
          <content>
            <release_objective>Deliver the credit card payment feature and fix performance bugs on the dashboard.</release_objective>
            <included_pbis>
              <pbi ref="../../00-pbi/PBI-42-DONE.xml">Credit card payment</pbi>
              <pbi ref="../../00-pbi/PBI-45-DONE.xml">Dashboard optimization</pbi>
            </included_pbis>
            <pre_deployment_checklist>
              <check name="Release branch created">true</check>
              <check name="CHANGELOG generated and validated">true</check>
              <check name="Version bumped in package.json">true</check>
              <check name="All tests passed on release branch">true</check>
              <check name="Production build created successfully">true</check>
              <check name="Git tag created and pushed">false</check>
              <check name="Stakeholders notified of release" optional="true">false</check>
            </pre_deployment_checklist>
          </content>
        </release_report>
      </example>
    </sub_section>
  </section>

  <section title="Release Procedure">
    <flight_plan required="true" name="RELEASE_FLIGHT_PLAN">
      <objective>Create a stable and deployable version of the application.</objective>
      <actions>
        <item>Read `.aklo.conf` for versioning conventions.</item>
        <item>Determine the next version number (major/minor/patch).</item>
        <item>Create the `RELEASE-[version]-PREPARING.xml` report.</item>
        <item>Create a release branch (if configured).</item>
        <item>Update version files (package.json, etc.).</item>
        <item>Generate CHANGELOG.xml based on completed PBIs.</item>
        <item>Run the full test suite.</item>
        <item>Create and validate the production build.</item>
        <item>Create the annotated Git tag and deploy.</item>
        <item optional="true">Notify stakeholders.</item>
      </actions>
      <affected_files>
        <file type="lifecycle">/docs/backlog/07-releases/RELEASE-[version].xml</file>
        <file type="update">CHANGELOG.xml</file>
        <file type="update">package.json</file>
        <file type="creation">Production build artifacts.</file>
      </affected_files>
      <system_commands>
        <command optional="true">`aklo release &lt;major|minor|patch&gt;`</command>
        <command>`git checkout -b release/[version]`</command>
        <command>Full test suite execution (unit, integration, e2e).</command>
        <command>Production build scripts.</command>
        <command>`git tag -a v[version]`</command>
      </system_commands>
      <required_validation>YES - Explicit approval required before starting the release process.</required_validation>
    </flight_plan>

    <step number="1" type="analysis" title="Configuration Reading and Version Proposal">
      <action>Read versioning conventions from `.aklo.conf`. Determine the next version number based on the defined scheme.</action>
      <awaiting_validation>Propose the version number to the Human_Developer for approval.</awaiting_validation>
    </step>
    <step number="2" type="procedure" title="Preparation">
      <action>Create the `RELEASE-[version]-PREPARING.xml` report. If configured, create a release branch. Otherwise, all actions occur on the main development branch. Update the version in project files (e.g., `package.json`) and generate a draft `CHANGELOG.xml`.</action>
      <automation optional="true">`aklo release &lt;major|minor|patch&gt;`</automation>
    </step>
    <step number="3" type="validation" title="Content Validation">
      <awaiting_validation>Submit the proposed `CHANGELOG.xml` to the Human_Developer for validation.</awaiting_validation>
    </step>
    <step number="4" type="procedure" title="Technical Validation and Build">
      <action>Run the entire test suite on the working branch. If all tests pass, run the production build script.</action>
    </step>
    <step number="5" type="procedure" title="Atomic Commit Preparation">
      <action>Finalize the release report, setting its status to `AWAITING_DEPLOYMENT`. Update the journal with the release process summary. Stage all modified files for the final atomic commit.</action>
    </step>
    <step number="6" type="validation" title="Atomic Commit Validation">
      <awaiting_validation>Present the complete release diff to the Human_Developer for explicit validation.</awaiting_validation>
    </step>
    <step number="7" type="conclusion" title="Finalization and Tagging">
      <action>Create the atomic release commit. If configured, merge into the production branch. Create an annotated Git tag and push the tag and branches to the remote repository.</action>
    </step>
    <step number="8" type="procedure" title="Post-Release Notification" optional="true">
        <action>Notify relevant stakeholders (e.g., via Slack, email) about the new release, including a link to the `CHANGELOG.xml`.</action>
    </step>
  </section>

  <section title="Atomic Release Commit">
    <sub_section title="Single Commit Principle">
      <rule>A release produces a single atomic commit that includes:</rule>
      <composition>
        <item>The finalized `RELEASE-[version]-AWAITING_DEPLOYMENT.xml` report.</item>
        <item>The updated `CHANGELOG.xml`.</item>
        <item>The updated version in `package.json` or equivalent files.</item>
        <item>The journal update.</item>
      </composition>
    </sub_section>
    <sub_section title="Commit Content">
      <commit_message_template><![CDATA[
release: Version [version]

[Summary of the main features in this release.]

- Finalized RELEASE-[version] report.
- Updated CHANGELOG.xml with [N] new features.
- Version bumped: [old] -> [new].
- Journal updated with the release process.
- All tests pass, production build validated.

Features included:
- [Feature 1]
- [Feature 2]
- [...]

Breaking changes: [None | List of breaking changes]
      ]]></commit_message_template>
    </sub_section>
    <sub_section title="Rollback Management">
      <rule>If a problem is detected after the release, use the [HOTFIX] protocol rather than modifying the release commit. The release commit remains unchanged to preserve history.</rule>
      <see_also protocol="10-HOTFIX" description="Use for post-release critical bug fixes." />
    </sub_section>
    <sub_section title="Example Journal Entry">
      <example_journal_entry>
        <entry timestamp="2025-07-08T15:00:00Z">
          <source protocol="release_management" />
          <message>Release v1.2.0 successfully created and tagged. Awaiting deployment.</message>
          <details>
            <version>1.2.0</version>
            <changelog_ref>CHANGELOG.xml</changelog_ref>
            <commit_ref>[commit_hash]</commit_ref>
          </details>
        </entry>
      </example_journal_entry>
    </sub_section>
  </section>
</protocol>