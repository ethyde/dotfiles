#!/usr/bin/env bash
#==============================================================================
# Script de surveillance et red√©marrage automatique des serveurs MCP Aklo
# Mode d√©veloppement : red√©marre automatiquement quand les fichiers changent
#==============================================================================

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
WATCH_INTERVAL=2  # Secondes entre les v√©rifications

log_step() {
    echo -e "\n${BLUE}üîÑ $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

log_change() {
    echo -e "${YELLOW}üìù $1${NC}"
}

show_banner() {
    echo -e "${CYAN}"
    cat << 'EOF'
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë         üëÄ WATCH MCP SERVERS         ‚ïë
    ‚ïë     Surveillance et red√©marrage      ‚ïë
    ‚ïë         automatique (DEV MODE)       ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
}

# Fonction pour calculer le checksum des fichiers surveill√©s
calculate_checksum() {
    local files_to_watch=(
        "$SCRIPT_DIR/documentation/index.js"
        "$SCRIPT_DIR/terminal/index.js"
        "$SCRIPT_DIR/shell-native/aklo-documentation.sh"
        "$SCRIPT_DIR/shell-native/aklo-terminal.sh"
    )
    
    local checksum=""
    for file in "${files_to_watch[@]}"; do
        if [ -f "$file" ]; then
            # Utiliser la date de modification + taille pour d√©tecter les changements
            local file_info=$(stat -f "%m_%z" "$file" 2>/dev/null || echo "0_0")
            checksum="${checksum}_${file_info}"
        fi
    done
    
    echo "$checksum"
}

# Fonction pour lister les fichiers surveill√©s
list_watched_files() {
    log_info "Fichiers surveill√©s :"
    local files_to_watch=(
        "$SCRIPT_DIR/documentation/index.js"
        "$SCRIPT_DIR/terminal/index.js"
        "$SCRIPT_DIR/shell-native/aklo-documentation.sh"
        "$SCRIPT_DIR/shell-native/aklo-terminal.sh"
    )
    
    for file in "${files_to_watch[@]}"; do
        if [ -f "$file" ]; then
            local rel_path=$(echo "$file" | sed "s|$SCRIPT_DIR/||")
            local mod_time=$(stat -f "%Sm" -t "%H:%M:%S" "$file")
            echo "  üìÑ $rel_path (modifi√©: $mod_time)"
        else
            local rel_path=$(echo "$file" | sed "s|$SCRIPT_DIR/||")
            echo "  ‚ùå $rel_path (non trouv√©)"
        fi
    done
}

# Fonction pour red√©marrer les serveurs
restart_servers() {
    log_step "Red√©marrage des serveurs MCP..."
    
    # Utiliser le script de red√©marrage si disponible
    if [ -f "$SCRIPT_DIR/restart-mcp.sh" ]; then
        "$SCRIPT_DIR/restart-mcp.sh" | grep -E "(‚úÖ|‚ö†Ô∏è|‚ÑπÔ∏è)" || true
    else
        # Fallback : red√©marrage simple
        local mcp_pids=$(ps aux | grep -E "(aklo.*mcp|mcp.*aklo)" | grep -v grep | awk '{print $2}' || true)
        if [ -n "$mcp_pids" ]; then
            echo "$mcp_pids" | xargs kill -TERM 2>/dev/null || true
            sleep 1
        fi
    fi
    
    log_success "Serveurs red√©marr√©s"
}

# Fonction de nettoyage √† la sortie
cleanup() {
    echo ""
    log_info "Arr√™t de la surveillance..."
    exit 0
}

# Fonction principale de surveillance
watch_files() {
    local last_checksum=$(calculate_checksum)
    local check_count=0
    
    log_info "Surveillance d√©marr√©e (Ctrl+C pour arr√™ter)"
    echo "V√©rification toutes les ${WATCH_INTERVAL}s..."
    
    while true; do
        sleep $WATCH_INTERVAL
        check_count=$((check_count + 1))
        
        local current_checksum=$(calculate_checksum)
        
        # Afficher un point toutes les 10 v√©rifications pour montrer que √ßa fonctionne
        if [ $((check_count % 10)) -eq 0 ]; then
            echo -n "."
        fi
        
        if [ "$current_checksum" != "$last_checksum" ]; then
            echo ""
            log_change "Changement d√©tect√© dans les fichiers MCP !"
            
            # Afficher quels fichiers ont chang√©
            local files_to_watch=(
                "$SCRIPT_DIR/documentation/index.js"
                "$SCRIPT_DIR/terminal/index.js"
                "$SCRIPT_DIR/shell-native/aklo-documentation.sh"
                "$SCRIPT_DIR/shell-native/aklo-terminal.sh"
            )
            
            for file in "${files_to_watch[@]}"; do
                if [ -f "$file" ]; then
                    local rel_path=$(echo "$file" | sed "s|$SCRIPT_DIR/||")
                    local mod_time=$(stat -f "%Sm" -t "%H:%M:%S" "$file")
                    echo "  üìù $rel_path (modifi√©: $mod_time)"
                fi
            done
            
            restart_servers
            last_checksum="$current_checksum"
            check_count=0
            echo ""
            log_info "Surveillance continue..."
        fi
    done
}

# Fonction d'aide
show_help() {
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  -h, --help     Afficher cette aide"
    echo "  -i, --interval SECONDES   Intervalle de v√©rification (d√©faut: $WATCH_INTERVAL)"
    echo "  -l, --list     Lister les fichiers surveill√©s et quitter"
    echo ""
    echo "Ce script surveille les fichiers des serveurs MCP et les red√©marre"
    echo "automatiquement quand ils sont modifi√©s."
    echo ""
    echo "Fichiers surveill√©s :"
    echo "  ‚Ä¢ documentation/index.js"
    echo "  ‚Ä¢ terminal/index.js"
    echo "  ‚Ä¢ shell-native/aklo-documentation.sh"
    echo "  ‚Ä¢ shell-native/aklo-terminal.sh"
}

# Fonction principale
main() {
    # Traitement des arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -i|--interval)
                WATCH_INTERVAL="$2"
                shift 2
                ;;
            -l|--list)
                list_watched_files
                exit 0
                ;;
            *)
                echo "Option inconnue: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    show_banner
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if [ ! -d "$SCRIPT_DIR/documentation" ] || [ ! -d "$SCRIPT_DIR/terminal" ]; then
        log_warning "Ce script doit √™tre ex√©cut√© depuis le r√©pertoire mcp-servers/"
        exit 1
    fi
    
    list_watched_files
    
    # Configurer le signal de sortie
    trap cleanup SIGINT SIGTERM
    
    # D√©marrer la surveillance
    watch_files
}

# V√©rifier si le script est ex√©cut√© directement
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi 