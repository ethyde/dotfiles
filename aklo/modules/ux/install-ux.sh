#!/usr/bin/env bash
#==============================================================================
# Installation des am√©liorations UX pour Aklo
# Script d'installation et de d√©monstration
#==============================================================================

# Configuration des couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'
BOLD='\033[1m'

# Configuration
AKLO_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
UX_DIR="$AKLO_DIR/modules/ux"
AKLO_SCRIPT="$AKLO_DIR/bin/aklo"

# Fonction de banni√®re
show_banner() {
    clear
    echo -e "${CYAN}"
    cat << 'EOF'
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë           üé® AKLO UX IMPROVEMENTS                    ‚ïë
    ‚ïë        Installation des am√©liorations UX             ‚ïë
    ‚ïë                                                      ‚ïë
    ‚ïë  ‚Ä¢ Syst√®me d'aide avanc√© (--help)                   ‚ïë
    ‚ïë  ‚Ä¢ Auto-compl√©tion Bash/Zsh                         ‚ïë
    ‚ïë  ‚Ä¢ Commande status intelligente                     ‚ïë
    ‚ïë  ‚Ä¢ Mode Quick Start pour d√©butants                  ‚ïë
    ‚ïë  ‚Ä¢ Templates pr√©-remplis                            ‚ïë
    ‚ïë  ‚Ä¢ Validation des inputs utilisateur                ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
}

# Fonction de v√©rification des pr√©requis
check_prerequisites() {
    echo -e "${BLUE}üîç V√©rification des pr√©requis...${NC}"
    
    local errors=0
    
    # V√©rifier Bash
    if ! command -v bash >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Bash non trouv√©${NC}"
        errors=$((errors + 1))
    else
        echo -e "${GREEN}‚úÖ Bash: $(bash --version | head -1)${NC}"
    fi
    
    # V√©rifier Git (optionnel mais recommand√©)
    if ! command -v git >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  Git non trouv√© (recommand√© pour le workflow complet)${NC}"
    else
        echo -e "${GREEN}‚úÖ Git: $(git --version)${NC}"
    fi
    
    # V√©rifier que le script Aklo existe
    if [ ! -f "$AKLO_SCRIPT" ]; then
        echo -e "${RED}‚ùå Script Aklo non trouv√©: $AKLO_SCRIPT${NC}"
        errors=$((errors + 1))
    else
        echo -e "${GREEN}‚úÖ Script Aklo trouv√©${NC}"
    fi
    
    # V√©rifier les fichiers UX
    local ux_files=(
        "help-system.sh"
        "status-command.sh"
        "aklo-completion.bash"
        "aklo-completion.zsh"
        "quickstart.sh"
        "templates.sh"
        "validation.sh"
    )
    
    for file in "${ux_files[@]}"; do
        if [ ! -f "$UX_DIR/$file" ]; then
            echo -e "${RED}‚ùå Fichier UX manquant: $file${NC}"
            errors=$((errors + 1))
        fi
    done
    
    if [ $errors -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Tous les pr√©requis sont satisfaits${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $errors erreur(s) trouv√©e(s)${NC}"
        return 1
    fi
}

# Fonction d'int√©gration des am√©liorations dans le script principal
integrate_ux_features() {
    echo -e "\n${BLUE}üîß Int√©gration des am√©liorations UX...${NC}"
    
    # Cr√©er une sauvegarde du script original
    if [ ! -f "$AKLO_SCRIPT.backup" ]; then
        cp "$AKLO_SCRIPT" "$AKLO_SCRIPT.backup"
        echo -e "${GREEN}‚úÖ Sauvegarde cr√©√©e: $AKLO_SCRIPT.backup${NC}"
    fi
    
    # Ajouter les sources des am√©liorations UX au d√©but du script
    local temp_script=$(mktemp)
    
    # En-t√™te original
    head -20 "$AKLO_SCRIPT" > "$temp_script"
    
    # Ajouter les sources UX
    cat >> "$temp_script" << EOF

#==============================================================================
# AM√âLIORATIONS UX - Int√©gration automatique
#==============================================================================

# Source des am√©liorations UX
UX_DIR="\$(cd "\$(dirname "\${BASH_SOURCE[0]}")/../ux-improvements" && pwd)"

# Charger les fonctions d'aide
if [ -f "\$UX_DIR/help-system.sh" ]; then
    source "\$UX_DIR/help-system.sh"
fi

# Charger les fonctions de validation
if [ -f "\$UX_DIR/validation.sh" ]; then
    source "\$UX_DIR/validation.sh"
fi

# Charger les templates
if [ -f "\$UX_DIR/templates.sh" ]; then
    source "\$UX_DIR/templates.sh"
fi

# Charger la commande status
if [ -f "\$UX_DIR/status-command.sh" ]; then
    source "\$UX_DIR/status-command.sh"
fi

# Charger le quickstart
if [ -f "\$UX_DIR/quickstart.sh" ]; then
    source "\$UX_DIR/quickstart.sh"
fi

EOF
    
    # Reste du script original (en sautant l'en-t√™te)
    tail -n +21 "$AKLO_SCRIPT" >> "$temp_script"
    
    # Remplacer le script original
    mv "$temp_script" "$AKLO_SCRIPT"
    chmod +x "$AKLO_SCRIPT"
    
    echo -e "${GREEN}‚úÖ Am√©liorations UX int√©gr√©es au script principal${NC}"
}

# Fonction d'installation de l'auto-compl√©tion
install_autocompletion() {
    echo -e "\n${BLUE}üîß Installation de l'auto-compl√©tion...${NC}"
    
    local shell_type=""
    
    # D√©tecter le shell
    if [ -n "$ZSH_VERSION" ]; then
        shell_type="zsh"
    elif [ -n "$BASH_VERSION" ]; then
        shell_type="bash"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Shell non d√©tect√©, installation manuelle requise${NC}"
        return 1
    fi
    
    echo -e "${BLUE}üêö Shell d√©tect√©: $shell_type${NC}"
    
    # Installation selon le shell
    case "$shell_type" in
        "bash")
            install_bash_completion
            ;;
        "zsh")
            install_zsh_completion
            ;;
    esac
}

# Installation auto-compl√©tion Bash
install_bash_completion() {
    local completion_file="$UX_DIR/aklo-completion.bash"
    local bashrc="$HOME/.bashrc"
    
    if [ -f "$bashrc" ]; then
        # V√©rifier si d√©j√† install√©
        if grep -q "aklo-completion.bash" "$bashrc" 2>/dev/null; then
            echo -e "${YELLOW}‚ö†Ô∏è  Auto-compl√©tion Bash d√©j√† install√©e${NC}"
            return 0
        fi
        
        # Ajouter la source
        echo "" >> "$bashrc"
        echo "# Aklo auto-completion" >> "$bashrc"
        echo "source \"$completion_file\"" >> "$bashrc"
        
        echo -e "${GREEN}‚úÖ Auto-compl√©tion Bash install√©e${NC}"
        echo -e "${BLUE}üí° Red√©marrez votre terminal ou ex√©cutez: source ~/.bashrc${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  ~/.bashrc non trouv√©${NC}"
        echo -e "${BLUE}üí° Ajoutez manuellement: source \"$completion_file\"${NC}"
    fi
}

# Installation auto-compl√©tion Zsh
install_zsh_completion() {
    local completion_file="$UX_DIR/aklo-completion.zsh"
    local zshrc="$HOME/.zshrc"
    
    if [ -f "$zshrc" ]; then
        # V√©rifier si d√©j√† install√©
        if grep -q "aklo-completion.zsh" "$zshrc" 2>/dev/null; then
            echo -e "${YELLOW}‚ö†Ô∏è  Auto-compl√©tion Zsh d√©j√† install√©e${NC}"
            return 0
        fi
        
        # Ajouter la source
        echo "" >> "$zshrc"
        echo "# Aklo auto-completion" >> "$zshrc"
        echo "source \"$completion_file\"" >> "$zshrc"
        
        echo -e "${GREEN}‚úÖ Auto-compl√©tion Zsh install√©e${NC}"
        echo -e "${BLUE}üí° Red√©marrez votre terminal ou ex√©cutez: source ~/.zshrc${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  ~/.zshrc non trouv√©${NC}"
        echo -e "${BLUE}üí° Ajoutez manuellement: source \"$completion_file\"${NC}"
    fi
}

# Fonction de test des am√©liorations
test_ux_improvements() {
    echo -e "\n${BLUE}üß™ Test des am√©liorations UX...${NC}"
    
    # Test de la commande help
    echo -e "\n${CYAN}üìö Test du syst√®me d'aide:${NC}"
    if "$AKLO_SCRIPT" --help >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ aklo --help fonctionne${NC}"
    else
        echo -e "${RED}‚ùå aklo --help ne fonctionne pas${NC}"
    fi
    
    # Test de la commande status
    echo -e "\n${CYAN}üìä Test de la commande status:${NC}"
    if "$AKLO_SCRIPT" status >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ aklo status fonctionne${NC}"
    else
        echo -e "${RED}‚ùå aklo status ne fonctionne pas${NC}"
    fi
    
    # Test de quickstart
    echo -e "\n${CYAN}üöÄ Test du quickstart:${NC}"
    if "$AKLO_SCRIPT" quickstart --help >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ aklo quickstart --help fonctionne${NC}"
    else
        echo -e "${RED}‚ùå aklo quickstart --help ne fonctionne pas${NC}"
    fi
    
    # Test de validation
    echo -e "\n${CYAN}‚úÖ Test de validation:${NC}"
    if source "$UX_DIR/validation.sh" && validate_input "Test" "pbi_title" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Validation fonctionne${NC}"
    else
        echo -e "${RED}‚ùå Validation ne fonctionne pas${NC}"
    fi
}

# Fonction de d√©monstration
demo_ux_features() {
    echo -e "\n${MAGENTA}üé≠ D√©monstration des am√©liorations UX${NC}"
    echo "$(printf '%.0s‚ïê' {1..50})"
    
    echo -e "\n${CYAN}1. üìö Syst√®me d'aide avanc√©:${NC}"
    echo "   aklo --help                    # Aide g√©n√©rale"
    echo "   aklo propose-pbi --help        # Aide sp√©cifique"
    echo "   aklo <command> --help          # Aide pour toute commande"
    
    echo -e "\n${CYAN}2. üìä Commande status intelligente:${NC}"
    echo "   aklo status                    # Vue d'ensemble du projet"
    echo "   aklo status --brief            # Vue condens√©e"
    echo "   aklo status --detailed         # Vue d√©taill√©e avec m√©triques"
    echo "   aklo status --json             # Format JSON pour scripts"
    
    echo -e "\n${CYAN}3. üöÄ Mode Quick Start:${NC}"
    echo "   aklo quickstart                # Guide interactif complet"
    echo "   aklo quickstart --skip-tutorial # Mode rapide"
    echo "   aklo quickstart --template webapp # Avec template"
    
    echo -e "\n${CYAN}4. üìã Templates intelligents:${NC}"
    echo "   aklo propose-pbi --template feature \"API REST\""
    echo "   aklo propose-pbi --template bug \"Login cass√©\""
    echo "   aklo propose-pbi --interactive  # Mode guid√©"
    
    echo -e "\n${CYAN}5. ‚úÖ Validation automatique:${NC}"
    echo "   ‚Ä¢ Validation des titres PBI"
    echo "   ‚Ä¢ V√©rification des IDs"
    echo "   ‚Ä¢ Validation des noms de branches"
    echo "   ‚Ä¢ Messages d'erreur explicites"
    
    echo -e "\n${CYAN}6. üîß Auto-compl√©tion:${NC}"
    echo "   aklo <TAB><TAB>                # Liste des commandes"
    echo "   aklo propose-pbi --<TAB>       # Options disponibles"
    echo "   aklo plan <TAB>                # IDs de PBI existants"
    
    echo -e "\n${GREEN}üí° Essayez ces commandes pour d√©couvrir les am√©liorations !${NC}"
}

# Fonction de d√©sinstallation
uninstall_ux_improvements() {
    echo -e "\n${YELLOW}üóëÔ∏è  D√©sinstallation des am√©liorations UX...${NC}"
    
    # Restaurer le script original
    if [ -f "$AKLO_SCRIPT.backup" ]; then
        mv "$AKLO_SCRIPT.backup" "$AKLO_SCRIPT"
        echo -e "${GREEN}‚úÖ Script Aklo restaur√©${NC}"
    else
        echo -e "${RED}‚ùå Sauvegarde non trouv√©e${NC}"
    fi
    
    # Supprimer les r√©f√©rences dans les fichiers de configuration shell
    local bashrc="$HOME/.bashrc"
    local zshrc="$HOME/.zshrc"
    
    if [ -f "$bashrc" ]; then
        sed -i.bak '/aklo-completion\.bash/d' "$bashrc" 2>/dev/null && \
        echo -e "${GREEN}‚úÖ Auto-compl√©tion Bash supprim√©e${NC}"
    fi
    
    if [ -f "$zshrc" ]; then
        sed -i.bak '/aklo-completion\.zsh/d' "$zshrc" 2>/dev/null && \
        echo -e "${GREEN}‚úÖ Auto-compl√©tion Zsh supprim√©e${NC}"
    fi
    
    echo -e "${GREEN}‚úÖ D√©sinstallation termin√©e${NC}"
}

# Fonction principale
main() {
    local action="${1:-install}"
    
    case "$action" in
        "install")
            show_banner
            check_prerequisites || exit 1
            integrate_ux_features
            install_autocompletion
            test_ux_improvements
            demo_ux_features
            
            echo -e "\n${GREEN}üéâ Installation des am√©liorations UX termin√©e !${NC}"
            echo -e "${BLUE}üí° Red√©marrez votre terminal pour activer l'auto-compl√©tion${NC}"
            ;;
        "test")
            test_ux_improvements
            ;;
        "demo")
            demo_ux_features
            ;;
        "uninstall")
            uninstall_ux_improvements
            ;;
        "help"|"--help")
            cat << 'EOF'
üé® Installation des am√©liorations UX Aklo

USAGE:
    ./install-ux.sh [action]

ACTIONS:
    install     Installe toutes les am√©liorations UX (d√©faut)
    test        Teste les am√©liorations install√©es
    demo        Affiche une d√©monstration des fonctionnalit√©s
    uninstall   D√©sinstalle les am√©liorations UX
    help        Affiche cette aide

AM√âLIORATIONS INSTALL√âES:
    ‚Ä¢ Syst√®me d'aide avanc√© (--help)
    ‚Ä¢ Auto-compl√©tion Bash/Zsh
    ‚Ä¢ Commande status intelligente
    ‚Ä¢ Mode Quick Start pour d√©butants
    ‚Ä¢ Templates pr√©-remplis
    ‚Ä¢ Validation des inputs utilisateur

EXEMPLES:
    ./install-ux.sh                # Installation compl√®te
    ./install-ux.sh test           # Test des fonctionnalit√©s
    ./install-ux.sh demo           # D√©monstration
EOF
            ;;
        *)
            echo -e "${RED}‚ùå Action inconnue: $action${NC}"
            echo "Utilisez: $0 help pour voir l'aide"
            exit 1
            ;;
    esac
}

# Point d'entr√©e
main "$@"