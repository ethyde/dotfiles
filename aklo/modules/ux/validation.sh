#!/bin/bash
#==============================================================================
# Am√©lioration UX : Validation des inputs utilisateur pour Aklo
# Validation robuste et messages d'erreur utiles
#==============================================================================

# Configuration des couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fonction de validation g√©n√©rique
validate_input() {
    local input="$1"
    local type="$2"
    local context="$3"
    
    case "$type" in
        "pbi_title")
            validate_pbi_title "$input"
            ;;
        "pbi_id")
            validate_pbi_id "$input"
            ;;
        "task_id")
            validate_task_id "$input"
            ;;
        "task_title")
            validate_task_title "$input"
            ;;
        "release_type")
            validate_release_type "$input"
            ;;
        "priority")
            validate_priority "$input"
            ;;
        "branch_name")
            validate_branch_name "$input"
            ;;
        "commit_message")
            validate_commit_message "$input"
            ;;
        *)
            echo -e "${RED}‚ùå Type de validation inconnu: $type${NC}"
            return 1
            ;;
    esac
}

# Validation du titre de PBI
validate_pbi_title() {
    local title="$1"
    local errors=()
    
    # V√©rifier que le titre n'est pas vide
    if [ -z "$title" ]; then
        errors+=("Le titre ne peut pas √™tre vide")
    fi
    
    # V√©rifier la longueur minimale
    if [ ${#title} -lt 5 ]; then
        errors+=("Le titre doit contenir au moins 5 caract√®res")
    fi
    
    # V√©rifier la longueur maximale
    if [ ${#title} -gt 100 ]; then
        errors+=("Le titre ne peut pas d√©passer 100 caract√®res (actuellement: ${#title})")
    fi
    
    # V√©rifier les caract√®res interdits pour les noms de fichiers
    if [[ "$title" =~ [/\\:*?\"<>|] ]]; then
        errors+=("Le titre contient des caract√®res interdits: / \\ : * ? \" < > |")
    fi
    
    # V√©rifier qu'il ne commence/finit pas par des espaces
    if [[ "$title" =~ ^[[:space:]] ]] || [[ "$title" =~ [[:space:]]$ ]]; then
        errors+=("Le titre ne peut pas commencer ou finir par des espaces")
    fi
    
    # Suggestions pour am√©liorer le titre
    local suggestions=()
    
    if [[ ! "$title" =~ [A-Z] ]]; then
        suggestions+=("üí° Conseil: Commencez par une majuscule")
    fi
    
    if [[ "$title" =~ ^(TODO|FIXME|WIP) ]]; then
        suggestions+=("üí° Conseil: √âvitez les pr√©fixes comme TODO, FIXME, WIP")
    fi
    
    if [ ${#title} -lt 15 ]; then
        suggestions+=("üí° Conseil: Un titre plus descriptif serait plus clair")
    fi
    
    # Afficher les r√©sultats
    if [ ${#errors[@]} -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Titre valide${NC}"
        
        # Afficher les suggestions s'il y en a
        for suggestion in "${suggestions[@]}"; do
            echo -e "${YELLOW}$suggestion${NC}"
        done
        
        return 0
    else
        echo -e "${RED}‚ùå Titre invalide:${NC}"
        for error in "${errors[@]}"; do
            echo -e "${RED}   ‚Ä¢ $error${NC}"
        done
        
        echo -e "\n${BLUE}üìù Exemples de bons titres:${NC}"
        echo "   ‚Ä¢ Authentification utilisateur"
        echo "   ‚Ä¢ API de gestion des produits"
        echo "   ‚Ä¢ Interface de recherche avanc√©e"
        echo "   ‚Ä¢ Syst√®me de notifications en temps r√©el"
        
        return 1
    fi
}

# Validation de l'ID de PBI
validate_pbi_id() {
    local pbi_id="$1"
    local errors=()
    
    # V√©rifier que l'ID n'est pas vide
    if [ -z "$pbi_id" ]; then
        errors+=("L'ID PBI ne peut pas √™tre vide")
    fi
    
    # V√©rifier que c'est un nombre
    if ! [[ "$pbi_id" =~ ^[0-9]+$ ]]; then
        errors+=("L'ID PBI doit √™tre un nombre entier positif")
    fi
    
    # V√©rifier que l'ID est dans une plage raisonnable
    if [ "$pbi_id" -lt 1 ] || [ "$pbi_id" -gt 9999 ]; then
        errors+=("L'ID PBI doit √™tre entre 1 et 9999")
    fi
    
    # V√©rifier que le PBI existe
    local workdir=$(get_project_workdir)
    if [ -n "$workdir" ] && [ ! -f "$workdir/backlog/00-pbi/PBI-$pbi_id-"*.xml ]; then
        errors+=("Le PBI #$pbi_id n'existe pas")
        
        # Sugg√©rer les PBI existants
        local existing_pbis=$(find "$workdir/backlog/00-pbi" -name "PBI-*.xml" 2>/dev/null | \
            sed 's/.*PBI-\([0-9]*\)-.*/\1/' | sort -n | tr '\n' ' ')
        
        if [ -n "$existing_pbis" ]; then
            echo -e "${BLUE}üìã PBI existants: $existing_pbis${NC}"
        else
            echo -e "${BLUE}üí° Aucun PBI cr√©√©. Utilisez: aklo propose-pbi \"Titre\"${NC}"
        fi
    fi
    
    # Afficher les r√©sultats
    if [ ${#errors[@]} -eq 0 ]; then
        echo -e "${GREEN}‚úÖ ID PBI valide${NC}"
        return 0
    else
        echo -e "${RED}‚ùå ID PBI invalide:${NC}"
        for error in "${errors[@]}"; do
            echo -e "${RED}   ‚Ä¢ $error${NC}"
        done
        return 1
    fi
}

# Validation de l'ID de t√¢che
validate_task_id() {
    local task_id="$1"
    local errors=()
    
    # V√©rifier que l'ID n'est pas vide
    if [ -z "$task_id" ]; then
        errors+=("L'ID de t√¢che ne peut pas √™tre vide")
    fi
    
    # V√©rifier que c'est un nombre
    if ! [[ "$task_id" =~ ^[0-9]+$ ]]; then
        errors+=("L'ID de t√¢che doit √™tre un nombre entier positif")
    fi
    
    # V√©rifier que l'ID est dans une plage raisonnable
    if [ "$task_id" -lt 1 ] || [ "$task_id" -gt 9999 ]; then
        errors+=("L'ID de t√¢che doit √™tre entre 1 et 9999")
    fi
    
    # V√©rifier que la t√¢che existe
    local workdir=$(get_project_workdir)
    if [ -n "$workdir" ] && [ ! -f "$workdir/backlog/01-tasks/TASK-$task_id-"*.xml ]; then
        errors+=("La t√¢che #$task_id n'existe pas")
        
        # Sugg√©rer les t√¢ches existantes
        local existing_tasks=$(find "$workdir/backlog/01-tasks" -name "TASK-*.xml" 2>/dev/null | \
            sed 's/.*TASK-\([0-9]*\)-.*/\1/' | sort -n | tr '\n' ' ')
        
        if [ -n "$existing_tasks" ]; then
            echo -e "${BLUE}üîß T√¢ches existantes: $existing_tasks${NC}"
        else
            echo -e "${BLUE}üí° Aucune t√¢che cr√©√©e. Utilisez: aklo plan <PBI_ID>${NC}"
        fi
    fi
    
    # Afficher les r√©sultats
    if [ ${#errors[@]} -eq 0 ]; then
        echo -e "${GREEN}‚úÖ ID de t√¢che valide${NC}"
        return 0
    else
        echo -e "${RED}‚ùå ID de t√¢che invalide:${NC}"
        for error in "${errors[@]}"; do
            echo -e "${RED}   ‚Ä¢ $error${NC}"
        done
        return 1
    fi
}

# Validation du type de release
validate_release_type() {
    local release_type="$1"
    local valid_types=("major" "minor" "patch")
    
    if [ -z "$release_type" ]; then
        echo -e "${RED}‚ùå Type de release requis${NC}"
        echo -e "${BLUE}üìù Types valides: ${valid_types[*]}${NC}"
        return 1
    fi
    
    # V√©rifier si le type est valide
    local is_valid=false
    for valid_type in "${valid_types[@]}"; do
        if [ "$release_type" = "$valid_type" ]; then
            is_valid=true
            break
        fi
    done
    
    if [ "$is_valid" = false ]; then
        echo -e "${RED}‚ùå Type de release invalide: $release_type${NC}"
        echo -e "${BLUE}üìù Types valides: ${valid_types[*]}${NC}"
        echo -e "\n${BLUE}üìñ Explications:${NC}"
        echo "   ‚Ä¢ major: Changements incompatibles (v1.0.0 ‚Üí v2.0.0)"
        echo "   ‚Ä¢ minor: Nouvelles fonctionnalit√©s (v1.0.0 ‚Üí v1.1.0)"
        echo "   ‚Ä¢ patch: Corrections de bugs (v1.0.0 ‚Üí v1.0.1)"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ Type de release valide${NC}"
    return 0
}

# Validation de la priorit√©
validate_priority() {
    local priority="$1"
    local valid_priorities=("LOW" "MEDIUM" "HIGH" "CRITICAL")
    
    if [ -z "$priority" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Priorit√© non sp√©cifi√©e, utilisation de MEDIUM par d√©faut${NC}"
        return 0
    fi
    
    # Convertir en majuscules
    priority=$(echo "$priority" | tr '[:lower:]' '[:upper:]')
    
    # V√©rifier si la priorit√© est valide
    local is_valid=false
    for valid_priority in "${valid_priorities[@]}"; do
        if [ "$priority" = "$valid_priority" ]; then
            is_valid=true
            break
        fi
    done
    
    if [ "$is_valid" = false ]; then
        echo -e "${RED}‚ùå Priorit√© invalide: $priority${NC}"
        echo -e "${BLUE}üìù Priorit√©s valides: ${valid_priorities[*]}${NC}"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ Priorit√© valide: $priority${NC}"
    return 0
}

# Validation du nom de branche
validate_branch_name() {
    local branch_name="$1"
    local errors=()
    
    if [ -z "$branch_name" ]; then
        errors+=("Le nom de branche ne peut pas √™tre vide")
    fi
    
    # V√©rifier les caract√®res interdits
    if [[ "$branch_name" =~ [[:space:]~^:?*\[\]\\] ]]; then
        errors+=("Le nom de branche contient des caract√®res interdits")
    fi
    
    # V√©rifier qu'elle ne commence/finit pas par un point ou slash
    if [[ "$branch_name" =~ ^[./] ]] || [[ "$branch_name" =~ [./]$ ]]; then
        errors+=("Le nom de branche ne peut pas commencer/finir par . ou /")
    fi
    
    # V√©rifier la longueur
    if [ ${#branch_name} -gt 100 ]; then
        errors+=("Le nom de branche est trop long (max 100 caract√®res)")
    fi
    
    # V√©rifier que la branche n'existe pas d√©j√†
    if git show-ref --verify --quiet "refs/heads/$branch_name" 2>/dev/null; then
        errors+=("La branche '$branch_name' existe d√©j√†")
    fi
    
    # Afficher les r√©sultats
    if [ ${#errors[@]} -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Nom de branche valide${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Nom de branche invalide:${NC}"
        for error in "${errors[@]}"; do
            echo -e "${RED}   ‚Ä¢ $error${NC}"
        done
        
        echo -e "\n${BLUE}üìù Exemples de bons noms:${NC}"
        echo "   ‚Ä¢ task/1-authentication"
        echo "   ‚Ä¢ feature/user-dashboard"
        echo "   ‚Ä¢ bugfix/login-validation"
        
        return 1
    fi
}

# Validation du message de commit
validate_commit_message() {
    local message="$1"
    local errors=()
    local warnings=()
    
    if [ -z "$message" ]; then
        errors+=("Le message de commit ne peut pas √™tre vide")
    fi
    
    # V√©rifier la longueur de la premi√®re ligne
    local first_line=$(echo "$message" | head -1)
    if [ ${#first_line} -gt 72 ]; then
        warnings+=("La premi√®re ligne est longue (${#first_line} chars, recommand√©: ‚â§50)")
    fi
    
    if [ ${#first_line} -lt 10 ]; then
        warnings+=("La premi√®re ligne est courte (${#first_line} chars, recommand√©: ‚â•10)")
    fi
    
    # V√©rifier le format conventionnel (optionnel)
    if [[ ! "$first_line" =~ ^(feat|fix|docs|style|refactor|test|chore|perf)(\(.+\))?: ]]; then
        warnings+=("Le message ne suit pas le format conventionnel (feat:, fix:, etc.)")
    fi
    
    # V√©rifier qu'il ne finit pas par un point
    if [[ "$first_line" =~ \.$ ]]; then
        warnings+=("La premi√®re ligne ne devrait pas finir par un point")
    fi
    
    # Afficher les r√©sultats
    if [ ${#errors[@]} -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Message de commit valide${NC}"
        
        # Afficher les warnings
        for warning in "${warnings[@]}"; do
            echo -e "${YELLOW}‚ö†Ô∏è  $warning${NC}"
        done
        
        return 0
    else
        echo -e "${RED}‚ùå Message de commit invalide:${NC}"
        for error in "${errors[@]}"; do
            echo -e "${RED}   ‚Ä¢ $error${NC}"
        done
        
        echo -e "\n${BLUE}üìù Exemples de bons messages:${NC}"
        echo "   ‚Ä¢ feat: add user authentication"
        echo "   ‚Ä¢ fix: resolve login validation bug"
        echo "   ‚Ä¢ docs: update API documentation"
        echo "   ‚Ä¢ refactor: improve error handling"
        
        return 1
    fi
}

# Fonction utilitaire pour r√©cup√©rer le workdir du projet
get_project_workdir() {
    if [ -f ".aklo.conf" ]; then
        grep "PROJECT_WORKDIR=" .aklo.conf | cut -d'=' -f2
    else
        echo ""
    fi
}

# Fonction de validation interactive
interactive_validation() {
    local input_type="$1"
    local prompt="$2"
    local max_attempts="${3:-3}"
    
    local attempts=0
    local input=""
    
    while [ $attempts -lt $max_attempts ]; do
        echo -e "\n${BLUE}$prompt${NC}"
        read -r input
        
        if validate_input "$input" "$input_type"; then
            echo "$input"
            return 0
        fi
        
        attempts=$((attempts + 1))
        if [ $attempts -lt $max_attempts ]; then
            echo -e "\n${YELLOW}Tentative $attempts/$max_attempts. Essayez √† nouveau:${NC}"
        fi
    done
    
    echo -e "\n${RED}‚ùå Nombre maximum de tentatives atteint${NC}"
    return 1
}

# Fonction de validation en lot
batch_validation() {
    local validation_file="$1"
    local errors=0
    
    if [ ! -f "$validation_file" ]; then
        echo -e "${RED}‚ùå Fichier de validation non trouv√©: $validation_file${NC}"
        return 1
    fi
    
    echo -e "${BLUE}üîç Validation en lot depuis: $validation_file${NC}"
    echo "$(printf '%.0s‚îÄ' {1..50})"
    
    while IFS='|' read -r type value description; do
        # Ignorer les lignes vides et commentaires
        [[ -z "$type" || "$type" =~ ^#.*$ ]] && continue
        
        echo -e "\nüìã $description"
        if validate_input "$value" "$type"; then
            echo -e "${GREEN}   ‚úÖ Valide${NC}"
        else
            echo -e "${RED}   ‚ùå Invalide${NC}"
            errors=$((errors + 1))
        fi
    done < "$validation_file"
    
    echo -e "\n$(printf '%.0s‚îÄ' {1..50})"
    if [ $errors -eq 0 ]; then
        echo -e "${GREEN}üéâ Toutes les validations ont r√©ussi !${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $errors erreur(s) de validation${NC}"
        return 1
    fi
}

# Fonction principale pour les tests
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    echo "üß™ Tests de validation Aklo"
    echo "=========================="
    
    # Tests de titre PBI
    echo -e "\nüìã Test validation titre PBI:"
    validate_input "Authentification utilisateur" "pbi_title"
    validate_input "A" "pbi_title"  # Trop court
    validate_input "" "pbi_title"   # Vide
    
    # Tests d'ID
    echo -e "\nüî¢ Test validation ID:"
    validate_input "1" "pbi_id"
    validate_input "abc" "pbi_id"   # Non num√©rique
    validate_input "0" "pbi_id"     # Invalide
    
    # Tests de type de release
    echo -e "\nüöÄ Test validation release:"
    validate_input "major" "release_type"
    validate_input "invalid" "release_type"
fi