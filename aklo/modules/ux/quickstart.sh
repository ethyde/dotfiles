#!/usr/bin/env bash
#==============================================================================
# Am√©lioration UX : Mode Quick Start pour Aklo
# Guide interactif pour d√©butants
#==============================================================================

# Configuration des couleurs et styles
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'
BOLD='\033[1m'

# Fonction de banni√®re d'accueil
show_quickstart_banner() {
    clear
    echo -e "${CYAN}"
    cat << 'EOF'
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë              üöÄ AKLO QUICK START                     ‚ïë
    ‚ïë         Guide interactif pour d√©butants              ‚ïë
    ‚ïë                                                      ‚ïë
    ‚ïë   Apprenez Aklo √©tape par √©tape en 10-15 minutes    ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
}

# Fonction de progression
show_progress() {
    local step=$1
    local total=$2
    local description="$3"
    
    echo -e "\n${BLUE}‚îå‚îÄ √âtape $step/$total ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
    echo -e "${BLUE}‚îÇ${NC} ${BOLD}$description${NC}"
    echo -e "${BLUE}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}\n"
}

# Fonction de pause interactive
wait_for_user() {
    local message="${1:-Appuyez sur Entr√©e pour continuer...}"
    echo -e "\n${YELLOW}$message${NC}"
    read -r
}

# √âtape 1: Introduction au protocole Aklo
introduce_aklo() {
    show_progress 1 7 "Introduction au Protocole Aklo"
    
    cat << 'EOF'
ü§ñ Qu'est-ce qu'Aklo ?

Aklo est un protocole de d√©veloppement qui structure votre workflow :

üìã PBI (Product Backlog Items)
   ‚Üí Les fonctionnalit√©s √† d√©velopper

üîß T√¢ches 
   ‚Üí D√©composition technique des PBI

üåø Git Workflow
   ‚Üí Branches et commits structur√©s

üìö Charte IA
   ‚Üí 22 protocoles qui guident chaque √©tape

L'objectif : Transformer le chaos en processus ma√Ætris√© !
EOF
    
    wait_for_user
}

# √âtape 2: V√©rification de l'environnement
check_environment() {
    show_progress 2 7 "V√©rification de l'environnement"
    
    echo "üîç V√©rification des pr√©requis..."
    
    # V√©rifier Git
    if command -v git >/dev/null 2>&1; then
        echo -e "‚úÖ Git: $(git --version | cut -d' ' -f3)"
    else
        echo -e "‚ùå Git non install√©"
        echo "üí° Installez Git avant de continuer"
        exit 1
    fi
    
    # V√©rifier si on est dans un projet
    local project_name=$(basename "$(pwd)")
    echo -e "üìÅ Projet actuel: ${BOLD}$project_name${NC}"
    
    # V√©rifier si Aklo est d√©j√† configur√©
    if [ -f ".aklo.conf" ]; then
        echo -e "‚ö†Ô∏è  Aklo d√©j√† configur√© dans ce projet"
        echo "Voulez-vous continuer quand m√™me ? (y/N)"
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            echo "Configuration annul√©e."
            exit 0
        fi
    else
        echo -e "üÜï Nouveau projet Aklo"
    fi
    
    wait_for_user
}

# √âtape 3: Configuration du projet
configure_project() {
    show_progress 3 7 "Configuration du projet"
    
    echo "üîß Configuration d'Aklo pour votre projet..."
    
    # Demander le workdir
    echo -e "\n${YELLOW}O√π souhaitez-vous cr√©er les artefacts Aklo ?${NC}"
    echo "1) docs/ (recommand√©)"
    echo "2) aklo/"
    echo "3) Personnalis√©"
    echo -n "Votre choix (1-3) [1]: "
    read -r workdir_choice
    
    local workdir
    case "$workdir_choice" in
        2) workdir="aklo" ;;
        3) 
            echo -n "Chemin personnalis√©: "
            read -r workdir
            ;;
        *) workdir="docs" ;;
    esac
    
    echo -e "üìÇ R√©pertoire de travail: ${BOLD}$workdir${NC}"
    
    # Ex√©cuter aklo init (simul√© ici)
    echo "üöÄ Initialisation d'Aklo..."
    
    # Cr√©er la structure de base
    mkdir -p "$workdir/backlog/00-pbi"
    mkdir -p "$workdir/backlog/01-tasks"
    
    # Cr√©er le fichier de configuration
    cat > .aklo.conf << EOF
# Configuration Aklo
PROJECT_WORKDIR=$workdir
PROJECT_NAME=$(basename "$(pwd)")
CREATED_DATE=$(date +%Y-%m-%d)
EOF
    
    echo -e "‚úÖ Projet Aklo configur√© !"
    
    wait_for_user
}

# √âtape 4: Cr√©ation du premier PBI
create_first_pbi() {
    show_progress 4 7 "Cr√©ation de votre premier PBI"
    
    cat << 'EOF'
üìã Cr√©ons votre premier Product Backlog Item (PBI)

Un PBI d√©crit une fonctionnalit√© du point de vue utilisateur.

Exemples de bons PBI :
‚Ä¢ "Authentification utilisateur"
‚Ä¢ "Syst√®me de commentaires"  
‚Ä¢ "Export PDF des rapports"
‚Ä¢ "API de gestion des produits"
EOF
    
    echo -e "\n${YELLOW}Quel est le titre de votre premier PBI ?${NC}"
    echo -n "Titre: "
    read -r pbi_title
    
    if [ -z "$pbi_title" ]; then
        pbi_title="Ma premi√®re fonctionnalit√©"
        echo -e "Utilisation du titre par d√©faut: ${BOLD}$pbi_title${NC}"
    fi
    
    # Cr√©er le PBI
    local workdir=$(grep "PROJECT_WORKDIR=" .aklo.conf | cut -d'=' -f2)
    local pbi_file="$workdir/backlog/00-pbi/PBI-1-$(echo "$pbi_title" | tr ' ' '-' | tr '[:upper:]' '[:lower:]').xml"
    
    cat > "$pbi_file" << EOF
# $pbi_title

**Status:** PROPOSED  
**Priority:** MEDIUM  
**Created:** $(date +%Y-%m-%d)

## Description

D√©crivez ici la fonctionnalit√© souhait√©e du point de vue utilisateur.

## Crit√®res d'acceptation

- [ ] Crit√®re 1
- [ ] Crit√®re 2  
- [ ] Crit√®re 3

## Notes techniques

Ajoutez ici les consid√©rations techniques importantes.

## D√©finition de "Termin√©"

- [ ] Code d√©velopp√© et test√©
- [ ] Documentation mise √† jour
- [ ] Tests automatis√©s ajout√©s
- [ ] Review de code effectu√©e
EOF
    
    echo -e "‚úÖ PBI cr√©√©: ${BOLD}$(basename "$pbi_file")${NC}"
    echo -e "üìÑ Fichier: $pbi_file"
    
    wait_for_user
}

# √âtape 5: Planification des t√¢ches
plan_first_tasks() {
    show_progress 5 7 "Planification des t√¢ches"
    
    cat << 'EOF'
üîß D√©composons votre PBI en t√¢ches techniques

Les t√¢ches sont les √©tapes concr√®tes pour r√©aliser le PBI.

Exemples pour "Authentification utilisateur" :
‚Ä¢ Cr√©er le mod√®le User
‚Ä¢ Impl√©menter l'endpoint /login
‚Ä¢ Ajouter le middleware d'authentification
‚Ä¢ Cr√©er la page de connexion
‚Ä¢ √âcrire les tests
EOF
    
    echo -e "\n${YELLOW}Combien de t√¢ches voulez-vous cr√©er ? (1-5) [3]:${NC}"
    read -r task_count
    
    if [[ ! "$task_count" =~ ^[1-5]$ ]]; then
        task_count=3
    fi
    
    local workdir=$(grep "PROJECT_WORKDIR=" .aklo.conf | cut -d'=' -f2)
    
    for i in $(seq 1 "$task_count"); do
        echo -e "\n${CYAN}T√¢che $i/$task_count${NC}"
        echo -n "Titre de la t√¢che: "
        read -r task_title
        
        if [ -z "$task_title" ]; then
            task_title="T√¢che $i"
        fi
        
        # Cr√©er le fichier de t√¢che
        local task_file="$workdir/backlog/01-tasks/TASK-$i-1-$(echo "$task_title" | tr ' ' '-' | tr '[:upper:]' '[:lower:]').xml"
        
        cat > "$task_file" << EOF
# $task_title

**PBI:** 1  
**Status:** TODO  
**Estimate:** 2h  
**Created:** $(date +%Y-%m-%d)

## Description

Description technique de la t√¢che.

## Checklist

- [ ] Analyser les exigences
- [ ] Impl√©menter la solution
- [ ] √âcrire les tests
- [ ] Tester manuellement
- [ ] Mettre √† jour la documentation

## Notes

Notes techniques et consid√©rations importantes.
EOF
        
        echo -e "‚úÖ T√¢che cr√©√©e: ${BOLD}$(basename "$task_file")${NC}"
    done
    
    wait_for_user
}

# √âtape 6: Workflow Git
demonstrate_git_workflow() {
    show_progress 6 7 "Workflow Git avec Aklo"
    
    cat << 'EOF'
üåø Workflow Git structur√©

Aklo organise votre travail Git :

1. üìã Branche main/master
   ‚Üí Code stable et test√©

2. üîß Branches de t√¢ches  
   ‚Üí task/1-nom-de-la-tache

3. üöÄ Branches de feature
   ‚Üí feature/pbi-1-nom-du-pbi

4. üî• Branches de hotfix
   ‚Üí hotfix/description-du-fix

Chaque t√¢che = une branche = une PR/MR
EOF
    
    echo -e "\n${YELLOW}Voulez-vous initialiser Git dans ce projet ? (y/N):${NC}"
    read -r git_init
    
    if [[ "$git_init" =~ ^[Yy]$ ]]; then
        if [ ! -d ".git" ]; then
            git init
            echo -e "‚úÖ D√©p√¥t Git initialis√©"
            
            # Premier commit
            git add .
            git commit -m "üöÄ Initial Aklo setup

- Configuration Aklo
- Premier PBI cr√©√©
- T√¢ches planifi√©es

Generated by: aklo quickstart"
            
            echo -e "‚úÖ Premier commit cr√©√©"
        else
            echo -e "‚ÑπÔ∏è  Git d√©j√† initialis√©"
        fi
    fi
    
    wait_for_user
}

# √âtape 7: Prochaines √©tapes
show_next_steps() {
    show_progress 7 7 "Prochaines √©tapes"
    
    cat << 'EOF'
üéâ F√©licitations ! Votre projet Aklo est configur√© !

üîß Commandes essentielles √† retenir :

   aklo status                    # √âtat du projet
   aklo start-task 1              # Commencer la t√¢che #1
   aklo submit-task               # Soumettre pour review
   aklo propose-pbi "Titre"       # Cr√©er un nouveau PBI
   aklo plan 2                    # Planifier le PBI #2

üìö Pour approfondir :

   aklo --help                    # Aide compl√®te
   aklo <command> --help          # Aide sp√©cifique
   charte/PROTOCOLES/             # Documentation d√©taill√©e

üöÄ Workflow recommand√© :

   1. aklo start-task 1           # Commencer
   2. [D√©velopper la fonctionnalit√©]
   3. aklo submit-task            # Soumettre
   4. [Review et validation]
   5. aklo merge-task 1           # Merger
   6. R√©p√©ter avec la t√¢che suivante !
EOF
    
    # Afficher le statut final
    echo -e "\n${CYAN}üìä √âtat final de votre projet :${NC}"
    
    local workdir=$(grep "PROJECT_WORKDIR=" .aklo.conf | cut -d'=' -f2)
    local pbi_count=$(find "$workdir/backlog/00-pbi" -name "PBI-*.xml" 2>/dev/null | wc -l | tr -d ' ')
    local task_count=$(find "$workdir/backlog/01-tasks" -name "TASK-*.xml" 2>/dev/null | wc -l | tr -d ' ')
    
    echo -e "üìã PBI cr√©√©s: $pbi_count"
    echo -e "üîß T√¢ches planifi√©es: $task_count"
    echo -e "üåø Git: $(if [ -d ".git" ]; then echo "‚úÖ Initialis√©"; else echo "‚ùå Non initialis√©"; fi)"
    echo -e "üìÅ Workdir: $workdir"
    
    wait_for_user "Appuyez sur Entr√©e pour terminer le Quick Start..."
}

# Fonction principale du quickstart
aklo_quickstart() {
    local skip_tutorial=false
    local template=""
    
    # Parser les options
    while [[ $# -gt 0 ]]; do
        case $1 in
            --skip-tutorial)
                skip_tutorial=true
                shift
                ;;
            --template)
                template="$2"
                shift 2
                ;;
            --help|-h)
                show_quickstart_help
                return 0
                ;;
            *)
                echo "Option inconnue: $1"
                return 1
                ;;
        esac
    done
    
    # Banni√®re d'accueil
    show_quickstart_banner
    
    if [ "$skip_tutorial" = true ]; then
        echo -e "${YELLOW}Mode rapide activ√© - tutorial ignor√©${NC}"
        configure_project
        create_first_pbi
        plan_first_tasks
        demonstrate_git_workflow
    else
        # Workflow complet
        introduce_aklo
        check_environment
        configure_project
        create_first_pbi
        plan_first_tasks
        demonstrate_git_workflow
        show_next_steps
    fi
    
    echo -e "\n${GREEN}üéâ Quick Start termin√© ! Bon d√©veloppement avec Aklo !${NC}"
}

# Aide pour quickstart
show_quickstart_help() {
    cat << 'EOF'
üöÄ aklo quickstart - Mode guid√© pour d√©butants

USAGE:
    aklo quickstart
    aklo quickstart --template <type>
    aklo quickstart --skip-tutorial

DESCRIPTION:
    Guide interactif pour d√©couvrir et configurer Aklo.
    Parfait pour les nouveaux utilisateurs.

OPTIONS:
    --template <type>     Utilise un template pr√©d√©fini
    --skip-tutorial      Ignore le tutorial et va √† l'essentiel
    --help, -h          Affiche cette aide

TEMPLATES:
    webapp      Application web compl√®te
    api         API REST
    library     Biblioth√®que/package
    mobile      Application mobile
    desktop     Application desktop

DUR√âE:
    ‚Ä¢ Mode complet : 10-15 minutes
    ‚Ä¢ Avec --skip-tutorial : 3-5 minutes

Ce mode vous guide pour :
‚Ä¢ Comprendre les concepts Aklo
‚Ä¢ Configurer votre premier projet
‚Ä¢ Cr√©er votre premier PBI
‚Ä¢ Planifier vos premi√®res t√¢ches
‚Ä¢ Initialiser Git avec Aklo
EOF
}

# Point d'entr√©e si ex√©cut√© directement
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    aklo_quickstart "$@"
fi