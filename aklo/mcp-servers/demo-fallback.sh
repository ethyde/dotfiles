#!/bin/bash
#==============================================================================
# D√©monstration du syst√®me de fallback intelligent
#==============================================================================

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Couleurs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

show_banner() {
    echo -e "${CYAN}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                üé≠ DEMO FALLBACK AKLO                 ‚ïë
‚ïë           D√©monstration du syst√®me intelligent       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
}

demo_normal_environment() {
    echo -e "\n${BLUE}üåü Environnement Normal (Node.js disponible)${NC}"
    echo "$(printf '%.0s‚îÄ' {1..60})"
    
    echo -e "${YELLOW}Configuration g√©n√©r√©e :${NC}"
    ./generate-config.sh | head -5
    
    echo -e "\n${YELLOW}Serveurs d√©tect√©s :${NC}"
    if command -v node >/dev/null 2>&1; then
        echo "‚úÖ Node.js $(node --version) disponible"
        echo "‚úÖ npm $(npm --version) disponible"
        echo "üéØ ‚Üí Utilisation des serveurs Node.js (fonctionnalit√©s compl√®tes)"
    fi
}

demo_no_node() {
    echo -e "\n${BLUE}üîÑ Simulation sans Node.js${NC}"
    echo "$(printf '%.0s‚îÄ' {1..60})"
    
    echo -e "${YELLOW}Configuration g√©n√©r√©e :${NC}"
    (
        export PATH="/usr/bin:/bin"
        ./generate-config.sh | head -5
    )
    
    echo -e "\n${YELLOW}Fallback activ√© :${NC}"
    echo "‚ùå Node.js non disponible"
    echo "üêö ‚Üí Utilisation des serveurs Shell natifs (fonctionnalit√©s de base)"
}

demo_shell_servers() {
    echo -e "\n${BLUE}üß™ Test des Serveurs Shell Natifs${NC}"
    echo "$(printf '%.0s‚îÄ' {1..60})"
    
    echo -e "${YELLOW}Test serveur terminal :${NC}"
    echo '{"jsonrpc":"2.0","id":1,"method":"tools/list"}' | \
        ./shell-native/aklo-terminal.sh | \
        grep -o '"name":"[^"]*"' | \
        head -3 | \
        sed 's/"name":"/‚Ä¢ /' | \
        sed 's/"$//'
    
    echo -e "\n${YELLOW}Test serveur documentation :${NC}"
    echo '{"jsonrpc":"2.0","id":1,"method":"tools/list"}' | \
        ./shell-native/aklo-documentation.sh | \
        grep -o '"name":"[^"]*"' | \
        head -3 | \
        sed 's/"name":"/‚Ä¢ /' | \
        sed 's/"$//'
}

demo_comparison() {
    echo -e "\n${BLUE}‚öñÔ∏è  Comparaison des Versions${NC}"
    echo "$(printf '%.0s‚îÄ' {1..60})"
    
    cat << EOF
${YELLOW}Serveurs Node.js (Complets) :${NC}
‚Ä¢ aklo_execute          - Ex√©cution commandes compl√®tes
‚Ä¢ aklo_status           - Statut projet d√©taill√©  
‚Ä¢ safe_shell            - Shell s√©curis√© avec filtres
‚Ä¢ project_info          - Informations projet compl√®tes
‚Ä¢ read_protocol         - Lecture protocoles avec validation
‚Ä¢ search_documentation  - Recherche avanc√©e
‚Ä¢ validate_artefact     - Validation artefacts

${YELLOW}Serveurs Shell (Fallback) :${NC}
‚Ä¢ aklo_execute_shell    - Commandes aklo de base
‚Ä¢ aklo_status_shell     - Statut projet simple
‚Ä¢ read_protocol_shell   - Lecture protocoles basique
‚Ä¢ list_protocols_shell  - Liste protocoles
‚Ä¢ search_documentation_shell - Recherche simple

${GREEN}üéØ Avantage du Fallback :${NC}
‚Üí Fonctionnement garanti m√™me sans Node.js
‚Üí Installation zero-d√©pendance possible
‚Üí Compatibilit√© universelle (macOS, Linux, WSL)
EOF
}

demo_usage_examples() {
    echo -e "\n${BLUE}üí° Exemples d'Utilisation dans Cursor${NC}"
    echo "$(printf '%.0s‚îÄ' {1..60})"
    
    cat << EOF
${YELLOW}Commandes Terminal :${NC}
‚Ä¢ "Ex√©cute aklo status"
‚Ä¢ "Lance aklo propose-pbi 'Nouvelle feature'"
‚Ä¢ "Quel est le statut du projet ?"

${YELLOW}Commandes Documentation :${NC}
‚Ä¢ "Montre-moi le protocole 02-ARCHITECTURE"
‚Ä¢ "Liste tous les protocoles Aklo"
‚Ä¢ "Recherche 'git' dans la documentation"

${YELLOW}Avantages Version Node.js :${NC}
‚Ä¢ Validation JSON compl√®te
‚Ä¢ Gestion d'erreurs avanc√©e
‚Ä¢ Parsing sophistiqu√©
‚Ä¢ Fonctionnalit√©s √©tendues

${YELLOW}Avantages Version Shell :${NC}
‚Ä¢ Aucune d√©pendance externe
‚Ä¢ D√©marrage instantan√©
‚Ä¢ Compatibilit√© universelle
‚Ä¢ Maintenance simplifi√©e
EOF
}

main() {
    show_banner
    
    echo -e "${CYAN}Cette d√©monstration montre comment le syst√®me de fallback"
    echo -e "s'adapte automatiquement √† votre environnement.${NC}"
    
    demo_normal_environment
    demo_no_node
    demo_shell_servers
    demo_comparison
    demo_usage_examples
    
    echo -e "\n${GREEN}üöÄ Pour installer :${NC}"
    echo "   ./setup-mcp.sh"
    echo ""
    echo -e "${GREEN}üîß Pour g√©n√©rer config uniquement :${NC}"
    echo "   ./generate-config.sh > ~/.cursor-mcp-config.json"
    echo ""
    echo -e "${CYAN}‚ú® Le syst√®me choisira automatiquement la meilleure option !${NC}"
}

main "$@"