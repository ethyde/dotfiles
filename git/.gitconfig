# ==============================================================================
#                      Configuration Principale de Git
# ==============================================================================

# https://gist.github.com/pksunkara/988716
# http://www.git-attitude.fr/2013/04/03/configuration-git/
[core]
    editor = codium --wait
    whitespace = -trailing-space
    excludesfile = ~/.gitignore_global

[include]
    # Pour les configurations locales/privées (ex: user.email)
    path = ~/.gitconfig.local

[diff]
    mnemonicPrefix = true
    tool = default-difftool
    wordRegex = .

[difftool "default-difftool"]
    cmd = codium --wait --diff $LOCAL $REMOTE

[commit]
    status = true
    verbose = true

[push]
    default = upstream
    autoSetupRemote = true

[gitflow "prefix"]
    feature = feat/
    hotfix = fix/
    performance = perf/

[color]
    ui = auto
[color "branch"]
    current = yellow bold
    local = green bold
    remote = cyan bold
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse
[color "status"]
    added = green bold
    changed = yellow bold
    untracked = red bold

[merge]
    conflictStyle = diff3

[log]
    abbrevCommit = true

[url "https://github.com/"]
    insteadOf = gh:

# ==============================================================================
#                               ALIASES GIT
#
#   Cette section est organisée par catégories pour être parsée par l'alias
#   'git help' (qui utilise la fonction git_display_help dans ~/.git_functions)
#
# ==============================================================================
[alias]
    #   Aide & Introspection  =====
    # Affiche cette aide-mémoire formatée
    aliases = "!. ~/.shell_functions && git_display_help"

    #   Logs & Historique  =====
    # Log graphique et concis
    lg      = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    # Log graphique avec la liste des fichiers modifiés
    ll      = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue) %Creset' --abbrev-commit --decorate --numstat
    # Log sur une seule ligne
    oneline = log --pretty=oneline --abbrev-commit --graph
    # Affiche les changements depuis le dernier pull
    lc      = "!. ~/.shell_functions && git_log_since_last_pull"
    # Affiche les commits non "pushés"
    ups     = "!. ~/.shell_functions && git_log_unpushed"
    # Liste les tags de manière formatée et triée
    tags-l  = "!. ~/.shell_functions && git_list_tags_formatted"

    #   Workflow & Sauvegardes Rapides  =====
    # Ajoute tous les fichiers et ouvre l'éditeur pour le commit
    aac     = "!f() { . ~/.shell_functions && git_add_all_and_commit \"$@\"; }; f"
    # Commit rapide "SAVEPOINT" sans vérification des hooks
    save    = "!. ~/.shell_functions && git_savepoint"
    # Commit rapide "Work In Progress" avec un message en ligne de commande
    wip     = "!f() { . ~/.shell_functions && git_work_in_progress \"$@\"; }; f"
    # Annule le dernier commit mais garde les changements dans les fichiers
    undo    = reset HEAD~1 --mixed
    # "Efface" les changements mais les garde en sécurité dans le reflog
    wipe    = "!f() { . ~/.shell_functions && git_wipe_savepoint \"$@\"; }; f"

    #   Gestion des Branches  =====
    # Définit la branche amont (upstream) pour la branche actuelle
    su      = "!. ~/.shell_functions && git_set_upstream"
    # Affiche le nom de la branche actuelle
    b-name  = rev-parse --abbrev-ref HEAD
    # Démarre une nouvelle branche, la push et configure l'upstream
    b-start = "!f() { . ~/.shell_functions && git_branch_start \"$@\"; }; f"
    # Supprime une branche en local et sur le remote
    b-del   = "!f() { . ~/.shell_functions && git_branch_delete \"$@\"; }; f"
    # Force la suppression une branche en local et sur le remote
    b-del-f = "!f() { . ~/.shell_functions && git_branch_delete_force \"$@\"; }; f"
    # Lance un rebase interactif depuis le point de divergence avec la branche cible (master par défaut)
    b-squash = "!f() { . ~/.shell_functions && git_branch_squash \"$@\"; }; f"

    #   Synchronisation & Nettoyage  =====
    # Met à jour la branche locale (pull --rebase) et les submodules
    sync    = "!f() { . ~/.shell_functions && git_branch_sync \"$@\"; }; f"
    # Supprime les branches locales déjà fusionnées dans la branche cible (master par défaut)
    b-clean = "!f() { . ~/.shell_functions && git_branch_clean \"$@\"; }; f"
    # Workflow complet de fin de tâche : sync, nettoyage des branches et des dépendances
    b-done  = "!f() { . ~/.shell_functions && git_branch_done \"$@\"; }; f"
    # Nettoyage des dépendances NPM pour la production
    n-clean = "!. ~/.shell_functions && git_npm_clean"

    #   Gestion des Pull Requests (PR)  =====
    # Récupère une PR. Usage : git pr <gh|bb|gl> <numéro_pr> [nom_branche_locale]
    pr      = "!f() { . ~/.shell_functions && git_pull_request \"$@\"; }; f"

    #   Raccourcis Simples (1-2 lettres)  =====
    a       = add
    aa      = add --all
    ai      = add --interactive
    b       = branch
    ba      = branch --all
    bd      = branch --delete
    bm      = branch --move
    c       = commit
    ca      = commit --amend
    caa     = commit --all --amend
    co      = checkout
    cob     = checkout -b