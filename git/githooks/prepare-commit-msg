#!/bin/sh

# This way you can customize which branches should be skipped when
# prepending commit message.
# Source : https://gist.github.com/bartoszmajsak/1396344
if [ -z "$BRANCHES_TO_SKIP" ]; then
  BRANCHES_TO_SKIP=(master develop test)
fi

BRANCH_NAME=$(git symbolic-ref --short HEAD)
BRANCH_NAME="${BRANCH_NAME##*/}"

BRANCH_EXCLUDED=$(printf "%s\n" "${BRANCHES_TO_SKIP[@]}" | grep -c "^$BRANCH_NAME$")
BRANCH_IN_COMMIT=$(grep -c "\[$BRANCH_NAME\]" $1)

if [ -n "$BRANCH_NAME" ] && ! [[ $BRANCH_EXCLUDED -eq 1 ]] && ! [[ $BRANCH_IN_COMMIT -ge 1 ]]; then 
  sed -i.bak -e "1s/^/[$BRANCH_NAME] /" $1
fi

# Display the last 5 commit messages when I'm editing a commit message.
# Source : http://codeinthehole.com/writing/enhancing-your-git-commit-editor/
# FIXME: add garbage text when use with -m option
# BRANCH_NAME=$(git branch | grep '*' | sed 's/* //')
# if [ $BRANCH_NAME != "(no branch)" ]
# then
#     echo "#" >> $1
#     echo "# Last 5 commit messages" >> $1
#     echo "# ----------------------" >> $1
#     COMMITS=`git log --pretty=format:"# %h %s [%an]" -5`
#     echo "${COMMITS}" >> $1
# fi