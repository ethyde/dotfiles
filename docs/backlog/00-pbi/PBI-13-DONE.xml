<pbi id="13" title="Stabilisation de l'architecture de chargement des modules Aklo">
  <metadata>
    <status>DONE</status>
    <created_date>2025-07-04</created_date>
    <started_date>2025-07-04</started_date>
    <completed_date>2025-07-12</completed_date>
    <priority>CRITICAL</priority>
    <effort_estimated>13</effort_estimated>
    <effort_realized>15</effort_realized>
  </metadata>
  <content>
    <user_story>
      <role>En tant que développeur utilisant aklo</role>
      <action>je veux une architecture de chargement des modules qui soit robuste et performante</action>
      <benefit>afin de garantir la stabilité de l'outil tout en gardant des temps d'exécution rapides pour toutes les commandes.</benefit>
    </user_story>
    <acceptance_criteria>
      <criterion state="done">Toutes les commandes `aklo` sont fonctionnelles sans erreur de "commande inconnue".</criterion>
      <criterion state="done">Le temps de démarrage des commandes simples (ex: `get_config`) est inférieur à 100ms.</criterion>
      <criterion state="done">L'outil fonctionne de manière identique qu'il soit appelé via un chemin direct ou un lien symbolique.</criterion>
      <criterion state="done">Le code est simple, maintenable et ne contient plus de logique de chargement conditionnel complexe.</criterion>
      <criterion state="done">Les tests de régression critiques passent avec succès.</criterion>
    </acceptance_criteria>
    <technical_specifications>
      <description>
        Architecture finale adoptée :
        <item>
          **Abandon du Lazy Loading :** L'architecture initiale de chargement paresseux (lazy loading) avec profils adaptatifs s'est avérée trop complexe et source de régressions critiques (chemins, scope des variables).
        </item>
        <item>
          **Chargement Direct et Explicite :** La solution finale repose sur un chargement direct de tous les modules de commande au démarrage du script principal `aklo/bin/aklo`. Cette approche garantit la robustesse et la prévisibilité du chargement.
        </item>
        <item>
          **Résolution Fiable des Chemins :** Utilisation systématique d'une variable `AKLO_PROJECT_ROOT` fiable, basée sur le chemin réel du script, pour éviter les problèmes liés aux liens symboliques.
        </item>
        <code language="bash"><![CDATA[
# Dans aklo/bin/aklo

# Détermination fiable de la racine du projet
AKLO_REAL_PATH=$(realpath "$0")
AKLO_BIN_DIR=$(dirname "$AKLO_REAL_PATH")
AKLO_PROJECT_ROOT=$(dirname "$AKLO_BIN_DIR")
export AKLO_PROJECT_ROOT

# Chargement direct de tous les modules nécessaires
source "${AKLO_PROJECT_ROOT}/aklo/modules/core/config.sh"
source "${AKLO_PROJECT_ROOT}/aklo/modules/core/parser.sh"
# ... etc pour tous les modules ...
        ]]></code>
        Problème résolu :
        <item>Le paradoxe de performance a été résolu non pas par un chargement conditionnel, mais par l'optimisation des modules eux-mêmes (ex: cache regex en mémoire) et la fiabilisation du chargement, ce qui garantit à la fois performance et stabilité.</item>
      </description>
    </technical_specifications>
    <architecture_documents>
      <document ref="../02-architecture/ARCH-13-1-VALIDATED.xml">L'architecture initialement validée a servi de base à l'exploration mais a été écartée au profit d'une solution plus simple.</document>
    </architecture_documents>
    <associated_tasks>
      <task ref="TASK-13-1" status="done">Détection et classification (abandonné)</task>
      <task ref="TASK-13-2" status="done">Implémentation du lazy loading (abandonné)</task>
      <task ref="TASK-13-4" status="done">Refactoring du script principal (réalisé avec la nouvelle architecture)</task>
      <task ref="TASK-13-5" status="done">Tests de performance (validant la nouvelle architecture)</task>
    </associated_tasks>
  </content>
</pbi>
