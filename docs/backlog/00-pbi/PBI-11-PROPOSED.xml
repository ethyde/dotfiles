<pbi id="11" title="Créer serveur MCP documentation shell natif étendu">
  <metadata>
    <status>PROPOSED</status>
    <created_date>2025-01-28</created_date>
    <owner>Documentation Team</owner>
    <priority>HIGH</priority>
    <effort_estimated>6</effort_estimated>
  </metadata>
  <content>
    <user_story>
      <role>En tant qu'utilisateur aklo</role>
      <action>je veux un serveur MCP documentation shell natif offrant toutes les fonctionnalités du serveur Node.js</action>
      <benefit>afin de bénéficier d'une validation d'artefacts et d'une recherche avancée sans dépendances Node.js</benefit>
    </user_story>
    <business_objectives>
      <objective>Parité fonctionnelle : Mêmes capacités que le serveur Node.js</objective>
      <objective>Performance : Serveur léger et rapide</objective>
      <objective>Universalité : Fonctionne sur tous les systèmes Unix</objective>
      <objective>Maintenance : Code shell standard, facile à déboguer</objective>
    </business_objectives>
    <current_analysis>
      <shell_server_tools>
        <tool>read_protocol_shell : Lecture protocoles basique</tool>
        <tool>list_protocols_shell : Liste protocoles</tool>
        <tool>search_documentation_shell : Recherche simple</tool>
      </shell_server_tools>
      <node_server_tools>
        <tool>read_protocol : Lecture protocoles avec sections</tool>
        <tool>list_protocols : Liste avec métadonnées</tool>
        <tool>search_documentation : Recherche avec scope</tool>
        <tool>read_artefact : Lecture artefacts avec métadonnées</tool>
        <tool>project_documentation_summary : Résumé complet</tool>
        <tool>validate_artefact : Validation selon protocoles</tool>
        <tool>server_info : Informations serveur</tool>
      </node_server_tools>
    </current_analysis>
    <features_to_add>
      <feature>Lecture Artefacts (read_artefact) : Parsing en-têtes, extraction métadonnées, support tous types, validation format basique</feature>
      <feature>Validation Artefacts (validate_artefact) : Validation structure selon protocoles, vérification champs obligatoires, contrôle cohérence, rapport détaillé</feature>
      <feature>Résumé Documentation (project_documentation_summary) : Scan complet, comptage artefacts, métriques projet, génération rapport structuré</feature>
      <feature>Recherche Avancée : Recherche avec scope, filtrage par type, recherche dans métadonnées, résultats avec contexte</feature>
    </features_to_add>
    <technical_approach>
      <parsing_metadata>
        <code language="bash"><![CDATA[
extract_metadata() {
    local file="$1"
    # Extraction en-tête YAML/Markdown
    # Status, dates, owner, type
    # Validation format
}
        ]]></code>
      </parsing_metadata>
      <validation_protocols>
        <code language="bash"><![CDATA[
validate_pbi() {
    # Vérification structure PBI
    # Champs obligatoires
    # Cohérence business
}

validate_task() {
    # Vérification structure TASK
    # Lien PBI parent
    # Critères acceptation
}
        ]]></code>
      </validation_protocols>
      <search_multi_scope>
        <code language="bash"><![CDATA[
search_with_scope() {
    local query="$1"
    local scope="$2"  # protocols|artefacts|all
    
    case "$scope" in
        "protocols") search_protocols "$query" ;;
        "artefacts") search_artefacts "$query" ;;
        "all") search_all "$query" ;;
    esac
}
        ]]></code>
      </search_multi_scope>
      <generate_summary>
        <code language="bash"><![CDATA[
generate_project_summary() {
    # Scan docs/backlog/
    # Comptage par type/status
    # Métriques temporelles
    # Format JSON/Markdown
}
        ]]></code>
      </generate_summary>
      <server_structure>
        <code language="bash"><![CDATA[
#!/bin/sh
# Serveur MCP Documentation Aklo - Version Complète

# 7 outils disponibles
handle_tool_call() {
    case "$tool_name" in
        "read_protocol") handle_read_protocol ;;
        "list_protocols") handle_list_protocols ;;
        "search_documentation") handle_search_documentation ;;
        "read_artefact") handle_read_artefact ;;
        "validate_artefact") handle_validate_artefact ;;
        "project_documentation_summary") handle_project_summary ;;
        "server_info") handle_server_info ;;
    esac
}
        ]]></code>
      </server_structure>
    </technical_approach>
    <acceptance_criteria>
      <criterion state="todo">7 outils équivalents au serveur Node.js</criterion>
      <criterion state="todo">Parsing métadonnées artefacts fonctionnel</criterion>
      <criterion state="todo">Validation complète selon protocoles Aklo</criterion>
      <criterion state="todo">Recherche avancée avec scopes</criterion>
      <criterion state="todo">Génération résumés projet automatique</criterion>
      <criterion state="todo">Performance équivalente ou supérieure</criterion>
      <criterion state="todo">Tests complets pour tous les outils</criterion>
      <criterion state="todo">Documentation mise à jour</criterion>
    </acceptance_criteria>

    <associated_tasks>
      <task>TASK-11-1: Implémenter read_artefact shell natif</task>
      <task>TASK-11-2: Implémenter validate_artefact shell natif (revue architecturale requise)</task>
      <task>TASK-11-3: Implémenter project_documentation_summary shell natif</task>
      <task>TASK-11-4: Implémenter server_info et améliorer la recherche</task>
    </associated_tasks>
    <dependencies>
      <dependency>Accès aux protocoles Aklo (charte/)</dependency>
      <dependency>Structure projet Aklo standard</dependency>
      <dependency>Optionnel : jq pour JSON complexe</dependency>
    </dependencies>
    <expected_impact>
      <impact>Fonctionnalités : +100% (parité Node.js)</impact>
      <impact>Performance : +30% (pas d'overhead Node.js)</impact>
      <impact>Adoption : +200% (0 dépendances)</impact>
      <impact>Maintenance : +150% (shell standard)</impact>
    </expected_impact>
    <estimation>
      <complexity>Moyenne-Haute (5-6 jours)</complexity>
      <priority>Haute (parité fonctionnelle)</priority>
    </estimation>
  </content>
</pbi>