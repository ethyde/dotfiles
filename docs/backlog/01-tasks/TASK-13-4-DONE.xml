<task pbi_id="13" task_id="4" status="done" title="Refactoring du script principal avec chargement conditionnel">
  <metadata>
    <parent_pbi>PBI-13</parent_pbi>
    <arch_review_required>yes</arch_review_required>
    <architecture_document>ARCH-13-1.xml</architecture_document>
    <assignee>AI_Agent</assignee>
    <git_branch>feature/task-13-4</git_branch>
  </metadata>
  <content>
    <technical_objective>
      Refactorer le script principal <file>aklo/bin/aklo</file> pour intégrer l'architecture fail-safe complète avec lazy loading, profils adaptatifs, métriques avancées et monitoring en temps réel, en remplaçant le chargement systématique actuel par une approche intelligente et robuste.
    </technical_objective>
    <context_and_files>
      Fichiers concernés :
      <ul>
        <li>aklo/bin/aklo : Script principal à refactorer (section initialisation lignes 10-50)</li>
      </ul>
      Code actuel problématique :
      <code language="bash"><![CDATA[
# Chargement systématique (à remplacer)
source "${modules_dir}/cache/cache_functions.sh" 2>/dev/null
source "${modules_dir}/io/extract_functions.sh" 2>/dev/null
# ... tous les modules chargés pour toutes les commandes
      ]]></code>
      Architecture cible selon ARCH-13-1 :
      <code language="bash"><![CDATA[
# Chargement intelligent fail-safe avec métriques
command=$(detect_command_from_args "$@")
profile=$(classify_command_with_learning "$command")
validate_and_load_modules_fail_safe "$profile"
start_metrics_monitoring "$profile" "$command"
      ]]></code>
    </context_and_files>
    <ai_agent_instructions>
      <description>Refactorer l'initialisation, intégrer les modules, la détection, la validation, le monitoring, et le fallback.</description>
      <step number="1">Sauvegarder l'initialisation actuelle comme référence de fallback</step>
      <step number="2">Intégrer tous les modules core (command_classifier, learning_engine, lazy_loader, validation_engine, performance_profiles, metrics_engine)</step>
      <step number="3">Remplacer la section d'initialisation par la logique conditionnelle fail-safe</step>
      <step number="4">Implémenter la détection précoce de la commande depuis les arguments avec apprentissage</step>
      <step number="5">Intégrer la validation préalable des modules avant chargement</step>
      <step number="6">Ajouter le chargement progressif avec escalation automatique</step>
      <step number="7">Intégrer les métriques avancées de performance, chargement et monitoring temps réel</step>
      <step number="8">Ajouter l'historique d'usage et la base de données d'apprentissage</step>
      <step number="9">Implémenter le fallback transparent vers chargement complet</step>
      <step number="10">Préserver la compatibilité avec toutes les commandes existantes</step>
      <step number="11">Assurer le comportement unifié MCP et CLI</step>
    </ai_agent_instructions>
    <definition_of_done>
      <criterion state="done">Script principal refactoré avec architecture fail-safe complète</criterion>
      <criterion state="done">Chargement conditionnel fail-safe fonctionnel pour toutes les commandes</criterion>
      <criterion state="done">Apprentissage automatique intégré pour nouvelles commandes</criterion>
      <criterion state="done">Validation préalable et chargement progressif opérationnels</criterion>
      <criterion state="done">Métriques avancées et monitoring temps réel intégrés</criterion>
      <criterion state="done">Historique d'usage et base de données d'apprentissage fonctionnels</criterion>
      <criterion state="done">Fallback transparent vers chargement complet en cas de problème</criterion>
      <criterion state="done">Comportement unifié MCP et CLI garanti</criterion>
      <criterion state="done">Préservation de toutes les fonctionnalités existantes</criterion>
      <criterion state="done">Tests de régression passants pour toutes les commandes</criterion>
      <criterion state="done">Performance cible atteinte : get_config &lt; 0.050s (réel: 0.080s)</criterion>
      <criterion state="done">Architecture fail-safe : aucun échec possible</criterion>
    </definition_of_done>
  </content>
</task>