<task pbi_id="9" task_id="6" status="todo" title="Configuration et documentation de l'architecture hybride">
  <metadata>
    <parent_pbi>PBI-9</parent_pbi>
    <arch_review_required>no</arch_review_required>
    <architecture_document>ARCH-9-1-VALIDATED.xml</architecture_document>
    <assignee>Non assigné</assignee>
    <git_branch>feature/task-9-6</git_branch>
  </metadata>
  <content>
    <technical_objective>
      Créer le fichier de configuration <file>/aklo/config/commands.whitelist</file>, documenter l'architecture hybride validée et s'assurer que l'installation de <code>jq</code> est bien intégrée dans <file>/apps.sh</file>.
      Fichiers à créer/modifier :
      <file>/aklo/config/commands.whitelist</file> (à créer)
      <file>/aklo/docs/mcp_shell_native_architecture.xml</file> (à créer)
      <file>/apps.sh</file> (déjà modifié)
      Résultat attendu :
      <ul>
        <li>Fichier de configuration whitelist créé et peuplé</li>
        <li>Documentation architecturale complète et claire</li>
        <li>Installation de <code>jq</code> validée et documentée</li>
        <li>Tests d'intégration multi-environnements</li>
      </ul>
    </technical_objective>
    <context_and_files>
      Architecture validée : <file>../02-architecture/ARCH-9-1-VALIDATED.xml</file>
      Whitelist initiale :
      <code language="text"><![CDATA[
# Fichier aklo/config/commands.whitelist
# Une commande par ligne
ls
cat
grep
git
npm
node
cd
pwd
echo
      ]]></code>
      Plan de documentation :
      <code language="markdown"><![CDATA[
# /aklo/docs/mcp_shell_native_architecture.xml

## 1. Vue d'ensemble
Architecture hybride pour serveurs MCP shell natifs

## 2. Sécurité : safe_shell
- Whitelist configurable
- Gestion des timeouts
- Validation des arguments

## 3. Parsing JSON : project_info
- Détection `jq` automatique
- Fallback manuel optimisé
- Gestion des erreurs

## 4. Installation et Dépendances
- Installation de `jq` via `apps.sh`
- Compatibilité multi-systèmes
      ]]></code>
    </context_and_files>
    <ai_agent_instructions>
      <description>Instructions séquentielles pour l'agent :</description>
      <step number="1">Créer le fichier <code>commands.whitelist</code> dans <file>/aklo/config/</file></step>
      <step number="2">Peupler le fichier avec la liste des commandes autorisées initiales</step>
      <step number="3">Créer le document de documentation <file>/aklo/docs/mcp_shell_native_architecture.xml</file></step>
      <step number="4">Rédiger la documentation en se basant sur <file>ARCH-9-1-VALIDATED.xml</file></step>
      <step number="5">Vérifier que l'ajout de <code>jq</code> dans <file>apps.sh</file> est correct</step>
      <step number="6">Ajouter un test pour vérifier l'existence de <code>commands.whitelist</code></step>
      <step number="7">Documenter le processus de mise à jour de la whitelist</step>
      <step number="8">Valider la cohérence de l'ensemble de la documentation</step>
    </ai_agent_instructions>
    <definition_of_done>
      <criterion state="todo">Le fichier commands.whitelist est créé et peuplé</criterion>
      <criterion state="todo">La documentation architecturale est complète et claire</criterion>
      <criterion state="todo">L'installation de jq est validée et documentée</criterion>
      <criterion state="todo">Le processus de mise à jour de la whitelist est documenté</criterion>
      <criterion state="todo">La documentation est cohérente avec l'implémentation</criterion>
      <criterion state="todo">Un test d'existence de la whitelist est ajouté</criterion>
      <criterion state="todo">Le document d'architecture est lié dans la documentation</criterion>
      <criterion state="todo">La task est validée par une revue de la documentation</criterion>
      <criterion state="todo">Les chemins de fichiers sont corrects et vérifiés</criterion>
    </definition_of_done>
  </content>
</task>