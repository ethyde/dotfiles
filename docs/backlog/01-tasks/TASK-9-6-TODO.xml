# TASK-9-6 : Configuration et documentation de l'architecture hybride

---

## DO NOT EDIT THIS SECTION MANUALLY

**PBI Parent:** [PBI-9](../00-pbi/PBI-9-PROPOSED.xml)
**Revue Architecturale Requise:** Non
**Document d'Architecture (si applicable):** [ARCH-9-1-VALIDATED.xml](../02-architecture/ARCH-9-1-VALIDATED.xml)
**Assigné à:** `Non assigné`
**Branche Git:** `feature/task-9-6`

---

## 1. Objectif Technique

Créer le fichier de configuration `commands.whitelist`, documenter l'architecture hybride validée et s'assurer que l'installation de `jq` est bien intégrée dans `apps.sh`.

**Fichiers à créer/modifier :**
- `/aklo/config/commands.whitelist` (à créer)
- `/aklo/docs/mcp_shell_native_architecture.xml` (à créer)
- `/apps.sh` (déjà modifié)

**Résultat attendu :**
- Fichier de configuration whitelist créé et peuplé
- Documentation architecturale complète et claire
- Installation de `jq` validée et documentée
- Tests d'intégration multi-environnements

## 2. Contexte et Fichiers Pertinents

### Architecture Validée
[ARCH-9-1-VALIDATED.xml](../02-architecture/ARCH-9-1-VALIDATED.xml)

### Whitelist initiale
```
# Fichier aklo/config/commands.whitelist
# Une commande par ligne
ls
cat
grep
git
npm
node
cd
pwd
echo
```

### Plan de documentation
```markdown
# /aklo/docs/mcp_shell_native_architecture.xml

## 1. Vue d'ensemble
Architecture hybride pour serveurs MCP shell natifs

## 2. Sécurité : safe_shell
- Whitelist configurable
- Gestion des timeouts
- Validation des arguments

## 3. Parsing JSON : project_info
- Détection `jq` automatique
- Fallback manuel optimisé
- Gestion des erreurs

## 4. Installation et Dépendances
- Installation de `jq` via `apps.sh`
- Compatibilité multi-systèmes
```

## 3. Instructions Détaillées pour l'AI_Agent (Prompt)

1. **Créer le fichier `commands.whitelist`** dans `/aklo/config/`
2. **Peupler le fichier** avec la liste des commandes autorisées initiales
3. **Créer le document de documentation** `/aklo/docs/mcp_shell_native_architecture.xml`
4. **Rédiger la documentation** en se basant sur `ARCH-9-1-VALIDATED.xml`
5. **Vérifier que l'ajout de `jq` dans `apps.sh`** est correct
6. **Ajouter un test** pour vérifier l'existence de `commands.whitelist`
7. **Documenter le processus** de mise à jour de la whitelist
8. **Valider la cohérence** de l'ensemble de la documentation

## 4. Définition de "Terminé" (Definition of Done)

- [ ] Le fichier `commands.whitelist` est créé et peuplé
- [ ] La documentation architecturale est complète et claire
- [ ] L'installation de `jq` est validée et documentée
- [ ] Le processus de mise à jour de la whitelist est documenté
- [ ] La documentation est cohérente avec l'implémentation
- [ ] Un test d'existence de la whitelist est ajouté
- [ ] Le document d'architecture est lié dans la documentation
- [ ] La task est validée par une revue de la documentation
- [ ] Les chemins de fichiers sont corrects et vérifiés