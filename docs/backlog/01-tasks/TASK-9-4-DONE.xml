<task pbi_id="9" task_id="4" status="done" title="Extension outil aklo_status avec métriques détaillées">
  <metadata>
    <parent_pbi>PBI-9</parent_pbi>
    <arch_review_required>no</arch_review_required>
    <architecture_document>ARCH-9-1.xml</architecture_document>
    <assignee>Non assigné</assignee>
    <git_branch>feature/task-9-4</git_branch>
  </metadata>
  <content>
    <technical_objective>
      Étendre l'outil <code>aklo_status_shell</code> existant pour inclure des métriques détaillées du projet, l'analyse des artefacts et un rapport complet, atteignant la parité avec <code>aklo_status</code> du serveur Node.js.
      Fichiers à modifier : <file>/aklo/modules/mcp/shell-native/aklo-terminal.sh</file>
      Résultat attendu :
      <ul>
        <li>Statut projet détaillé avec métriques complètes</li>
        <li>Analyse des artefacts par type et statut</li>
        <li>Rapport de santé du projet</li>
        <li>Parité fonctionnelle avec le serveur Node.js</li>
      </ul>
    </technical_objective>
    <context_and_files>
      Serveur Node.js de référence : <file>aklo/modules/mcp/terminal/index.js</file>
      <code language="bash"><![CDATA[
calculate_project_metrics() {
    local workdir="$1"
    # PBI par statut
    local pbi_proposed=$(ls "$workdir/docs/backlog/00-pbi/"*-PROPOSED.xml 2>/dev/null | wc -l)
    local pbi_done=$(ls "$workdir/docs/backlog/00-pbi/"*-DONE.xml 2>/dev/null | wc -l)
    # Tasks par statut
    local tasks_todo=$(ls "$workdir/docs/backlog/01-tasks/"*-TODO.xml 2>/dev/null | wc -l)
    local tasks_done=$(ls "$workdir/docs/backlog/01-tasks/"*-DONE.xml 2>/dev/null | wc -l)
    # Configuration aklo
    local aklo_config="Non configuré"
    if [ -f "$workdir/.aklo.conf" ]; then
        aklo_config="Configuré"
    fi
    # Dernière activité
    local last_activity=$(find "$workdir/docs/backlog" -name "*.xml" -type f -exec stat -f "%m %N" {} \; 2>/dev/null | sort -nr | head -1 | cut -d' ' -f2- | xargs basename)
    echo "PBI_PROPOSED:$pbi_proposed"
    echo "PBI_DONE:$pbi_done"
    echo "TASKS_TODO:$tasks_todo"
    echo "TASKS_DONE:$tasks_done"
    echo "AKLO_CONFIG:$aklo_config"
    echo "LAST_ACTIVITY:$last_activity"
}
      ]]></code>
      Fonction shell à étendre : <file>aklo/modules/mcp/shell-native/aklo-terminal.sh</file>
    </context_and_files>
    <ai_agent_instructions>
      <description>Instructions séquentielles pour l'agent :</description>
      <step number="1">Analyser la fonction <code>handle_aklo_status</code> existante dans le serveur shell natif</step>
      <step number="2">Implémenter le calcul des métriques détaillées du projet</step>
      <step number="3">Ajouter l'analyse des artefacts par type et statut</step>
      <step number="4">Créer un rapport de santé du projet avec indicateurs</step>
      <step number="5">Améliorer le formatage de la réponse JSON</step>
      <step number="6">Ajouter la gestion des projets non initialisés avec aklo</step>
      <step number="7">Tester sur différents types de projets (avec/sans aklo)</step>
      <step number="8">Valider la parité avec le serveur Node.js</step>
    </ai_agent_instructions>
    <definition_of_done>
      <criterion state="done">Les métriques détaillées du projet sont calculées correctement</criterion>
      <criterion state="done">L'analyse des artefacts par type et statut fonctionne</criterion>
      <criterion state="done">Le rapport de santé du projet est informatif et complet</criterion>
      <criterion state="done">La gestion des projets non initialisés est robuste</criterion>
      <criterion state="done">Le formatage JSON est propre et structuré</criterion>
      <criterion state="done">Tests manuels réussis sur projets avec et sans aklo</criterion>
      <criterion state="done">Parité fonctionnelle atteinte avec le serveur Node.js</criterion>
      <criterion state="done">Documentation mise à jour dans les commentaires du code</criterion>
      <criterion state="done">Performance acceptable sur gros projets (&gt;100 artefacts)</criterion>
    </definition_of_done>
  </content>
</task>