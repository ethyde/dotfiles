<task pbi_id="9" task_id="5" status="todo" title="Tests d'intégration et validation de performance">
  <metadata>
    <parent_pbi>PBI-9</parent_pbi>
    <arch_review_required>no</arch_review_required>
    <architecture_document>ARCH-9-1.xml</architecture_document>
    <assignee>Non assigné</assignee>
    <git_branch>feature/task-9-5</git_branch>
  </metadata>
  <content>
    <technical_objective>
      Créer une suite de tests d'intégration complète pour valider le bon fonctionnement des 4 outils MCP shell natifs étendus et mesurer les gains de performance par rapport au serveur Node.js.
      Fichiers à créer :
      <file>/aklo/tests/test_mcp_shell_native_extended.sh</file>
      <file>/aklo/tests/benchmark_mcp_shell_vs_node.sh</file>
      Résultat attendu :
      <ul>
        <li>Tests automatisés pour tous les outils MCP shell natifs</li>
        <li>Benchmark de performance shell vs Node.js</li>
        <li>Validation de la parité fonctionnelle</li>
        <li>Rapport de performance détaillé</li>
      </ul>
    </technical_objective>
    <context_and_files>
      Outils à tester :
      <ul>
        <li>aklo_execute_shell (étendu)</li>
        <li>aklo_status_shell (étendu)</li>
        <li>safe_shell (nouveau)</li>
        <li>project_info (nouveau)</li>
      </ul>
      Tests existants de référence :
      <file>aklo/tests/test_aklo_functions.sh</file>
      <file>aklo/tests/test_framework.sh</file>
      <file>aklo/tests/benchmark_profiles.sh</file>
      Scénarios de test :
      <code language="bash"><![CDATA[
# Tests fonctionnels
test_aklo_execute_validation()
test_aklo_status_metrics()
test_safe_shell_security()
test_project_info_parsing()

# Tests de performance
benchmark_startup_time()
benchmark_memory_usage()
benchmark_response_time()
      ]]></code>
    </context_and_files>
    <ai_agent_instructions>
      <description>Instructions séquentielles pour l'agent :</description>
      <step number="1">Créer le script de test d'intégration <code>test_mcp_shell_native_extended.sh</code></step>
      <step number="2">Implémenter les tests pour chaque outil :
        <ul>
          <li>aklo_execute_shell : validation commandes, arguments, contexte</li>
          <li>aklo_status_shell : métriques, artefacts, rapport</li>
          <li>safe_shell : sécurité, whitelist, timeout</li>
          <li>project_info : parsing JSON, informations Git, métriques</li>
        </ul>
      </step>
      <step number="3">Créer le script de benchmark <code>benchmark_mcp_shell_vs_node.sh</code></step>
      <step number="4">Mesurer les performances :
        <ul>
          <li>Temps de démarrage serveur</li>
          <li>Temps de réponse par outil</li>
          <li>Utilisation mémoire</li>
          <li>Comparaison shell vs Node.js</li>
        </ul>
      </step>
      <step number="5">Valider la parité fonctionnelle avec le serveur Node.js</step>
      <step number="6">Générer un rapport de performance détaillé</step>
      <step number="7">Intégrer aux tests existants du framework aklo</step>
    </ai_agent_instructions>
    <definition_of_done>
      <criterion state="todo">Suite de tests d'intégration complète créée</criterion>
      <criterion state="todo">Tests automatisés pour les 4 outils MCP shell natifs</criterion>
      <criterion state="todo">Benchmark de performance shell vs Node.js implémenté</criterion>
      <criterion state="todo">Validation de la parité fonctionnelle réussie</criterion>
      <criterion state="todo">Rapport de performance généré avec métriques claires</criterion>
      <criterion state="todo">Gains de performance mesurés et documentés (+50% visé)</criterion>
      <criterion state="todo">Intégration aux tests existants du framework aklo</criterion>
      <criterion state="todo">Tests passent sur macOS et Linux</criterion>
      <criterion state="todo">Documentation des résultats de performance</criterion>
    </definition_of_done>
  </content>
</task>