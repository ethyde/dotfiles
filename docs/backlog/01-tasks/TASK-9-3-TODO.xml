# TASK-9-3 : Extension outil `aklo_execute` avec validation avancée

---

## DO NOT EDIT THIS SECTION MANUALLY

**PBI Parent:** [PBI-9](../00-pbi/PBI-9-PROPOSED.xml)
**Revue Architecturale Requise:** Non
**Document d'Architecture (si applicable):** [ARCH-9-1.xml](../02-architecture/ARCH-9-1.xml)
**Assigné à:** `Non assigné`
**Branche Git:** `feature/task-9-3`

---

## 1. Objectif Technique

Étendre l'outil `aklo_execute_shell` existant pour inclure la validation avancée des commandes aklo, la gestion du contexte de travail et les logs sécurisés, atteignant la parité avec `aklo_execute` du serveur Node.js.

**Fichiers à modifier :**
- `/aklo/modules/mcp/shell-native/aklo-terminal.sh`

**Résultat attendu :**
- Validation complète des commandes aklo autorisées
- Gestion robuste des arguments et du contexte
- Logs sécurisés et informatifs
- Parité fonctionnelle avec le serveur Node.js

## 2. Contexte et Fichiers Pertinents

### Serveur Node.js de référence
```javascript
// aklo/modules/mcp/terminal/index.js - Lignes 44-66
{
  name: 'aklo_execute',
  description: 'Exécute une commande aklo de manière sécurisée avec validation du contexte',
  inputSchema: {
    type: 'object',
    properties: {
      command: {
        type: 'string',
        description: 'Commande aklo à exécuter (ex: "init", "propose-pbi", "plan")',
      },
      args: {
        type: 'array',
        items: { type: 'string' },
        description: 'Arguments pour la commande aklo',
      },
      workdir: {
        type: 'string',
        description: 'Répertoire de travail (optionnel, utilise le répertoire courant par défaut)',
      },
    },
    required: ['command'],
  },
}
```

### Serveur shell natif actuel
```bash
# aklo/modules/mcp/shell-native/aklo-terminal.sh - Fonction actuelle
handle_aklo_execute() {
    # Implémentation basique existante à étendre
    # Nécessite amélioration de la validation et des logs
}
```

### Commandes aklo autorisées
```bash
# Liste complète des commandes aklo valides
ALLOWED_AKLO_COMMANDS=(
    "status" "get_config" "config" "validate" "mcp" "cache" "monitor"
    "template" "install-ux" "propose-pbi" "pbi" "plan" "arch" "dev"
    "debug" "review" "refactor" "hotfix" "optimize" "security" "release"
    "diagnose" "experiment" "docs" "analyze" "track" "onboard" "deprecate"
    "kb" "fast" "meta" "scratch" "help"
)

validate_aklo_command() {
    local cmd="$1"
    for allowed in "${ALLOWED_AKLO_COMMANDS[@]}"; do
        if [ "$cmd" = "$allowed" ]; then
            return 0
        fi
    done
    return 1
}
```

## 3. Instructions Détaillées pour l'AI_Agent (Prompt)

1. **Analyser la fonction `handle_aklo_execute` existante** dans le serveur shell natif
2. **Étendre la validation des commandes** avec la liste complète des commandes aklo autorisées
3. **Améliorer le parsing des arguments** pour supporter les arrays JSON
4. **Ajouter la gestion du contexte** (workdir, variables d'environnement)
5. **Implémenter les logs sécurisés** avec informations contextuelles
6. **Améliorer la gestion d'erreurs** avec messages informatifs
7. **Tester la compatibilité** avec toutes les commandes aklo principales
8. **Valider la parité** avec le serveur Node.js

## 4. Définition de "Terminé" (Definition of Done)

- [ ] La validation des commandes aklo est complète et robuste
- [ ] Les arguments en array JSON sont correctement parsés
- [ ] La gestion du contexte de travail (workdir) fonctionne
- [ ] Les logs sécurisés sont implémentés avec informations utiles
- [ ] La gestion d'erreurs est améliorée avec messages clairs
- [ ] Tests manuels réussis avec les commandes aklo principales
- [ ] Parité fonctionnelle atteinte avec le serveur Node.js
- [ ] Documentation mise à jour dans les commentaires du code
- [ ] Aucune régression sur les fonctionnalités existantes