<task pbi_id="9" task_id="2" status="todo" title="Implémentation outil project_info avec parsing JSON natif">
  <metadata>
    <parent_pbi>PBI-9</parent_pbi>
    <arch_review_required>yes</arch_review_required>
    <architecture_document>ARCH-9-1-VALIDATED.xml</architecture_document>
    <assignee>Non assigné</assignee>
    <git_branch>feature/task-9-2</git_branch>
  </metadata>
  <content>
    <technical_objective>
      Implémenter l'outil <code>project_info</code> dans le serveur MCP shell natif avec parsing JSON hybride (détection <code>jq</code> + fallback natif) pour extraire les informations de projet.
      Fichiers à modifier : <file>/aklo/modules/mcp/shell-native/aklo-terminal.sh</file>
      Résultat attendu :
      <ul>
        <li>Nouvel outil <code>project_info</code> disponible dans le serveur MCP shell natif</li>
        <li>Parsing JSON hybride fonctionnel (avec fallback <code>jq</code> si disponible)</li>
        <li>Extraction des informations Git (branch, status, remote)</li>
        <li>Lecture de la configuration Aklo (.aklo.conf)</li>
        <li>Métriques projet (comptage PBI, tasks, etc.)</li>
      </ul>
    </technical_objective>
    <context_and_files>
      Architecture validée : <file>../02-architecture/ARCH-9-1-VALIDATED.xml</file>
      Serveur Node.js de référence : <file>aklo/modules/mcp/terminal/index.js</file>
      <code language="bash"><![CDATA[
# Priorité à jq si disponible, sinon fallback manuel optimisé
parse_json_hybrid() {
    local file="$1"
    local key="$2"
    if command -v jq >/dev/null 2>&1; then
        jq -r ".$key // \"N/A\"" "$file" 2>/dev/null
    else
        # Fallback pour structures simples
        grep "\"$key\"" "$file" | head -1 | sed 's/.*"'"$key"'": *"\([^"]*\)".*/\1/'
    fi
}
      ]]></code>
      Informations à extraire :
      <ul>
        <li>package.json : name, version, description</li>
        <li>Git : current branch, status (clean/dirty), remote URL</li>
        <li>Aklo config (.aklo.conf) : agent_assistance, auto_journal</li>
        <li>Métriques projet : Nombre de PBI et tasks par statut</li>
      </ul>
    </context_and_files>
    <ai_agent_instructions>
      <description>Instructions séquentielles pour l'agent :</description>
      <step number="1">Analyser la structure du serveur shell natif actuel</step>
      <step number="2">Ajouter <code>project_info</code> à la liste des outils dans tools/list</step>
      <step number="3">Implémenter le parsing JSON hybride avec détection <code>jq</code></step>
      <step number="4">Créer la fonction <code>handle_project_info</code> qui :
        <ul>
          <li>Parse le paramètre workdir depuis JSON</li>
          <li>Extrait les infos package.json (name, version, description) via parsing hybride</li>
          <li>Récupère les informations Git (branch, status, remote)</li>
          <li>Lit la configuration Aklo (.aklo.conf)</li>
          <li>Compte les artefacts (PBI, tasks) par statut</li>
          <li>Retourne un JSON structuré</li>
        </ul>
      </step>
      <step number="5">Ajouter le case <code>project_info</code> dans tools/call</step>
      <step number="6">Tester le parsing JSON avec et sans <code>jq</code></step>
      <step number="7">Valider la compatibilité avec le serveur Node.js</step>
    </ai_agent_instructions>
    <definition_of_done>
      <criterion state="todo">L'outil project_info est ajouté à la liste des outils MCP</criterion>
      <criterion state="todo">Le parsing JSON hybride fonctionne (avec et sans jq)</criterion>
      <criterion state="todo">Les informations package.json sont extraites correctement</criterion>
      <criterion state="todo">Les informations Git sont récupérées</criterion>
      <criterion state="todo">La configuration Aklo (.aklo.conf) est lue</criterion>
      <criterion state="todo">Les métriques projet sont calculées</criterion>
      <criterion state="todo">La réponse JSON est structurée et conforme au protocole MCP</criterion>
      <criterion state="todo">Tests manuels réussis sur différents projets</criterion>
      <criterion state="todo">Gestion gracieuse des fichiers manquants</criterion>
      <criterion state="todo">Documentation du parsing JSON dans les commentaires</criterion>
    </definition_of_done>
  </content>
</task>