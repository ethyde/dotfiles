<architecture pbi_id="13" arch_id="1" status="validated" title="Architecture lazy loading et profils adaptatifs pour optimisations aklo">
  <metadata>
    <parent_pbi>PBI-13</parent_pbi>
    <document_reference>ARCH-13-1.xml</document_reference>
    <assignee>Human_Developer</assignee>
    <git_branch>feature/arch-13-lazy-loading</git_branch>
  </metadata>
  <content>
    <problem>
      Le système aklo souffre d'un paradoxe de performance identifié lors du diagnostic MCP : les optimisations de performance implémentées dans PBI-7 (TASK-7-1 à TASK-7-5) ont créé une surcharge d'initialisation qui ralentit les commandes simples.
      <details>
        <item>Chargement systématique de tous les modules d'optimisation pour toutes les commandes</item>
        <item>get_config prend 0.080s au lieu de &lt;0.050s ciblé</item>
        <item>Initialisation lourde même pour les opérations triviales</item>
      </details>
      <modules>
        <code language="bash"><![CDATA[
# Modules chargés systématiquement (problématique)
cache/cache_functions.sh      # Toujours chargé
cache/regex_cache.sh          # 24 patterns, même pour get_config
cache/batch_io.sh             # I/O batch, même pour status
cache/id_cache.sh             # Génération IDs, même pour version
io/io_monitoring.sh           # Monitoring I/O, même pour help
performance/performance_tuning.sh # Tuning avancé, même pour config
        ]]></code>
      </modules>
      <impact>
        <item>Commandes simples : 0.080s (vs 0.050s cible)</item>
        <item>Timeout MCP : 30s dépassé lors de l'initialisation</item>
        <item>Sur-engineering : optimisations utilisées &lt;10% du temps</item>
      </impact>
    </problem>
    <constraints>
      <item>Préservation des optimisations TASK-7-x pour les commandes complexes</item>
      <item>Aucune régression sur les performances des commandes avancées</item>
      <item>Maintien de la compatibilité avec l'interface MCP</item>
      <item>get_config, status : &lt; 0.050s</item>
      <item>plan, dev, debug : &lt; 0.200s (avec cache essentiel)</item>
      <item>optimize, benchmark : &lt; 1.000s (avec toutes les optimisations)</item>
      <item>Dépendances entre modules à gérer intelligemment</item>
      <item>Fallback robuste en cas d'échec de chargement</item>
      <item>Gestion des commandes inconnues ou futures</item>
    </constraints>
    <explored_options>
      <option name="A">Profils Statiques avec Classification Manuelle</option>
      <option name="B">Chargement Dynamique avec Détection de Dépendances</option>
      <option name="C">Profils Adaptatifs avec Heuristiques Intelligentes</option>
    </explored_options>
    <decision>
      <chosen_option>C - Profils Adaptatifs avec Heuristiques Intelligentes</chosen_option>
      <justification>
        <item>Performance : Optimisation ciblée selon les besoins réels</item>
        <item>Automatisation : Détection automatique des nouvelles commandes</item>
        <item>Robustesse : Architecture fail-safe sans possibilité d'échec</item>
        <item>Monitoring Avancé : Métriques complètes et historique d'apprentissage</item>
      </justification>
      <tradeoffs>
        <item>Adaptabilité automatique requise</item>
        <item>Maintien de performances optimales</item>
        <item>Architecture robuste qui ne peut pas échouer</item>
      </tradeoffs>
    </decision>
    <architecture>
      <profiles>
        <code language="bash"><![CDATA[
PROFILE_MINIMAL="core"                    # get_config, status, version, help
PROFILE_NORMAL="core,cache_basic"         # plan, dev, debug, review
PROFILE_FULL="core,cache_basic,cache_advanced,io,perf"  # optimize, benchmark
        ]]></code>
      </profiles>
      <heuristics>
        <item>Détection d'arguments : Analyse des flags pour adapter le profil automatiquement</item>
        <item>Contexte unifié : Comportement identique MCP et CLI</item>
        <item>Historique d'usage : Apprentissage automatique des patterns pour nouvelles commandes</item>
        <item>Classification automatique : Détection intelligente des besoins sans intervention manuelle</item>
      </heuristics>
      <fail_safe>
        <item>Chargement progressif : Minimal → Normal → Full en cas de dépendance manquante</item>
        <item>Validation préalable : Vérification de tous les modules avant chargement</item>
        <item>Fallback automatique : Chargement complet transparent en cas de problème</item>
        <item>Pas de mode debug : Système transparent sans override manuel</item>
      </fail_safe>
    </architecture>
    <diagram>
      <code language="text"><![CDATA[
┌─────────────────────────────────────────────────────────────────┐
│                AKLO FAIL-SAFE LAZY LOADING ARCHITECTURE        │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Command Args  │───▶│  Auto Command   │───▶│  Intelligent    │
│   (any command) │    │  Classifier     │    │  Profile        │
│                 │    │  + Learning     │    │  Detector       │
└─────────────────┘    └─────────────────┘    └─────────────────┘
        │
        ▼
┌─────────────────────────────────────────────────────────────────┐
│                 ADAPTIVE PROFILE SELECTION                     │
│  MINIMAL ─▶ core (get_config, status)                          │
│  NORMAL  ─▶ core + cache_basic (plan, dev)                     │
│  FULL    ─▶ core + cache_basic + cache_advanced + io + perf    │
│            (optimize, benchmark)                               │
│  AUTO    ─▶ Learning-based for unknown commands                │
└─────────────────────────────────────────────────────────────────┘
        │
        ▼
┌─────────────────────────────────────────────────────────────────┐
│                    FAIL-SAFE LAZY LOADER                       │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐             │
│  │  Progressive│  │  Validation │  │  Advanced   │             │
│  │   Loading   │  │   & Retry   │  │  Metrics    │             │
│  │   Engine    │  │   Engine    │  │  Engine     │             │
│  └─────────────┘  └─────────────┘  └─────────────┘             │
│  Minimal → Normal → Full (automatic escalation)                │
│  + Complete fallback if any issue detected                     │
└─────────────────────────────────────────────────────────────────┘
        │
        ▼
┌─────────────────────────────────────────────────────────────────┐
│                    LOADED MODULES + METRICS                    │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐             │
│  │    Core     │  │    Cache    │  │  Performance│             │
│  │  Functions  │  │  Functions  │  │  Functions  │             │
│  └─────────────┘  └─────────────┘  └─────────────┘             │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐             │
│  │  Load Time  │  │  Usage      │  │  Learning   │             │
│  │  Metrics    │  │  History    │  │  Database   │             │
│  └─────────────┘  └─────────────┘  └─────────────┘             │
└─────────────────────────────────────────────────────────────────┘
  ]]></code>
    </diagram>
  </content>
</architecture>